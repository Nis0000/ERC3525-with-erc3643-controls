{
	"id": "a222fdf3be65a32b98b7d039fa8ef0ac",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.17",
	"solcLongVersion": "0.8.17+commit.8df45f5f",
	"input": {
		"language": "Solidity",
		"sources": {
			"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport \"../storage/CTRStorage.sol\";\nimport \"../interface/IClaimTopicsRegistry.sol\";\n\ncontract ClaimTopicsRegistry is IClaimTopicsRegistry, OwnableUpgradeable, CTRStorage {\n\n    function init() external initializer {\n        __Ownable_init(msg.sender);\n    }\n\n    /**\n     *  @dev See {IClaimTopicsRegistry-addClaimTopic}.\n     */\n    function addClaimTopic(uint256 _claimTopic) external override onlyOwner {\n        uint256 length = _claimTopics.length;\n        require(length < 15, \"cannot require more than 15 topics\");\n        for (uint256 i = 0; i < length; i++) {\n            require(_claimTopics[i] != _claimTopic, \"claimTopic already exists\");\n        }\n        _claimTopics.push(_claimTopic);\n        emit ClaimTopicAdded(_claimTopic);\n    }\n\n    /**\n     *  @dev See {IClaimTopicsRegistry-removeClaimTopic}.\n     */\n    function removeClaimTopic(uint256 _claimTopic) external override onlyOwner {\n        uint256 length = _claimTopics.length;\n        for (uint256 i = 0; i < length; i++) {\n            if (_claimTopics[i] == _claimTopic) {\n                _claimTopics[i] = _claimTopics[length - 1];\n                _claimTopics.pop();\n                emit ClaimTopicRemoved(_claimTopic);\n                break;\n            }\n        }\n    }\n\n    /**\n     *  @dev See {IClaimTopicsRegistry-getClaimTopics}.\n     */\n    function getClaimTopics() external view override returns (uint256[] memory) {\n        return _claimTopics;\n    }\n}\n"
			},
			"contracts t-rex/registry/interface/IClaimTopicsRegistry.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\ninterface IClaimTopicsRegistry {\n    /**\n     *  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\n     *  the event is emitted by the 'addClaimTopic' function\n     *  `claimTopic` is the required claim added to the Claim Topics Registry\n     */\n    event ClaimTopicAdded(uint256 indexed claimTopic);\n\n    /**\n     *  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\n     *  the event is emitted by the 'removeClaimTopic' function\n     *  `claimTopic` is the required claim removed from the Claim Topics Registry\n     */\n    event ClaimTopicRemoved(uint256 indexed claimTopic);\n\n    /**\n     * @dev Add a trusted claim topic (For example: KYC=1, AML=2).\n     * Only owner can call.\n     * emits `ClaimTopicAdded` event\n     * cannot add more than 15 topics for 1 token as adding more could create gas issues\n     * @param _claimTopic The claim topic index\n     */\n    function addClaimTopic(uint256 _claimTopic) external;\n\n    /**\n     *  @dev Remove a trusted claim topic (For example: KYC=1, AML=2).\n     *  Only owner can call.\n     *  emits `ClaimTopicRemoved` event\n     *  @param _claimTopic The claim topic index\n     */\n    function removeClaimTopic(uint256 _claimTopic) external;\n\n    /**\n     *  @dev Get the trusted claim topics for the security token\n     *  @return Array of trusted claim topics\n     */\n    function getClaimTopics() external view returns (uint256[] memory);\n}\n"
			},
			"contracts t-rex/registry/storage/CTRStorage.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\n//\n//                                             :+#####%%%%%%%%%%%%%%+\n//                                         .-*@@@%+.:+%@@@@@%%#***%@@%=\n//                                     :=*%@@@#=.      :#@@%       *@@@%=\n//                       .-+*%@%*-.:+%@@@@@@+.     -*+:  .=#.       :%@@@%-\n//                   :=*@@@@%%@@@@@@@@@%@@@-   .=#@@@%@%=             =@@@@#.\n//             -=+#%@@%#*=:.  :%@@@@%.   -*@@#*@@@@@@@#=:-              *@@@@+\n//            =@@%=:.     :=:   *@@@@@%#-   =%*%@@@@#+-.        =+       :%@@@%-\n//           -@@%.     .+@@@     =+=-.         @@#-           +@@@%-       =@@@@%:\n//          :@@@.    .+@@#%:                   :    .=*=-::.-%@@@+*@@=       +@@@@#.\n//          %@@:    +@%%*                         =%@@@@@@@@@@@#.  .*@%-       +@@@@*.\n//         #@@=                                .+@@@@%:=*@@@@@-      :%@%:      .*@@@@+\n//        *@@*                                +@@@#-@@%-:%@@*          +@@#.      :%@@@@-\n//       -@@%           .:-=++*##%%%@@@@@@@@@@@@*. :@+.@@@%:            .#@@+       =@@@@#:\n//      .@@@*-+*#%%%@@@@@@@@@@@@@@@@%%#**@@%@@@.   *@=*@@#                :#@%=      .#@@@@#-\n//      -%@@@@@@@@@@@@@@@*+==-:-@@@=    *@# .#@*-=*@@@@%=                 -%@@@*       =@@@@@%-\n//         -+%@@@#.   %@%%=   -@@:+@: -@@*    *@@*-::                   -%@@%=.         .*@@@@@#\n//            *@@@*  +@* *@@##@@-  #@*@@+    -@@=          .         :+@@@#:           .-+@@@%+-\n//             +@@@%*@@:..=@@@@*   .@@@*   .#@#.       .=+-       .=%@@@*.         :+#@@@@*=:\n//              =@@@@%@@@@@@@@@@@@@@@@@@@@@@%-      :+#*.       :*@@@%=.       .=#@@@@%+:\n//               .%@@=                 .....    .=#@@+.       .#@@@*:       -*%@@@@%+.\n//                 +@@#+===---:::...         .=%@@*-         +@@@+.      -*@@@@@%+.\n//                  -@@@@@@@@@@@@@@@@@@@@@@%@@@@=          -@@@+      -#@@@@@#=.\n//                    ..:::---===+++***###%%%@@@#-       .#@@+     -*@@@@@#=.\n//                                           @@@@@@+.   +@@*.   .+@@@@@%=.\n//                                          -@@@@@=   =@@%:   -#@@@@%+.\n//                                          +@@@@@. =@@@=  .+@@@@@*:\n//                                          #@@@@#:%@@#. :*@@@@#-\n//                                          @@@@@%@@@= :#@@@@+.\n//                                         :@@@@@@@#.:#@@@%-\n//                                         +@@@@@@-.*@@@*:\n//                                         #@@@@#.=@@@+.\n//                                         @@@@+-%@%=\n//                                        :@@@#%@%=\n//                                        +@@@@%-\n//                                        :#%%=\n//\n\n/**\n *     NOTICE\n *\n *     The T-REX software is licensed under a proprietary license or the GPL v.3.\n *     If you choose to receive it under the GPL v.3 license, the following applies:\n *     T-REX is a suite of smart contracts implementing the ERC-3643 standard and\n *     developed by Tokeny to manage and transfer financial assets on EVM blockchains\n *\n *     Copyright (C) 2023, Tokeny sàrl.\n *\n *     This program is free software: you can redistribute it and/or modify\n *     it under the terms of the GNU General Public License as published by\n *     the Free Software Foundation, either version 3 of the License, or\n *     (at your option) any later version.\n *\n *     This program is distributed in the hope that it will be useful,\n *     but WITHOUT ANY WARRANTY; without even the implied warranty of\n *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n *     GNU General Public License for more details.\n *\n *     You should have received a copy of the GNU General Public License\n *     along with this program.  If not, see <https://www.gnu.org/licenses/>.\n */\n\npragma solidity 0.8.17;\n\ncontract CTRStorage {\n    /// @dev All required Claim Topics\n    uint256[] internal _claimTopics;\n\n    /**\n     * @dev This empty reserved space is put in place to allow future versions to add new\n     * variables without shifting down storage in the inheritance chain.\n     */\n    uint256[49] private __gap;\n}"
			},
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.17;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\n// import {Initializable} from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is  ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.17;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.17;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"OwnableUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"details": "Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"owner()": "8da5cb5b",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Contract module which provides a basic access control mechanism, where there is an account (an owner) that can be granted exclusive access to specific functions. The initial owner is set to the address provided by the deployer. This can later be changed with {transferOwnership}. This module is used through inheritance. It will make available the modifier `onlyOwner`, which can be applied to your functions to restrict their use to the owner.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":\"OwnableUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xf702b0c3a7ccdae8bb7b1265c9bb536ce4051311d82b1b44b94a43bfbe130818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3de77c5e3f4ac02518481cb21e907f5f1fd5bb8f3f3c6c880fdb193afc006c77\",\"dweb:/ipfs/QmXXrLgxyDswm4zjz27GvGRZQWcWg8Tpu8ANvrmDk5q1sW\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x65315805c3cddf140325ec9d7cf45cfca17b73b4680d1401e0869e63f4d4eebd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://06ab79ad2381ae0dcbd1fa902630d2cf024c586f885bb7d54fd6e0ed93c22325\",\"dweb:/ipfs/QmYtzBU3tiEHPh68xFdxLGc5PJtxiH8RHmchx1hzwcRhZT\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdaecaa981ac8b1d77c4942c691cbeb71971a0fa2a0adba07e2f2d75da8ca2fd9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1596acf548eb5b52b95c684f8913729cdb04102ce76e3203c1831fa2dc6dfb3\",\"dweb:/ipfs/QmYQM9sizfJu613HW3UL52CUe6pxC3osc4bfJRyD1p8SWc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"Initializable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"custom:oz-upgrades-unsafe-allow": "constructor constructor() {     _disableInitializers(); } ``` ====",
						"details": "This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\"MyToken\", \"MTK\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\"MyToken\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"events": {
							"Initialized(uint64)": {
								"details": "Triggered when the contract has been initialized or reinitialized."
							}
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"custom:oz-upgrades-unsafe-allow\":\"constructor constructor() {     _disableInitializers(); } ``` ====\",\"details\":\"This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer function so it can only be called once. The {initializer} modifier provided by this contract will have this effect. The initialization functions use a version number. Once a version number is used, it is consumed and cannot be reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in case an upgrade adds a module that needs to be initialized. For example: [.hljs-theme-light.nopadding] ```solidity contract MyToken is ERC20Upgradeable {     function initialize() initializer public {         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");     } } contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {     function initializeV2() reinitializer(2) public {         __ERC20Permit_init(\\\"MyToken\\\");     } } ``` TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}. CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure that all initializers are idempotent. This is not verified automatically as constructors are by Solidity. [CAUTION] ==== Avoid leaving a contract uninitialized. An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke the {_disableInitializers} function in the constructor to automatically lock it when it is deployed: [.hljs-theme-light.nopadding] ```\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":\"Initializable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x65315805c3cddf140325ec9d7cf45cfca17b73b4680d1401e0869e63f4d4eebd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://06ab79ad2381ae0dcbd1fa902630d2cf024c586f885bb7d54fd6e0ed93c22325\",\"dweb:/ipfs/QmYtzBU3tiEHPh68xFdxLGc5PJtxiH8RHmchx1hzwcRhZT\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ContextUpgradeable": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						}
					],
					"devdoc": {
						"details": "Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.",
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							]
						},
						"kind": "dev",
						"methods": {},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"}],\"devdoc\":{\"details\":\"Provides information about the current execution context, including the sender of the transaction and its data. While these are generally available via msg.sender and msg.data, they should not be accessed in such a direct manner, since when dealing with meta-transactions the account sending and paying for execution may not be the actual sender (as far as an application is concerned). This contract is only required for intermediate, library-like contracts.\",\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}]},\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":\"ContextUpgradeable\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x65315805c3cddf140325ec9d7cf45cfca17b73b4680d1401e0869e63f4d4eebd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://06ab79ad2381ae0dcbd1fa902630d2cf024c586f885bb7d54fd6e0ed93c22325\",\"dweb:/ipfs/QmYtzBU3tiEHPh68xFdxLGc5PJtxiH8RHmchx1hzwcRhZT\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdaecaa981ac8b1d77c4942c691cbeb71971a0fa2a0adba07e2f2d75da8ca2fd9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1596acf548eb5b52b95c684f8913729cdb04102ce76e3203c1831fa2dc6dfb3\",\"dweb:/ipfs/QmYQM9sizfJu613HW3UL52CUe6pxC3osc4bfJRyD1p8SWc\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol": {
				"ClaimTopicsRegistry": {
					"abi": [
						{
							"inputs": [],
							"name": "InvalidInitialization",
							"type": "error"
						},
						{
							"inputs": [],
							"name": "NotInitializing",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "owner",
									"type": "address"
								}
							],
							"name": "OwnableInvalidOwner",
							"type": "error"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "account",
									"type": "address"
								}
							],
							"name": "OwnableUnauthorizedAccount",
							"type": "error"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								}
							],
							"name": "ClaimTopicAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								}
							],
							"name": "ClaimTopicRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": false,
									"internalType": "uint64",
									"name": "version",
									"type": "uint64"
								}
							],
							"name": "Initialized",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "previousOwner",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "OwnershipTransferred",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_claimTopic",
									"type": "uint256"
								}
							],
							"name": "addClaimTopic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getClaimTopics",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "init",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "owner",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_claimTopic",
									"type": "uint256"
								}
							],
							"name": "removeClaimTopic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "renounceOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "newOwner",
									"type": "address"
								}
							],
							"name": "transferOwnership",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"errors": {
							"InvalidInitialization()": [
								{
									"details": "The contract is already initialized."
								}
							],
							"NotInitializing()": [
								{
									"details": "The contract is not initializing."
								}
							],
							"OwnableInvalidOwner(address)": [
								{
									"details": "The owner is not a valid owner account. (eg. `address(0)`)"
								}
							],
							"OwnableUnauthorizedAccount(address)": [
								{
									"details": "The caller account is not authorized to perform an operation."
								}
							]
						},
						"kind": "dev",
						"methods": {
							"addClaimTopic(uint256)": {
								"details": "See {IClaimTopicsRegistry-addClaimTopic}."
							},
							"getClaimTopics()": {
								"details": "See {IClaimTopicsRegistry-getClaimTopics}."
							},
							"owner()": {
								"details": "Returns the address of the current owner."
							},
							"removeClaimTopic(uint256)": {
								"details": "See {IClaimTopicsRegistry-removeClaimTopic}."
							},
							"renounceOwnership()": {
								"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
							},
							"transferOwnership(address)": {
								"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4003:5360  contract ClaimTopicsRegistry is IClaimTopicsRegistry, OwnableUpgradeable, CTRStorage {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4003:5360  contract ClaimTopicsRegistry is IClaimTopicsRegistry, OwnableUpgradeable, CTRStorage {... */\n      mstore(0x40, 0x80)\n      callvalue\n      dup1\n      iszero\n      tag_1\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_1:\n      pop\n      jumpi(tag_2, lt(calldatasize, 0x04))\n      shr(0xe0, calldataload(0x00))\n      dup1\n      0xc7b22551\n      gt\n      tag_10\n      jumpi\n      dup1\n      0xc7b22551\n      eq\n      tag_6\n      jumpi\n      dup1\n      0xdf09d604\n      eq\n      tag_7\n      jumpi\n      dup1\n      0xe1c7392a\n      eq\n      tag_8\n      jumpi\n      dup1\n      0xf2fde38b\n      eq\n      tag_9\n      jumpi\n      0x00\n      dup1\n      revert\n    tag_10:\n      dup1\n      0x08297846\n      eq\n      tag_3\n      jumpi\n      dup1\n      0x715018a6\n      eq\n      tag_4\n      jumpi\n      dup1\n      0x8da5cb5b\n      eq\n      tag_5\n      jumpi\n    tag_2:\n      0x00\n      dup1\n      revert\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4747:5168  function removeClaimTopic(uint256 _claimTopic) external override onlyOwner {... */\n    tag_3:\n      tag_11\n      tag_12\n      calldatasize\n      0x04\n      tag_13\n      jump\t// in\n    tag_12:\n      tag_14\n      jump\t// in\n    tag_11:\n      stop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3165:3266  function renounceOwnership() public virtual onlyOwner {... */\n    tag_4:\n      tag_11\n      tag_16\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2451:2595  function owner() public view virtual returns (address) {... */\n    tag_5:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1323:1345  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2580:2588  $._owner */\n      sload\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2451:2595  function owner() public view virtual returns (address) {... */\n      mload(0x40)\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2580:2588  $._owner */\n      swap1\n      swap2\n      and\n        /* \"#utility.yul\":345:396   */\n      dup2\n      mstore\n        /* \"#utility.yul\":333:335   */\n      0x20\n        /* \"#utility.yul\":318:336   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2451:2595  function owner() public view virtual returns (address) {... */\n    tag_19:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      return\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4252:4667  function addClaimTopic(uint256 _claimTopic) external override onlyOwner {... */\n    tag_6:\n      tag_11\n      tag_22\n      calldatasize\n      0x04\n      tag_13\n      jump\t// in\n    tag_22:\n      tag_23\n      jump\t// in\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5246:5358  function getClaimTopics() external view override returns (uint256[] memory) {... */\n    tag_7:\n      tag_24\n      tag_25\n      jump\t// in\n    tag_24:\n      mload(0x40)\n      tag_19\n      swap2\n      swap1\n      tag_27\n      jump\t// in\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4095:4175  function init() external initializer {... */\n    tag_8:\n      tag_11\n      tag_29\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3415:3630  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_9:\n      tag_11\n      tag_31\n      calldatasize\n      0x04\n      tag_32\n      jump\t// in\n    tag_31:\n      tag_33\n      jump\t// in\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4747:5168  function removeClaimTopic(uint256 _claimTopic) external override onlyOwner {... */\n    tag_14:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2357  _checkOwner() */\n      tag_35\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2355  _checkOwner */\n      tag_36\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2357  _checkOwner() */\n      jump\t// in\n    tag_35:\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4832:4846  uint256 length */\n      0x00\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4849:4868  _claimTopics.length */\n      dup1\n      sload\n      swap1\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4878:5162  for (uint256 i = 0; i < length; i++) {... */\n    tag_38:\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4902:4908  length */\n      dup2\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4898:4899  i */\n      dup2\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4898:4908  i < length */\n      lt\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4878:5162  for (uint256 i = 0; i < length; i++) {... */\n      iszero\n      tag_39\n      jumpi\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4952:4963  _claimTopic */\n      dup3\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4933:4945  _claimTopics */\n      0x00\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4946:4947  i */\n      dup3\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4933:4948  _claimTopics[i] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_42\n      jumpi\n      tag_42\n      tag_43\n      jump\t// in\n    tag_42:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      sload\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4933:4963  _claimTopics[i] == _claimTopic */\n      sub\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4929:5152  if (_claimTopics[i] == _claimTopic) {... */\n      tag_45\n      jumpi\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5001:5013  _claimTopics */\n      0x00\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5014:5024  length - 1 */\n      tag_46\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5023:5024  1 */\n      0x01\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5014:5020  length */\n      dup5\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5014:5024  length - 1 */\n      tag_47\n      jump\t// in\n    tag_46:\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5001:5025  _claimTopics[length - 1] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_49\n      jumpi\n      tag_49\n      tag_43\n      jump\t// in\n    tag_49:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      sload\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4983:4995  _claimTopics */\n      0x00\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4996:4997  i */\n      dup3\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4983:4998  _claimTopics[i] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_52\n      jumpi\n      tag_52\n      tag_43\n      jump\t// in\n    tag_52:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4983:5025  _claimTopics[i] = _claimTopics[length - 1] */\n      dup2\n      swap1\n      sstore\n      pop\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5043:5055  _claimTopics */\n      0x00\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5043:5061  _claimTopics.pop() */\n      dup1\n      sload\n      dup1\n      tag_55\n      jumpi\n      tag_55\n      tag_56\n      jump\t// in\n    tag_55:\n      0x01\n      swap1\n      sub\n      dup2\n      dup2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      0x00\n      swap1\n      sstore\n      swap1\n      sstore\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5102:5113  _claimTopic */\n      dup3\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5084:5114  ClaimTopicRemoved(_claimTopic) */\n      0x0b1381093c776453c1bbe54fd68be1b235c65db61d099cb50d194b2991e0eec5\n      mload(0x40)\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log2\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4878:5162  for (uint256 i = 0; i < length; i++) {... */\n      pop\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4822:5168  {... */\n      pop\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4747:5168  function removeClaimTopic(uint256 _claimTopic) external override onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4929:5152  if (_claimTopics[i] == _claimTopic) {... */\n    tag_45:\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4910:4913  i++ */\n      dup1\n      tag_58\n      dup2\n      tag_59\n      jump\t// in\n    tag_58:\n      swap2\n      pop\n      pop\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4878:5162  for (uint256 i = 0; i < length; i++) {... */\n      jump(tag_38)\n    tag_39:\n      pop\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4822:5168  {... */\n      pop\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4747:5168  function removeClaimTopic(uint256 _claimTopic) external override onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3165:3266  function renounceOwnership() public virtual onlyOwner {... */\n    tag_16:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2357  _checkOwner() */\n      tag_61\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2355  _checkOwner */\n      tag_36\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2357  _checkOwner() */\n      jump\t// in\n    tag_61:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3229:3259  _transferOwnership(address(0)) */\n      tag_63\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3256:3257  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3229:3247  _transferOwnership */\n      tag_64\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3229:3259  _transferOwnership(address(0)) */\n      jump\t// in\n    tag_63:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3165:3266  function renounceOwnership() public virtual onlyOwner {... */\n      jump\t// out\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4252:4667  function addClaimTopic(uint256 _claimTopic) external override onlyOwner {... */\n    tag_23:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2357  _checkOwner() */\n      tag_69\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2355  _checkOwner */\n      tag_36\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2357  _checkOwner() */\n      jump\t// in\n    tag_69:\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4334:4348  uint256 length */\n      0x00\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4351:4370  _claimTopics.length */\n      sload\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4397:4399  15 */\n      0x0f\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4388:4399  length < 15 */\n      dup2\n      lt\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4380:4438  require(length < 15, \"cannot require more than 15 topics\") */\n      tag_71\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2206:2208   */\n      0x20\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4380:4438  require(length < 15, \"cannot require more than 15 topics\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2188:2209   */\n      mstore\n        /* \"#utility.yul\":2245:2247   */\n      0x22\n        /* \"#utility.yul\":2225:2243   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2218:2248   */\n      mstore\n        /* \"#utility.yul\":2284:2318   */\n      0x63616e6e6f742072657175697265206d6f7265207468616e20313520746f7069\n        /* \"#utility.yul\":2264:2282   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2257:2319   */\n      mstore\n      shl(0xf0, 0x6373)\n        /* \"#utility.yul\":2335:2353   */\n      0x64\n      dup3\n      add\n        /* \"#utility.yul\":2328:2360   */\n      mstore\n        /* \"#utility.yul\":2377:2396   */\n      0x84\n      add\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4380:4438  require(length < 15, \"cannot require more than 15 topics\") */\n    tag_72:\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n    tag_71:\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4453:4462  uint256 i */\n      0x00\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4448:4578  for (uint256 i = 0; i < length; i++) {... */\n    tag_74:\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4472:4478  length */\n      dup2\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4468:4469  i */\n      dup2\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4468:4478  i < length */\n      lt\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4448:4578  for (uint256 i = 0; i < length; i++) {... */\n      iszero\n      tag_75\n      jumpi\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4526:4537  _claimTopic */\n      dup3\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4507:4519  _claimTopics */\n      0x00\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4520:4521  i */\n      dup3\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4507:4522  _claimTopics[i] */\n      dup2\n      sload\n      dup2\n      lt\n      tag_78\n      jumpi\n      tag_78\n      tag_43\n      jump\t// in\n    tag_78:\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      add\n      sload\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4507:4537  _claimTopics[i] != _claimTopic */\n      sub\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4499:4567  require(_claimTopics[i] != _claimTopic, \"claimTopic already exists\") */\n      tag_80\n      jumpi\n      mload(0x40)\n      shl(0xe5, 0x461bcd)\n      dup2\n      mstore\n        /* \"#utility.yul\":2609:2611   */\n      0x20\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4499:4567  require(_claimTopics[i] != _claimTopic, \"claimTopic already exists\") */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":2591:2612   */\n      mstore\n        /* \"#utility.yul\":2648:2650   */\n      0x19\n        /* \"#utility.yul\":2628:2646   */\n      0x24\n      dup3\n      add\n        /* \"#utility.yul\":2621:2651   */\n      mstore\n        /* \"#utility.yul\":2687:2714   */\n      0x636c61696d546f70696320616c72656164792065786973747300000000000000\n        /* \"#utility.yul\":2667:2685   */\n      0x44\n      dup3\n      add\n        /* \"#utility.yul\":2660:2715   */\n      mstore\n        /* \"#utility.yul\":2732:2750   */\n      0x64\n      add\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4499:4567  require(_claimTopics[i] != _claimTopic, \"claimTopic already exists\") */\n      tag_72\n        /* \"#utility.yul\":2407:2756   */\n      jump\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4499:4567  require(_claimTopics[i] != _claimTopic, \"claimTopic already exists\") */\n    tag_80:\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4480:4483  i++ */\n      dup1\n      tag_83\n      dup2\n      tag_59\n      jump\t// in\n    tag_83:\n      swap2\n      pop\n      pop\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4448:4578  for (uint256 i = 0; i < length; i++) {... */\n      jump(tag_74)\n    tag_75:\n      pop\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4587:4599  _claimTopics */\n      0x00\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4587:4617  _claimTopics.push(_claimTopic) */\n      dup1\n      sload\n      0x01\n      dup2\n      add\n      dup3\n      sstore\n      dup2\n      dup1\n      mstore\n      0x290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e563\n      add\n      dup4\n      swap1\n      sstore\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4632:4660  ClaimTopicAdded(_claimTopic) */\n      mload(0x40)\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4605:4616  _claimTopic */\n      dup4\n      swap2\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4632:4660  ClaimTopicAdded(_claimTopic) */\n      0x01c928b7f7ade2949e92366aa9454dbef3a416b731cf6ec786ba9595bbd814d6\n      swap2\n      log2\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4324:4667  {... */\n      pop\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4252:4667  function addClaimTopic(uint256 _claimTopic) external override onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5246:5358  function getClaimTopics() external view override returns (uint256[] memory) {... */\n    tag_25:\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5304:5320  uint256[] memory */\n      0x60\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5339:5351  _claimTopics */\n      0x00\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5332:5351  return _claimTopics */\n      dup1\n      sload\n      dup1\n      0x20\n      mul\n      0x20\n      add\n      mload(0x40)\n      swap1\n      dup2\n      add\n      0x40\n      mstore\n      dup1\n      swap3\n      swap2\n      swap1\n      dup2\n      dup2\n      mstore\n      0x20\n      add\n      dup3\n      dup1\n      sload\n      dup1\n      iszero\n      tag_86\n      jumpi\n      0x20\n      mul\n      dup3\n      add\n      swap2\n      swap1\n      0x00\n      mstore\n      keccak256(0x00, 0x20)\n      swap1\n    tag_87:\n      dup2\n      sload\n      dup2\n      mstore\n      0x20\n      add\n      swap1\n      0x01\n      add\n      swap1\n      dup1\n      dup4\n      gt\n      tag_87\n      jumpi\n    tag_86:\n      pop\n      pop\n      pop\n      pop\n      pop\n      swap1\n      pop\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":5246:5358  function getClaimTopics() external view override returns (uint256[] memory) {... */\n      swap1\n      jump\t// out\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4095:4175  function init() external initializer {... */\n    tag_29:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8870:8891  INITIALIZABLE_STORAGE */\n      0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4302:4317  $._initializing */\n      dup1\n      sload\n      shl(0x40, 0x01)\n      dup2\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4301:4317  !$._initializing */\n      iszero\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4348:4362  $._initialized */\n      0xffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4158:4188  InitializableStorage storage $ */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4742  initialized == 0 */\n      dup2\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4760  initialized == 0 && isTopLevelCall */\n      dup1\n      iszero\n      tag_91\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4746:4760  isTopLevelCall */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4726:4760  initialized == 0 && isTopLevelCall */\n    tag_91:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4706:4760  bool initialSetup = initialized == 0 && isTopLevelCall */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4770:4787  bool construction */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4801  initialized */\n      dup3\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4806  initialized == 1 */\n      0xffffffffffffffff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4805:4806  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4806  initialized == 1 */\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4840  initialized == 1 && address(this).code.length == 0 */\n      dup1\n      iszero\n      tag_92\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4818:4822  this */\n      address\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4810:4835  address(this).code.length */\n      extcodesize\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4810:4840  address(this).code.length == 0 */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4790:4840  initialized == 1 && address(this).code.length == 0 */\n    tag_92:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4770:4840  bool construction = initialized == 1 && address(this).code.length == 0 */\n      swap1\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4856:4868  initialSetup */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4868  !initialSetup */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4885  !initialSetup && !construction */\n      dup1\n      iszero\n      tag_93\n      jumpi\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4873:4885  construction */\n      dup1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4872:4885  !construction */\n      iszero\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4855:4885  !initialSetup && !construction */\n    tag_93:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4851:4942  if (!initialSetup && !construction) {... */\n      iszero\n      tag_94\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4908:4931  InvalidInitialization() */\n      mload(0x40)\n      shl(0xe0, 0xf92ee8a9)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4851:4942  if (!initialSetup && !construction) {... */\n    tag_94:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4951:4969  $._initialized = 1 */\n      dup5\n      sload\n      not(0xffffffffffffffff)\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4968:4969  1 */\n      0x01\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4951:4969  $._initialized = 1 */\n      or\n      dup6\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4979:5046  if (isTopLevelCall) {... */\n      dup4\n      iszero\n      tag_95\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5013:5035  $._initializing = true */\n      dup5\n      sload\n      not(shl(0x40, 0xff))\n      and\n      shl(0x40, 0x01)\n      or\n      dup6\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4979:5046  if (isTopLevelCall) {... */\n    tag_95:\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4142:4168  __Ownable_init(msg.sender) */\n      tag_97\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4157:4167  msg.sender */\n      caller\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4142:4156  __Ownable_init */\n      tag_98\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4142:4168  __Ownable_init(msg.sender) */\n      jump\t// in\n    tag_97:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5070:5084  isTopLevelCall */\n      dup4\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5066:5167  if (isTopLevelCall) {... */\n      iszero\n      tag_99\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5100:5123  $._initializing = false */\n      dup5\n      sload\n      not(shl(0x40, 0xff))\n      and\n      dup6\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      mload(0x40)\n      0x01\n        /* \"#utility.yul\":2914:2964   */\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      0xc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2\n      swap1\n        /* \"#utility.yul\":2902:2904   */\n      0x20\n        /* \"#utility.yul\":2887:2905   */\n      add\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5142:5156  Initialized(1) */\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      log1\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":5066:5167  if (isTopLevelCall) {... */\n    tag_99:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":4092:5173  {... */\n      pop\n      pop\n      pop\n      pop\n      pop\n        /* \"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":4095:4175  function init() external initializer {... */\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3415:3630  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n    tag_33:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2357  _checkOwner() */\n      tag_103\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2355  _checkOwner */\n      tag_36\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2344:2357  _checkOwner() */\n      jump\t// in\n    tag_103:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3499:3521  newOwner == address(0) */\n      dup2\n      and\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3495:3586  if (newOwner == address(0)) {... */\n      tag_105\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3544:3575  OwnableInvalidOwner(address(0)) */\n      mload(0x40)\n      shl(0xe0, 0x1e4fbdf7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3572:3573  0 */\n      0x00\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3544:3575  OwnableInvalidOwner(address(0)) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":345:396   */\n      mstore\n        /* \"#utility.yul\":318:336   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3544:3575  OwnableInvalidOwner(address(0)) */\n      tag_72\n        /* \"#utility.yul\":199:402   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3495:3586  if (newOwner == address(0)) {... */\n    tag_105:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3595:3623  _transferOwnership(newOwner) */\n      tag_107\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3614:3622  newOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3595:3613  _transferOwnership */\n      tag_64\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3595:3623  _transferOwnership(newOwner) */\n      jump\t// in\n    tag_107:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3415:3630  function transferOwnership(address newOwner) public virtual onlyOwner {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2668:2830  function _checkOwner() internal view virtual {... */\n    tag_36:\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2727:2734  owner() */\n      tag_111\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1323:1345  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2580:2588  $._owner */\n      sload\n      sub(shl(0xa0, 0x01), 0x01)\n      and\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2451:2595  function owner() public view virtual returns (address) {... */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2727:2734  owner() */\n    tag_111:\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2727:2750  owner() != _msgSender() */\n      and\n      eq\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2723:2824  if (owner() != _msgSender()) {... */\n      tag_63\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2773:2813  OwnableUnauthorizedAccount(_msgSender()) */\n      mload(0x40)\n      shl(0xe0, 0x118cdaa7)\n      dup2\n      mstore\n        /* \"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":966:976  msg.sender */\n      caller\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2773:2813  OwnableUnauthorizedAccount(_msgSender()) */\n      0x04\n      dup3\n      add\n        /* \"#utility.yul\":345:396   */\n      mstore\n        /* \"#utility.yul\":318:336   */\n      0x24\n      add\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":2773:2813  OwnableUnauthorizedAccount(_msgSender()) */\n      tag_72\n        /* \"#utility.yul\":199:402   */\n      jump\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3784:4032  function _transferOwnership(address newOwner) internal virtual {... */\n    tag_64:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1323:1345  OwnableStorageLocation */\n      0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3933:3941  $._owner */\n      dup1\n      sload\n      not(sub(shl(0xa0, 0x01), 0x01))\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3951:3970  $._owner = newOwner */\n      dup2\n      and\n      sub(shl(0xa0, 0x01), 0x01)\n      dup5\n      dup2\n      and\n      swap2\n      dup3\n      or\n      dup5\n      sstore\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3985:4025  OwnershipTransferred(oldOwner, newOwner) */\n      mload(0x40)\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3933:3941  $._owner */\n      swap3\n      and\n      swap2\n      dup3\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3985:4025  OwnershipTransferred(oldOwner, newOwner) */\n      0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3857:3881  OwnableStorage storage $ */\n      0x00\n      swap1\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3985:4025  OwnershipTransferred(oldOwner, newOwner) */\n      log3\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3847:4032  {... */\n      pop\n      pop\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":3784:4032  function _transferOwnership(address newOwner) internal virtual {... */\n      pop\n      jump\t// out\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1857:1984  function __Ownable_init(address initialOwner) internal onlyInitializing {... */\n    tag_98:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_120\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_121\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n    tag_120:\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1939:1977  __Ownable_init_unchained(initialOwner) */\n      tag_107\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1964:1976  initialOwner */\n      dup2\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1939:1963  __Ownable_init_unchained */\n      tag_124\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1939:1977  __Ownable_init_unchained(initialOwner) */\n      jump\t// in\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7084:7225  function _checkInitializing() internal view virtual {... */\n    tag_121:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8870:8891  INITIALIZABLE_STORAGE */\n      0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":8560:8600  _getInitializableStorage()._initializing */\n      sload\n      shl(0x40, 0x01)\n      swap1\n      div\n      0xff\n      and\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7146:7219  if (!_isInitializing()) {... */\n      tag_63\n      jumpi\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":7191:7208  NotInitializing() */\n      mload(0x40)\n      shl(0xe3, 0x1afcd79f)\n      dup2\n      mstore\n      0x04\n      add\n      mload(0x40)\n      dup1\n      swap2\n      sub\n      swap1\n      revert\n        /* \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":1990:2225  function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {... */\n    tag_124:\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      tag_103\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6949  _checkInitializing */\n      tag_121\n        /* \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":6931:6951  _checkInitializing() */\n      jump\t// in\n        /* \"#utility.yul\":14:194   */\n    tag_13:\n        /* \"#utility.yul\":73:79   */\n      0x00\n        /* \"#utility.yul\":126:128   */\n      0x20\n        /* \"#utility.yul\":114:123   */\n      dup3\n        /* \"#utility.yul\":105:112   */\n      dup5\n        /* \"#utility.yul\":101:124   */\n      sub\n        /* \"#utility.yul\":97:129   */\n      slt\n        /* \"#utility.yul\":94:146   */\n      iszero\n      tag_141\n      jumpi\n        /* \"#utility.yul\":142:143   */\n      0x00\n        /* \"#utility.yul\":139:140   */\n      dup1\n        /* \"#utility.yul\":132:144   */\n      revert\n        /* \"#utility.yul\":94:146   */\n    tag_141:\n      pop\n        /* \"#utility.yul\":165:188   */\n      calldataload\n      swap2\n        /* \"#utility.yul\":14:194   */\n      swap1\n      pop\n      jump\t// out\n        /* \"#utility.yul\":407:1039   */\n    tag_27:\n        /* \"#utility.yul\":578:580   */\n      0x20\n        /* \"#utility.yul\":630:651   */\n      dup1\n      dup3\n      mstore\n        /* \"#utility.yul\":700:713   */\n      dup3\n      mload\n        /* \"#utility.yul\":603:621   */\n      dup3\n      dup3\n      add\n        /* \"#utility.yul\":722:744   */\n      dup2\n      swap1\n      mstore\n        /* \"#utility.yul\":549:553   */\n      0x00\n      swap2\n        /* \"#utility.yul\":578:580   */\n      swap1\n        /* \"#utility.yul\":801:816   */\n      dup5\n      dup3\n      add\n      swap1\n        /* \"#utility.yul\":775:777   */\n      0x40\n        /* \"#utility.yul\":760:778   */\n      dup6\n      add\n      swap1\n        /* \"#utility.yul\":549:553   */\n      dup5\n        /* \"#utility.yul\":844:1013   */\n    tag_144:\n        /* \"#utility.yul\":858:864   */\n      dup2\n        /* \"#utility.yul\":855:856   */\n      dup2\n        /* \"#utility.yul\":852:865   */\n      lt\n        /* \"#utility.yul\":844:1013   */\n      iszero\n      tag_146\n      jumpi\n        /* \"#utility.yul\":919:932   */\n      dup4\n      mload\n        /* \"#utility.yul\":907:933   */\n      dup4\n      mstore\n        /* \"#utility.yul\":988:1003   */\n      swap3\n      dup5\n      add\n      swap3\n        /* \"#utility.yul\":953:965   */\n      swap2\n      dup5\n      add\n      swap2\n        /* \"#utility.yul\":880:881   */\n      0x01\n        /* \"#utility.yul\":873:882   */\n      add\n        /* \"#utility.yul\":844:1013   */\n      jump(tag_144)\n    tag_146:\n      pop\n        /* \"#utility.yul\":1030:1033   */\n      swap1\n      swap7\n        /* \"#utility.yul\":407:1039   */\n      swap6\n      pop\n      pop\n      pop\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1044:1330   */\n    tag_32:\n        /* \"#utility.yul\":1103:1109   */\n      0x00\n        /* \"#utility.yul\":1156:1158   */\n      0x20\n        /* \"#utility.yul\":1144:1153   */\n      dup3\n        /* \"#utility.yul\":1135:1142   */\n      dup5\n        /* \"#utility.yul\":1131:1154   */\n      sub\n        /* \"#utility.yul\":1127:1159   */\n      slt\n        /* \"#utility.yul\":1124:1176   */\n      iszero\n      tag_148\n      jumpi\n        /* \"#utility.yul\":1172:1173   */\n      0x00\n        /* \"#utility.yul\":1169:1170   */\n      dup1\n        /* \"#utility.yul\":1162:1174   */\n      revert\n        /* \"#utility.yul\":1124:1176   */\n    tag_148:\n        /* \"#utility.yul\":1198:1221   */\n      dup2\n      calldataload\n      sub(shl(0xa0, 0x01), 0x01)\n        /* \"#utility.yul\":1250:1281   */\n      dup2\n      and\n        /* \"#utility.yul\":1240:1282   */\n      dup2\n      eq\n        /* \"#utility.yul\":1230:1300   */\n      tag_149\n      jumpi\n        /* \"#utility.yul\":1296:1297   */\n      0x00\n        /* \"#utility.yul\":1293:1294   */\n      dup1\n        /* \"#utility.yul\":1286:1298   */\n      revert\n        /* \"#utility.yul\":1230:1300   */\n    tag_149:\n        /* \"#utility.yul\":1319:1324   */\n      swap4\n        /* \"#utility.yul\":1044:1330   */\n      swap3\n      pop\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1335:1462   */\n    tag_43:\n        /* \"#utility.yul\":1396:1406   */\n      0x4e487b71\n        /* \"#utility.yul\":1391:1394   */\n      0xe0\n        /* \"#utility.yul\":1387:1407   */\n      shl\n        /* \"#utility.yul\":1384:1385   */\n      0x00\n        /* \"#utility.yul\":1377:1408   */\n      mstore\n        /* \"#utility.yul\":1427:1431   */\n      0x32\n        /* \"#utility.yul\":1424:1425   */\n      0x04\n        /* \"#utility.yul\":1417:1432   */\n      mstore\n        /* \"#utility.yul\":1451:1455   */\n      0x24\n        /* \"#utility.yul\":1448:1449   */\n      0x00\n        /* \"#utility.yul\":1441:1456   */\n      revert\n        /* \"#utility.yul\":1467:1594   */\n    tag_138:\n        /* \"#utility.yul\":1528:1538   */\n      0x4e487b71\n        /* \"#utility.yul\":1523:1526   */\n      0xe0\n        /* \"#utility.yul\":1519:1539   */\n      shl\n        /* \"#utility.yul\":1516:1517   */\n      0x00\n        /* \"#utility.yul\":1509:1540   */\n      mstore\n        /* \"#utility.yul\":1559:1563   */\n      0x11\n        /* \"#utility.yul\":1556:1557   */\n      0x04\n        /* \"#utility.yul\":1549:1564   */\n      mstore\n        /* \"#utility.yul\":1583:1587   */\n      0x24\n        /* \"#utility.yul\":1580:1581   */\n      0x00\n        /* \"#utility.yul\":1573:1588   */\n      revert\n        /* \"#utility.yul\":1599:1727   */\n    tag_47:\n        /* \"#utility.yul\":1666:1675   */\n      dup2\n      dup2\n      sub\n        /* \"#utility.yul\":1687:1698   */\n      dup2\n      dup2\n      gt\n        /* \"#utility.yul\":1684:1721   */\n      iszero\n      tag_154\n      jumpi\n        /* \"#utility.yul\":1701:1719   */\n      tag_154\n      tag_138\n      jump\t// in\n    tag_154:\n        /* \"#utility.yul\":1599:1727   */\n      swap3\n      swap2\n      pop\n      pop\n      jump\t// out\n        /* \"#utility.yul\":1732:1859   */\n    tag_56:\n        /* \"#utility.yul\":1793:1803   */\n      0x4e487b71\n        /* \"#utility.yul\":1788:1791   */\n      0xe0\n        /* \"#utility.yul\":1784:1804   */\n      shl\n        /* \"#utility.yul\":1781:1782   */\n      0x00\n        /* \"#utility.yul\":1774:1805   */\n      mstore\n        /* \"#utility.yul\":1824:1828   */\n      0x31\n        /* \"#utility.yul\":1821:1822   */\n      0x04\n        /* \"#utility.yul\":1814:1829   */\n      mstore\n        /* \"#utility.yul\":1848:1852   */\n      0x24\n        /* \"#utility.yul\":1845:1846   */\n      0x00\n        /* \"#utility.yul\":1838:1853   */\n      revert\n        /* \"#utility.yul\":1864:1999   */\n    tag_59:\n        /* \"#utility.yul\":1903:1906   */\n      0x00\n        /* \"#utility.yul\":1924:1941   */\n      0x01\n      dup3\n      add\n        /* \"#utility.yul\":1921:1964   */\n      tag_158\n      jumpi\n        /* \"#utility.yul\":1944:1962   */\n      tag_158\n      tag_138\n      jump\t// in\n    tag_158:\n      pop\n        /* \"#utility.yul\":1991:1992   */\n      0x01\n        /* \"#utility.yul\":1980:1993   */\n      add\n      swap1\n        /* \"#utility.yul\":1864:1999   */\n      jump\t// out\n\n    auxdata: 0xa2646970667358221220d6a1e8eece6b967362d42c4fc65193d0604d09e20eba3c0013ab16acdba8d31b64736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b50610785806100206000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c7b225511161005b578063c7b22551146100de578063df09d604146100f1578063e1c7392a14610106578063f2fde38b1461010e57600080fd5b80630829784614610082578063715018a6146100975780638da5cb5b1461009f575b600080fd5b61009561009036600461064e565b610121565b005b610095610214565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b0390911681526020015b60405180910390f35b6100956100ec36600461064e565b610228565b6100f961037b565b6040516100d59190610667565b6100956103d3565b61009561011c3660046106ab565b6104e2565b610129610520565b60008054905b8181101561020f57826000828154811061014b5761014b6106db565b9060005260206000200154036101fd576000610168600184610707565b81548110610178576101786106db565b906000526020600020015460008281548110610196576101966106db565b906000526020600020018190555060008054806101b5576101b5610720565b60019003818190600052602060002001600090559055827f0b1381093c776453c1bbe54fd68be1b235c65db61d099cb50d194b2991e0eec560405160405180910390a2505050565b8061020781610736565b91505061012f565b505050565b61021c610520565b610226600061057b565b565b610230610520565b600054600f81106102935760405162461bcd60e51b815260206004820152602260248201527f63616e6e6f742072657175697265206d6f7265207468616e20313520746f7069604482015261637360f01b60648201526084015b60405180910390fd5b60005b8181101561031c5782600082815481106102b2576102b26106db565b90600052602060002001540361030a5760405162461bcd60e51b815260206004820152601960248201527f636c61696d546f70696320616c72656164792065786973747300000000000000604482015260640161028a565b8061031481610736565b915050610296565b50600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630183905560405183917f01c928b7f7ade2949e92366aa9454dbef3a416b731cf6ec786ba9595bbd814d691a25050565b606060008054806020026020016040519081016040528092919081815260200182805480156103c957602002820191906000526020600020905b8154815260200190600101908083116103b5575b5050505050905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156104195750825b905060008267ffffffffffffffff1660011480156104365750303b155b905081158015610444575080155b156104625760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561048c57845460ff60401b1916600160401b1785555b610495336105ec565b83156104db57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b6104ea610520565b6001600160a01b03811661051457604051631e4fbdf760e01b81526000600482015260240161028a565b61051d8161057b565b50565b336105527f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146102265760405163118cdaa760e01b815233600482015260240161028a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6105f46105fd565b61051d81610646565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661022657604051631afcd79f60e31b815260040160405180910390fd5b6104ea6105fd565b60006020828403121561066057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561069f57835183529284019291840191600101610683565b50909695505050505050565b6000602082840312156106bd57600080fd5b81356001600160a01b03811681146106d457600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561071a5761071a6106f1565b92915050565b634e487b7160e01b600052603160045260246000fd5b600060018201610748576107486106f1565b506001019056fea2646970667358221220d6a1e8eece6b967362d42c4fc65193d0604d09e20eba3c0013ab16acdba8d31b64736f6c63430008110033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x785 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC7B22551 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC7B22551 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0xDF09D604 EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0xE1C7392A EQ PUSH2 0x106 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8297846 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x9F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x64E JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x95 PUSH2 0x214 JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x64E JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST PUSH2 0xF9 PUSH2 0x37B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x667 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x3D3 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x6AB JUMP JUMPDEST PUSH2 0x4E2 JUMP JUMPDEST PUSH2 0x129 PUSH2 0x520 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x20F JUMPI DUP3 PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x14B JUMPI PUSH2 0x14B PUSH2 0x6DB JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SUB PUSH2 0x1FD JUMPI PUSH1 0x0 PUSH2 0x168 PUSH1 0x1 DUP5 PUSH2 0x707 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x178 JUMPI PUSH2 0x178 PUSH2 0x6DB JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x196 JUMPI PUSH2 0x196 PUSH2 0x6DB JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD DUP1 PUSH2 0x1B5 JUMPI PUSH2 0x1B5 PUSH2 0x720 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP3 PUSH32 0xB1381093C776453C1BBE54FD68BE1B235C65DB61D099CB50D194B2991E0EEC5 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x207 DUP2 PUSH2 0x736 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x21C PUSH2 0x520 JUMP JUMPDEST PUSH2 0x226 PUSH1 0x0 PUSH2 0x57B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x230 PUSH2 0x520 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xF DUP2 LT PUSH2 0x293 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742072657175697265206D6F7265207468616E20313520746F7069 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x31C JUMPI DUP3 PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2B2 JUMPI PUSH2 0x2B2 PUSH2 0x6DB JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SUB PUSH2 0x30A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636C61696D546F70696320616C72656164792065786973747300000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x28A JUMP JUMPDEST DUP1 PUSH2 0x314 DUP2 PUSH2 0x736 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x296 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE DUP2 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 ADD DUP4 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP4 SWAP2 PUSH32 0x1C928B7F7ADE2949E92366AA9454DBEF3A416B731CF6EC786BA9595BBD814D6 SWAP2 LOG2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3C9 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x3B5 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x419 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x436 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x444 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x462 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x48C JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x495 CALLER PUSH2 0x5EC JUMP JUMPDEST DUP4 ISZERO PUSH2 0x4DB JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4EA PUSH2 0x520 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x514 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x28A JUMP JUMPDEST PUSH2 0x51D DUP2 PUSH2 0x57B JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH2 0x552 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x226 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x28A JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x5F4 PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x51D DUP2 PUSH2 0x646 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x226 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x660 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x69F JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x683 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x71A JUMPI PUSH2 0x71A PUSH2 0x6F1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x748 JUMPI PUSH2 0x748 PUSH2 0x6F1 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 LOG1 0xE8 0xEE 0xCE PUSH12 0x967362D42C4FC65193D0604D MULMOD 0xE2 0xE 0xBA EXTCODECOPY STOP SGT 0xAB AND 0xAC 0xDB 0xA8 0xD3 SHL PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "4003:1357:3:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {
								"@__Ownable_init_49": {
									"entryPoint": 1516,
									"id": 49,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@__Ownable_init_unchained_76": {
									"entryPoint": 1606,
									"id": 76,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@_checkInitializing_364": {
									"entryPoint": 1533,
									"id": 364,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_checkOwner_117": {
									"entryPoint": 1312,
									"id": 117,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@_getInitializableStorage_441": {
									"entryPoint": null,
									"id": 441,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_getOwnableStorage_20": {
									"entryPoint": null,
									"id": 20,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_isInitializing_432": {
									"entryPoint": null,
									"id": 432,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_msgSender_470": {
									"entryPoint": null,
									"id": 470,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@_transferOwnership_188": {
									"entryPoint": 1403,
									"id": 188,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@addClaimTopic_563": {
									"entryPoint": 552,
									"id": 563,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@getClaimTopics_628": {
									"entryPoint": 891,
									"id": 628,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@init_510": {
									"entryPoint": 979,
									"id": 510,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@owner_100": {
									"entryPoint": null,
									"id": 100,
									"parameterSlots": 0,
									"returnSlots": 1
								},
								"@removeClaimTopic_617": {
									"entryPoint": 289,
									"id": 617,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"@renounceOwnership_131": {
									"entryPoint": 532,
									"id": 131,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"@transferOwnership_159": {
									"entryPoint": 1250,
									"id": 159,
									"parameterSlots": 1,
									"returnSlots": 0
								},
								"abi_decode_tuple_t_address": {
									"entryPoint": 1707,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_decode_tuple_t_uint256": {
									"entryPoint": 1614,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_address__to_t_address__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed": {
									"entryPoint": 1639,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_970f7c3b9fa3869fb7d4b0e156059d6adbba348c21521bbe3230639fa95756e7__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"abi_encode_tuple_t_stringliteral_c95b5d98a83b544adacac7504a883dc2e549c923cf29f977b923b0b0c6471737__to_t_string_memory_ptr__fromStack_reversed": {
									"entryPoint": null,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"checked_sub_t_uint256": {
									"entryPoint": 1799,
									"id": null,
									"parameterSlots": 2,
									"returnSlots": 1
								},
								"increment_t_uint256": {
									"entryPoint": 1846,
									"id": null,
									"parameterSlots": 1,
									"returnSlots": 1
								},
								"panic_error_0x11": {
									"entryPoint": 1777,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x31": {
									"entryPoint": 1824,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								},
								"panic_error_0x32": {
									"entryPoint": 1755,
									"id": null,
									"parameterSlots": 0,
									"returnSlots": 0
								}
							},
							"generatedSources": [
								{
									"ast": {
										"nodeType": "YulBlock",
										"src": "0:2972:6",
										"statements": [
											{
												"nodeType": "YulBlock",
												"src": "6:3:6",
												"statements": []
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "84:110:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "130:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "139:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "142:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "132:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "132:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "132:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "105:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "114:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "101:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "101:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "126:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "97:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "97:32:6"
															},
															"nodeType": "YulIf",
															"src": "94:52:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "155:33:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "178:9:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "165:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "165:23:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "155:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "50:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "61:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "73:6:6",
														"type": ""
													}
												],
												"src": "14:180:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "300:102:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "310:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "322:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "333:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "318:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "318:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "310:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "352:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "367:6:6"
																			},
																			{
																				"arguments": [
																					{
																						"arguments": [
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "383:3:6",
																								"type": "",
																								"value": "160"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "388:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "shl",
																							"nodeType": "YulIdentifier",
																							"src": "379:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "379:11:6"
																					},
																					{
																						"kind": "number",
																						"nodeType": "YulLiteral",
																						"src": "392:1:6",
																						"type": "",
																						"value": "1"
																					}
																				],
																				"functionName": {
																					"name": "sub",
																					"nodeType": "YulIdentifier",
																					"src": "375:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "375:19:6"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "363:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "363:32:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "345:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "345:51:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "345:51:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_address__to_t_address__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "269:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "280:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "291:4:6",
														"type": ""
													}
												],
												"src": "199:203:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "558:481:6",
													"statements": [
														{
															"nodeType": "YulVariableDeclaration",
															"src": "568:12:6",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "578:2:6",
																"type": "",
																"value": "32"
															},
															"variables": [
																{
																	"name": "_1",
																	"nodeType": "YulTypedName",
																	"src": "572:2:6",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "589:32:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "607:9:6"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "618:2:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "603:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "603:18:6"
															},
															"variables": [
																{
																	"name": "tail_1",
																	"nodeType": "YulTypedName",
																	"src": "593:6:6",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "637:9:6"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "648:2:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "630:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "630:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "630:21:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "660:17:6",
															"value": {
																"name": "tail_1",
																"nodeType": "YulIdentifier",
																"src": "671:6:6"
															},
															"variables": [
																{
																	"name": "pos",
																	"nodeType": "YulTypedName",
																	"src": "664:3:6",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "686:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "706:6:6"
																	}
																],
																"functionName": {
																	"name": "mload",
																	"nodeType": "YulIdentifier",
																	"src": "700:5:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "700:13:6"
															},
															"variables": [
																{
																	"name": "length",
																	"nodeType": "YulTypedName",
																	"src": "690:6:6",
																	"type": ""
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "tail_1",
																		"nodeType": "YulIdentifier",
																		"src": "729:6:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "737:6:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "722:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "722:22:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "722:22:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "753:25:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "764:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "775:2:6",
																		"type": "",
																		"value": "64"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "760:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "760:18:6"
															},
															"variableNames": [
																{
																	"name": "pos",
																	"nodeType": "YulIdentifier",
																	"src": "753:3:6"
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "787:29:6",
															"value": {
																"arguments": [
																	{
																		"name": "value0",
																		"nodeType": "YulIdentifier",
																		"src": "805:6:6"
																	},
																	{
																		"name": "_1",
																		"nodeType": "YulIdentifier",
																		"src": "813:2:6"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "801:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "801:15:6"
															},
															"variables": [
																{
																	"name": "srcPtr",
																	"nodeType": "YulTypedName",
																	"src": "791:6:6",
																	"type": ""
																}
															]
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "825:10:6",
															"value": {
																"kind": "number",
																"nodeType": "YulLiteral",
																"src": "834:1:6",
																"type": "",
																"value": "0"
															},
															"variables": [
																{
																	"name": "i",
																	"nodeType": "YulTypedName",
																	"src": "829:1:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "893:120:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "914:3:6"
																				},
																				{
																					"arguments": [
																						{
																							"name": "srcPtr",
																							"nodeType": "YulIdentifier",
																							"src": "925:6:6"
																						}
																					],
																					"functionName": {
																						"name": "mload",
																						"nodeType": "YulIdentifier",
																						"src": "919:5:6"
																					},
																					"nodeType": "YulFunctionCall",
																					"src": "919:13:6"
																				}
																			],
																			"functionName": {
																				"name": "mstore",
																				"nodeType": "YulIdentifier",
																				"src": "907:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "907:26:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "907:26:6"
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "946:19:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "pos",
																					"nodeType": "YulIdentifier",
																					"src": "957:3:6"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "962:2:6"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "953:3:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "953:12:6"
																		},
																		"variableNames": [
																			{
																				"name": "pos",
																				"nodeType": "YulIdentifier",
																				"src": "946:3:6"
																			}
																		]
																	},
																	{
																		"nodeType": "YulAssignment",
																		"src": "978:25:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "srcPtr",
																					"nodeType": "YulIdentifier",
																					"src": "992:6:6"
																				},
																				{
																					"name": "_1",
																					"nodeType": "YulIdentifier",
																					"src": "1000:2:6"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "988:3:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "988:15:6"
																		},
																		"variableNames": [
																			{
																				"name": "srcPtr",
																				"nodeType": "YulIdentifier",
																				"src": "978:6:6"
																			}
																		]
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "i",
																		"nodeType": "YulIdentifier",
																		"src": "855:1:6"
																	},
																	{
																		"name": "length",
																		"nodeType": "YulIdentifier",
																		"src": "858:6:6"
																	}
																],
																"functionName": {
																	"name": "lt",
																	"nodeType": "YulIdentifier",
																	"src": "852:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "852:13:6"
															},
															"nodeType": "YulForLoop",
															"post": {
																"nodeType": "YulBlock",
																"src": "866:18:6",
																"statements": [
																	{
																		"nodeType": "YulAssignment",
																		"src": "868:14:6",
																		"value": {
																			"arguments": [
																				{
																					"name": "i",
																					"nodeType": "YulIdentifier",
																					"src": "877:1:6"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "880:1:6",
																					"type": "",
																					"value": "1"
																				}
																			],
																			"functionName": {
																				"name": "add",
																				"nodeType": "YulIdentifier",
																				"src": "873:3:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "873:9:6"
																		},
																		"variableNames": [
																			{
																				"name": "i",
																				"nodeType": "YulIdentifier",
																				"src": "868:1:6"
																			}
																		]
																	}
																]
															},
															"pre": {
																"nodeType": "YulBlock",
																"src": "848:3:6",
																"statements": []
															},
															"src": "844:169:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1022:11:6",
															"value": {
																"name": "pos",
																"nodeType": "YulIdentifier",
																"src": "1030:3:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "1022:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "527:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "538:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "549:4:6",
														"type": ""
													}
												],
												"src": "407:632:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1114:216:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1160:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1169:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1172:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1162:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1162:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1162:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "dataEnd",
																				"nodeType": "YulIdentifier",
																				"src": "1135:7:6"
																			},
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "1144:9:6"
																			}
																		],
																		"functionName": {
																			"name": "sub",
																			"nodeType": "YulIdentifier",
																			"src": "1131:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1131:23:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1156:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "slt",
																	"nodeType": "YulIdentifier",
																	"src": "1127:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1127:32:6"
															},
															"nodeType": "YulIf",
															"src": "1124:52:6"
														},
														{
															"nodeType": "YulVariableDeclaration",
															"src": "1185:36:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "1211:9:6"
																	}
																],
																"functionName": {
																	"name": "calldataload",
																	"nodeType": "YulIdentifier",
																	"src": "1198:12:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1198:23:6"
															},
															"variables": [
																{
																	"name": "value",
																	"nodeType": "YulTypedName",
																	"src": "1189:5:6",
																	"type": ""
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1284:16:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1293:1:6",
																					"type": "",
																					"value": "0"
																				},
																				{
																					"kind": "number",
																					"nodeType": "YulLiteral",
																					"src": "1296:1:6",
																					"type": "",
																					"value": "0"
																				}
																			],
																			"functionName": {
																				"name": "revert",
																				"nodeType": "YulIdentifier",
																				"src": "1286:6:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1286:12:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1286:12:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "value",
																				"nodeType": "YulIdentifier",
																				"src": "1243:5:6"
																			},
																			{
																				"arguments": [
																					{
																						"name": "value",
																						"nodeType": "YulIdentifier",
																						"src": "1254:5:6"
																					},
																					{
																						"arguments": [
																							{
																								"arguments": [
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1269:3:6",
																										"type": "",
																										"value": "160"
																									},
																									{
																										"kind": "number",
																										"nodeType": "YulLiteral",
																										"src": "1274:1:6",
																										"type": "",
																										"value": "1"
																									}
																								],
																								"functionName": {
																									"name": "shl",
																									"nodeType": "YulIdentifier",
																									"src": "1265:3:6"
																								},
																								"nodeType": "YulFunctionCall",
																								"src": "1265:11:6"
																							},
																							{
																								"kind": "number",
																								"nodeType": "YulLiteral",
																								"src": "1278:1:6",
																								"type": "",
																								"value": "1"
																							}
																						],
																						"functionName": {
																							"name": "sub",
																							"nodeType": "YulIdentifier",
																							"src": "1261:3:6"
																						},
																						"nodeType": "YulFunctionCall",
																						"src": "1261:19:6"
																					}
																				],
																				"functionName": {
																					"name": "and",
																					"nodeType": "YulIdentifier",
																					"src": "1250:3:6"
																				},
																				"nodeType": "YulFunctionCall",
																				"src": "1250:31:6"
																			}
																		],
																		"functionName": {
																			"name": "eq",
																			"nodeType": "YulIdentifier",
																			"src": "1240:2:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1240:42:6"
																	}
																],
																"functionName": {
																	"name": "iszero",
																	"nodeType": "YulIdentifier",
																	"src": "1233:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1233:50:6"
															},
															"nodeType": "YulIf",
															"src": "1230:70:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1309:15:6",
															"value": {
																"name": "value",
																"nodeType": "YulIdentifier",
																"src": "1319:5:6"
															},
															"variableNames": [
																{
																	"name": "value0",
																	"nodeType": "YulIdentifier",
																	"src": "1309:6:6"
																}
															]
														}
													]
												},
												"name": "abi_decode_tuple_t_address",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "1080:9:6",
														"type": ""
													},
													{
														"name": "dataEnd",
														"nodeType": "YulTypedName",
														"src": "1091:7:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "1103:6:6",
														"type": ""
													}
												],
												"src": "1044:286:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1367:95:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1384:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1391:3:6",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1396:10:6",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1387:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1387:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1377:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1377:31:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1377:31:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1424:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1427:4:6",
																		"type": "",
																		"value": "0x32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1417:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1417:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1417:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1448:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1451:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1441:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1441:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1441:15:6"
														}
													]
												},
												"name": "panic_error_0x32",
												"nodeType": "YulFunctionDefinition",
												"src": "1335:127:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1499:95:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1516:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1523:3:6",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1528:10:6",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1519:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1519:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1509:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1509:31:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1509:31:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1556:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1559:4:6",
																		"type": "",
																		"value": "0x11"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1549:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1549:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1549:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1580:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1583:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1573:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1573:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1573:15:6"
														}
													]
												},
												"name": "panic_error_0x11",
												"nodeType": "YulFunctionDefinition",
												"src": "1467:127:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1648:79:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1658:17:6",
															"value": {
																"arguments": [
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1670:1:6"
																	},
																	{
																		"name": "y",
																		"nodeType": "YulIdentifier",
																		"src": "1673:1:6"
																	}
																],
																"functionName": {
																	"name": "sub",
																	"nodeType": "YulIdentifier",
																	"src": "1666:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1666:9:6"
															},
															"variableNames": [
																{
																	"name": "diff",
																	"nodeType": "YulIdentifier",
																	"src": "1658:4:6"
																}
															]
														},
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1699:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "1701:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1701:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1701:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "diff",
																		"nodeType": "YulIdentifier",
																		"src": "1690:4:6"
																	},
																	{
																		"name": "x",
																		"nodeType": "YulIdentifier",
																		"src": "1696:1:6"
																	}
																],
																"functionName": {
																	"name": "gt",
																	"nodeType": "YulIdentifier",
																	"src": "1687:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1687:11:6"
															},
															"nodeType": "YulIf",
															"src": "1684:37:6"
														}
													]
												},
												"name": "checked_sub_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "x",
														"nodeType": "YulTypedName",
														"src": "1630:1:6",
														"type": ""
													},
													{
														"name": "y",
														"nodeType": "YulTypedName",
														"src": "1633:1:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "diff",
														"nodeType": "YulTypedName",
														"src": "1639:4:6",
														"type": ""
													}
												],
												"src": "1599:128:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1764:95:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1781:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1788:3:6",
																				"type": "",
																				"value": "224"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1793:10:6",
																				"type": "",
																				"value": "0x4e487b71"
																			}
																		],
																		"functionName": {
																			"name": "shl",
																			"nodeType": "YulIdentifier",
																			"src": "1784:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1784:20:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1774:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1774:31:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1774:31:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1821:1:6",
																		"type": "",
																		"value": "4"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1824:4:6",
																		"type": "",
																		"value": "0x31"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "1814:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1814:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1814:15:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1845:1:6",
																		"type": "",
																		"value": "0"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1848:4:6",
																		"type": "",
																		"value": "0x24"
																	}
																],
																"functionName": {
																	"name": "revert",
																	"nodeType": "YulIdentifier",
																	"src": "1838:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1838:15:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "1838:15:6"
														}
													]
												},
												"name": "panic_error_0x31",
												"nodeType": "YulFunctionDefinition",
												"src": "1732:127:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "1911:88:6",
													"statements": [
														{
															"body": {
																"nodeType": "YulBlock",
																"src": "1942:22:6",
																"statements": [
																	{
																		"expression": {
																			"arguments": [],
																			"functionName": {
																				"name": "panic_error_0x11",
																				"nodeType": "YulIdentifier",
																				"src": "1944:16:6"
																			},
																			"nodeType": "YulFunctionCall",
																			"src": "1944:18:6"
																		},
																		"nodeType": "YulExpressionStatement",
																		"src": "1944:18:6"
																	}
																]
															},
															"condition": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1927:5:6"
																	},
																	{
																		"arguments": [
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "1938:1:6",
																				"type": "",
																				"value": "0"
																			}
																		],
																		"functionName": {
																			"name": "not",
																			"nodeType": "YulIdentifier",
																			"src": "1934:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "1934:6:6"
																	}
																],
																"functionName": {
																	"name": "eq",
																	"nodeType": "YulIdentifier",
																	"src": "1924:2:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1924:17:6"
															},
															"nodeType": "YulIf",
															"src": "1921:43:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "1973:20:6",
															"value": {
																"arguments": [
																	{
																		"name": "value",
																		"nodeType": "YulIdentifier",
																		"src": "1984:5:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "1991:1:6",
																		"type": "",
																		"value": "1"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "1980:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "1980:13:6"
															},
															"variableNames": [
																{
																	"name": "ret",
																	"nodeType": "YulIdentifier",
																	"src": "1973:3:6"
																}
															]
														}
													]
												},
												"name": "increment_t_uint256",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "value",
														"nodeType": "YulTypedName",
														"src": "1893:5:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "ret",
														"nodeType": "YulTypedName",
														"src": "1903:3:6",
														"type": ""
													}
												],
												"src": "1864:135:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2178:224:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2195:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2206:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2188:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2188:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2188:21:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2229:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2240:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2225:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2225:18:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2245:2:6",
																		"type": "",
																		"value": "34"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2218:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2218:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2218:30:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2268:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2279:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2264:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2264:18:6"
																	},
																	{
																		"hexValue": "63616e6e6f742072657175697265206d6f7265207468616e20313520746f7069",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2284:34:6",
																		"type": "",
																		"value": "cannot require more than 15 topi"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2257:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2257:62:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2257:62:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2339:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2350:2:6",
																				"type": "",
																				"value": "96"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2335:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2335:18:6"
																	},
																	{
																		"hexValue": "6373",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2355:4:6",
																		"type": "",
																		"value": "cs"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2328:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2328:32:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2328:32:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2369:27:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2381:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2392:3:6",
																		"type": "",
																		"value": "128"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2377:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2377:19:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2369:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_c95b5d98a83b544adacac7504a883dc2e549c923cf29f977b923b0b0c6471737__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2155:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2169:4:6",
														"type": ""
													}
												],
												"src": "2004:398:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2581:175:6",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2598:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2609:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2591:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2591:21:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2591:21:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2632:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2643:2:6",
																				"type": "",
																				"value": "32"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2628:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2628:18:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2648:2:6",
																		"type": "",
																		"value": "25"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2621:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2621:30:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2621:30:6"
														},
														{
															"expression": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"name": "headStart",
																				"nodeType": "YulIdentifier",
																				"src": "2671:9:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2682:2:6",
																				"type": "",
																				"value": "64"
																			}
																		],
																		"functionName": {
																			"name": "add",
																			"nodeType": "YulIdentifier",
																			"src": "2667:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2667:18:6"
																	},
																	{
																		"hexValue": "636c61696d546f70696320616c726561647920657869737473",
																		"kind": "string",
																		"nodeType": "YulLiteral",
																		"src": "2687:27:6",
																		"type": "",
																		"value": "claimTopic already exists"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2660:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2660:55:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2660:55:6"
														},
														{
															"nodeType": "YulAssignment",
															"src": "2724:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2736:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2747:2:6",
																		"type": "",
																		"value": "96"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2732:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2732:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2724:4:6"
																}
															]
														}
													]
												},
												"name": "abi_encode_tuple_t_stringliteral_970f7c3b9fa3869fb7d4b0e156059d6adbba348c21521bbe3230639fa95756e7__to_t_string_memory_ptr__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2558:9:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2572:4:6",
														"type": ""
													}
												],
												"src": "2407:349:6"
											},
											{
												"body": {
													"nodeType": "YulBlock",
													"src": "2869:101:6",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "2879:26:6",
															"value": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2891:9:6"
																	},
																	{
																		"kind": "number",
																		"nodeType": "YulLiteral",
																		"src": "2902:2:6",
																		"type": "",
																		"value": "32"
																	}
																],
																"functionName": {
																	"name": "add",
																	"nodeType": "YulIdentifier",
																	"src": "2887:3:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2887:18:6"
															},
															"variableNames": [
																{
																	"name": "tail",
																	"nodeType": "YulIdentifier",
																	"src": "2879:4:6"
																}
															]
														},
														{
															"expression": {
																"arguments": [
																	{
																		"name": "headStart",
																		"nodeType": "YulIdentifier",
																		"src": "2921:9:6"
																	},
																	{
																		"arguments": [
																			{
																				"name": "value0",
																				"nodeType": "YulIdentifier",
																				"src": "2936:6:6"
																			},
																			{
																				"kind": "number",
																				"nodeType": "YulLiteral",
																				"src": "2944:18:6",
																				"type": "",
																				"value": "0xffffffffffffffff"
																			}
																		],
																		"functionName": {
																			"name": "and",
																			"nodeType": "YulIdentifier",
																			"src": "2932:3:6"
																		},
																		"nodeType": "YulFunctionCall",
																		"src": "2932:31:6"
																	}
																],
																"functionName": {
																	"name": "mstore",
																	"nodeType": "YulIdentifier",
																	"src": "2914:6:6"
																},
																"nodeType": "YulFunctionCall",
																"src": "2914:50:6"
															},
															"nodeType": "YulExpressionStatement",
															"src": "2914:50:6"
														}
													]
												},
												"name": "abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed",
												"nodeType": "YulFunctionDefinition",
												"parameters": [
													{
														"name": "headStart",
														"nodeType": "YulTypedName",
														"src": "2838:9:6",
														"type": ""
													},
													{
														"name": "value0",
														"nodeType": "YulTypedName",
														"src": "2849:6:6",
														"type": ""
													}
												],
												"returnVariables": [
													{
														"name": "tail",
														"nodeType": "YulTypedName",
														"src": "2860:4:6",
														"type": ""
													}
												],
												"src": "2761:209:6"
											}
										]
									},
									"contents": "{\n    { }\n    function abi_decode_tuple_t_uint256(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        value0 := calldataload(headStart)\n    }\n    function abi_encode_tuple_t_address__to_t_address__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, sub(shl(160, 1), 1)))\n    }\n    function abi_encode_tuple_t_array$_t_uint256_$dyn_memory_ptr__to_t_array$_t_uint256_$dyn_memory_ptr__fromStack_reversed(headStart, value0) -> tail\n    {\n        let _1 := 32\n        let tail_1 := add(headStart, _1)\n        mstore(headStart, _1)\n        let pos := tail_1\n        let length := mload(value0)\n        mstore(tail_1, length)\n        pos := add(headStart, 64)\n        let srcPtr := add(value0, _1)\n        let i := 0\n        for { } lt(i, length) { i := add(i, 1) }\n        {\n            mstore(pos, mload(srcPtr))\n            pos := add(pos, _1)\n            srcPtr := add(srcPtr, _1)\n        }\n        tail := pos\n    }\n    function abi_decode_tuple_t_address(headStart, dataEnd) -> value0\n    {\n        if slt(sub(dataEnd, headStart), 32) { revert(0, 0) }\n        let value := calldataload(headStart)\n        if iszero(eq(value, and(value, sub(shl(160, 1), 1)))) { revert(0, 0) }\n        value0 := value\n    }\n    function panic_error_0x32()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x32)\n        revert(0, 0x24)\n    }\n    function panic_error_0x11()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x11)\n        revert(0, 0x24)\n    }\n    function checked_sub_t_uint256(x, y) -> diff\n    {\n        diff := sub(x, y)\n        if gt(diff, x) { panic_error_0x11() }\n    }\n    function panic_error_0x31()\n    {\n        mstore(0, shl(224, 0x4e487b71))\n        mstore(4, 0x31)\n        revert(0, 0x24)\n    }\n    function increment_t_uint256(value) -> ret\n    {\n        if eq(value, not(0)) { panic_error_0x11() }\n        ret := add(value, 1)\n    }\n    function abi_encode_tuple_t_stringliteral_c95b5d98a83b544adacac7504a883dc2e549c923cf29f977b923b0b0c6471737__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 34)\n        mstore(add(headStart, 64), \"cannot require more than 15 topi\")\n        mstore(add(headStart, 96), \"cs\")\n        tail := add(headStart, 128)\n    }\n    function abi_encode_tuple_t_stringliteral_970f7c3b9fa3869fb7d4b0e156059d6adbba348c21521bbe3230639fa95756e7__to_t_string_memory_ptr__fromStack_reversed(headStart) -> tail\n    {\n        mstore(headStart, 32)\n        mstore(add(headStart, 32), 25)\n        mstore(add(headStart, 64), \"claimTopic already exists\")\n        tail := add(headStart, 96)\n    }\n    function abi_encode_tuple_t_rational_1_by_1__to_t_uint64__fromStack_reversed(headStart, value0) -> tail\n    {\n        tail := add(headStart, 32)\n        mstore(headStart, and(value0, 0xffffffffffffffff))\n    }\n}",
									"id": 6,
									"language": "Yul",
									"name": "#utility.yul"
								}
							],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "608060405234801561001057600080fd5b506004361061007d5760003560e01c8063c7b225511161005b578063c7b22551146100de578063df09d604146100f1578063e1c7392a14610106578063f2fde38b1461010e57600080fd5b80630829784614610082578063715018a6146100975780638da5cb5b1461009f575b600080fd5b61009561009036600461064e565b610121565b005b610095610214565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546040516001600160a01b0390911681526020015b60405180910390f35b6100956100ec36600461064e565b610228565b6100f961037b565b6040516100d59190610667565b6100956103d3565b61009561011c3660046106ab565b6104e2565b610129610520565b60008054905b8181101561020f57826000828154811061014b5761014b6106db565b9060005260206000200154036101fd576000610168600184610707565b81548110610178576101786106db565b906000526020600020015460008281548110610196576101966106db565b906000526020600020018190555060008054806101b5576101b5610720565b60019003818190600052602060002001600090559055827f0b1381093c776453c1bbe54fd68be1b235c65db61d099cb50d194b2991e0eec560405160405180910390a2505050565b8061020781610736565b91505061012f565b505050565b61021c610520565b610226600061057b565b565b610230610520565b600054600f81106102935760405162461bcd60e51b815260206004820152602260248201527f63616e6e6f742072657175697265206d6f7265207468616e20313520746f7069604482015261637360f01b60648201526084015b60405180910390fd5b60005b8181101561031c5782600082815481106102b2576102b26106db565b90600052602060002001540361030a5760405162461bcd60e51b815260206004820152601960248201527f636c61696d546f70696320616c72656164792065786973747300000000000000604482015260640161028a565b8061031481610736565b915050610296565b50600080546001810182558180527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5630183905560405183917f01c928b7f7ade2949e92366aa9454dbef3a416b731cf6ec786ba9595bbd814d691a25050565b606060008054806020026020016040519081016040528092919081815260200182805480156103c957602002820191906000526020600020905b8154815260200190600101908083116103b5575b5050505050905090565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a008054600160401b810460ff16159067ffffffffffffffff166000811580156104195750825b905060008267ffffffffffffffff1660011480156104365750303b155b905081158015610444575080155b156104625760405163f92ee8a960e01b815260040160405180910390fd5b845467ffffffffffffffff19166001178555831561048c57845460ff60401b1916600160401b1785555b610495336105ec565b83156104db57845460ff60401b19168555604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d29060200160405180910390a15b5050505050565b6104ea610520565b6001600160a01b03811661051457604051631e4fbdf760e01b81526000600482015260240161028a565b61051d8161057b565b50565b336105527f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300546001600160a01b031690565b6001600160a01b0316146102265760405163118cdaa760e01b815233600482015260240161028a565b7f9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930080546001600160a01b031981166001600160a01b03848116918217845560405192169182907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a3505050565b6105f46105fd565b61051d81610646565b7ff0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a0054600160401b900460ff1661022657604051631afcd79f60e31b815260040160405180910390fd5b6104ea6105fd565b60006020828403121561066057600080fd5b5035919050565b6020808252825182820181905260009190848201906040850190845b8181101561069f57835183529284019291840191600101610683565b50909695505050505050565b6000602082840312156106bd57600080fd5b81356001600160a01b03811681146106d457600080fd5b9392505050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b8181038181111561071a5761071a6106f1565b92915050565b634e487b7160e01b600052603160045260246000fd5b600060018201610748576107486106f1565b506001019056fea2646970667358221220d6a1e8eece6b967362d42c4fc65193d0604d09e20eba3c0013ab16acdba8d31b64736f6c63430008110033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 CALLDATASIZE LT PUSH2 0x7D JUMPI PUSH1 0x0 CALLDATALOAD PUSH1 0xE0 SHR DUP1 PUSH4 0xC7B22551 GT PUSH2 0x5B JUMPI DUP1 PUSH4 0xC7B22551 EQ PUSH2 0xDE JUMPI DUP1 PUSH4 0xDF09D604 EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0xE1C7392A EQ PUSH2 0x106 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x10E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH4 0x8297846 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x97 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x9F JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x95 PUSH2 0x90 CALLDATASIZE PUSH1 0x4 PUSH2 0x64E JUMP JUMPDEST PUSH2 0x121 JUMP JUMPDEST STOP JUMPDEST PUSH2 0x95 PUSH2 0x214 JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH2 0x95 PUSH2 0xEC CALLDATASIZE PUSH1 0x4 PUSH2 0x64E JUMP JUMPDEST PUSH2 0x228 JUMP JUMPDEST PUSH2 0xF9 PUSH2 0x37B JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0xD5 SWAP2 SWAP1 PUSH2 0x667 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x3D3 JUMP JUMPDEST PUSH2 0x95 PUSH2 0x11C CALLDATASIZE PUSH1 0x4 PUSH2 0x6AB JUMP JUMPDEST PUSH2 0x4E2 JUMP JUMPDEST PUSH2 0x129 PUSH2 0x520 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD SWAP1 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x20F JUMPI DUP3 PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x14B JUMPI PUSH2 0x14B PUSH2 0x6DB JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SUB PUSH2 0x1FD JUMPI PUSH1 0x0 PUSH2 0x168 PUSH1 0x1 DUP5 PUSH2 0x707 JUMP JUMPDEST DUP2 SLOAD DUP2 LT PUSH2 0x178 JUMPI PUSH2 0x178 PUSH2 0x6DB JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x196 JUMPI PUSH2 0x196 PUSH2 0x6DB JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD DUP2 SWAP1 SSTORE POP PUSH1 0x0 DUP1 SLOAD DUP1 PUSH2 0x1B5 JUMPI PUSH2 0x1B5 PUSH2 0x720 JUMP JUMPDEST PUSH1 0x1 SWAP1 SUB DUP2 DUP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD PUSH1 0x0 SWAP1 SSTORE SWAP1 SSTORE DUP3 PUSH32 0xB1381093C776453C1BBE54FD68BE1B235C65DB61D099CB50D194B2991E0EEC5 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP POP JUMP JUMPDEST DUP1 PUSH2 0x207 DUP2 PUSH2 0x736 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x12F JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH2 0x21C PUSH2 0x520 JUMP JUMPDEST PUSH2 0x226 PUSH1 0x0 PUSH2 0x57B JUMP JUMPDEST JUMP JUMPDEST PUSH2 0x230 PUSH2 0x520 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xF DUP2 LT PUSH2 0x293 JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x22 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x63616E6E6F742072657175697265206D6F7265207468616E20313520746F7069 PUSH1 0x44 DUP3 ADD MSTORE PUSH2 0x6373 PUSH1 0xF0 SHL PUSH1 0x64 DUP3 ADD MSTORE PUSH1 0x84 ADD JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x0 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x31C JUMPI DUP3 PUSH1 0x0 DUP3 DUP2 SLOAD DUP2 LT PUSH2 0x2B2 JUMPI PUSH2 0x2B2 PUSH2 0x6DB JUMP JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 ADD SLOAD SUB PUSH2 0x30A JUMPI PUSH1 0x40 MLOAD PUSH3 0x461BCD PUSH1 0xE5 SHL DUP2 MSTORE PUSH1 0x20 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x19 PUSH1 0x24 DUP3 ADD MSTORE PUSH32 0x636C61696D546F70696320616C72656164792065786973747300000000000000 PUSH1 0x44 DUP3 ADD MSTORE PUSH1 0x64 ADD PUSH2 0x28A JUMP JUMPDEST DUP1 PUSH2 0x314 DUP2 PUSH2 0x736 JUMP JUMPDEST SWAP2 POP POP PUSH2 0x296 JUMP JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 DUP2 ADD DUP3 SSTORE DUP2 DUP1 MSTORE PUSH32 0x290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563 ADD DUP4 SWAP1 SSTORE PUSH1 0x40 MLOAD DUP4 SWAP2 PUSH32 0x1C928B7F7ADE2949E92366AA9454DBEF3A416B731CF6EC786BA9595BBD814D6 SWAP2 LOG2 POP POP JUMP JUMPDEST PUSH1 0x60 PUSH1 0x0 DUP1 SLOAD DUP1 PUSH1 0x20 MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD DUP1 ISZERO PUSH2 0x3C9 JUMPI PUSH1 0x20 MUL DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP1 PUSH1 0x1 ADD SWAP1 DUP1 DUP4 GT PUSH2 0x3B5 JUMPI JUMPDEST POP POP POP POP POP SWAP1 POP SWAP1 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 DUP1 SLOAD PUSH1 0x1 PUSH1 0x40 SHL DUP2 DIV PUSH1 0xFF AND ISZERO SWAP1 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x0 DUP2 ISZERO DUP1 ISZERO PUSH2 0x419 JUMPI POP DUP3 JUMPDEST SWAP1 POP PUSH1 0x0 DUP3 PUSH8 0xFFFFFFFFFFFFFFFF AND PUSH1 0x1 EQ DUP1 ISZERO PUSH2 0x436 JUMPI POP ADDRESS EXTCODESIZE ISZERO JUMPDEST SWAP1 POP DUP2 ISZERO DUP1 ISZERO PUSH2 0x444 JUMPI POP DUP1 ISZERO JUMPDEST ISZERO PUSH2 0x462 JUMPI PUSH1 0x40 MLOAD PUSH4 0xF92EE8A9 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST DUP5 SLOAD PUSH8 0xFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 OR DUP6 SSTORE DUP4 ISZERO PUSH2 0x48C JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND PUSH1 0x1 PUSH1 0x40 SHL OR DUP6 SSTORE JUMPDEST PUSH2 0x495 CALLER PUSH2 0x5EC JUMP JUMPDEST DUP4 ISZERO PUSH2 0x4DB JUMPI DUP5 SLOAD PUSH1 0xFF PUSH1 0x40 SHL NOT AND DUP6 SSTORE PUSH1 0x40 MLOAD PUSH1 0x1 DUP2 MSTORE PUSH32 0xC7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2 SWAP1 PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH2 0x4EA PUSH2 0x520 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND PUSH2 0x514 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1E4FBDF7 PUSH1 0xE0 SHL DUP2 MSTORE PUSH1 0x0 PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x28A JUMP JUMPDEST PUSH2 0x51D DUP2 PUSH2 0x57B JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH2 0x552 PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB AND EQ PUSH2 0x226 JUMPI PUSH1 0x40 MLOAD PUSH4 0x118CDAA7 PUSH1 0xE0 SHL DUP2 MSTORE CALLER PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH2 0x28A JUMP JUMPDEST PUSH32 0x9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300 DUP1 SLOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB NOT DUP2 AND PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP5 DUP2 AND SWAP2 DUP3 OR DUP5 SSTORE PUSH1 0x40 MLOAD SWAP3 AND SWAP2 DUP3 SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 POP POP POP JUMP JUMPDEST PUSH2 0x5F4 PUSH2 0x5FD JUMP JUMPDEST PUSH2 0x51D DUP2 PUSH2 0x646 JUMP JUMPDEST PUSH32 0xF0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00 SLOAD PUSH1 0x1 PUSH1 0x40 SHL SWAP1 DIV PUSH1 0xFF AND PUSH2 0x226 JUMPI PUSH1 0x40 MLOAD PUSH4 0x1AFCD79F PUSH1 0xE3 SHL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH2 0x4EA PUSH2 0x5FD JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x660 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP CALLDATALOAD SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP3 MLOAD DUP3 DUP3 ADD DUP2 SWAP1 MSTORE PUSH1 0x0 SWAP2 SWAP1 DUP5 DUP3 ADD SWAP1 PUSH1 0x40 DUP6 ADD SWAP1 DUP5 JUMPDEST DUP2 DUP2 LT ISZERO PUSH2 0x69F JUMPI DUP4 MLOAD DUP4 MSTORE SWAP3 DUP5 ADD SWAP3 SWAP2 DUP5 ADD SWAP2 PUSH1 0x1 ADD PUSH2 0x683 JUMP JUMPDEST POP SWAP1 SWAP7 SWAP6 POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x6BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH1 0x1 PUSH1 0x1 PUSH1 0xA0 SHL SUB DUP2 AND DUP2 EQ PUSH2 0x6D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x32 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x11 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST DUP2 DUP2 SUB DUP2 DUP2 GT ISZERO PUSH2 0x71A JUMPI PUSH2 0x71A PUSH2 0x6F1 JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH4 0x4E487B71 PUSH1 0xE0 SHL PUSH1 0x0 MSTORE PUSH1 0x31 PUSH1 0x4 MSTORE PUSH1 0x24 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x0 PUSH1 0x1 DUP3 ADD PUSH2 0x748 JUMPI PUSH2 0x748 PUSH2 0x6F1 JUMP JUMPDEST POP PUSH1 0x1 ADD SWAP1 JUMP INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 0xD6 LOG1 0xE8 0xEE 0xCE PUSH12 0x967362D42C4FC65193D0604D MULMOD 0xE2 0xE 0xBA EXTCODECOPY STOP SGT 0xAB AND 0xAC 0xDB 0xA8 0xD3 SHL PUSH5 0x736F6C6343 STOP ADDMOD GT STOP CALLER ",
							"sourceMap": "4003:1357:3:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;4747:421;;;;;;:::i;:::-;;:::i;:::-;;3165:101:0;;;:::i;2451:144::-;1323:22;2580:8;2451:144;;-1:-1:-1;;;;;2580:8:0;;;345:51:6;;333:2;318:18;2451:144:0;;;;;;;;4252:415:3;;;;;;:::i;:::-;;:::i;5246:112::-;;;:::i;:::-;;;;;;;:::i;4095:80::-;;;:::i;3415:215:0:-;;;;;;:::i;:::-;;:::i;4747:421:3:-;2344:13:0;:11;:13::i;:::-;4832:14:3::1;4849:19:::0;;;4878:284:::1;4902:6;4898:1;:10;4878:284;;;4952:11;4933:12;4946:1;4933:15;;;;;;;;:::i;:::-;;;;;;;;;:30:::0;4929:223:::1;;5001:12;5014:10;5023:1;5014:6:::0;:10:::1;:::i;:::-;5001:24;;;;;;;;:::i;:::-;;;;;;;;;4983:12;4996:1;4983:15;;;;;;;;:::i;:::-;;;;;;;;:42;;;;5043:12;:18;;;;;;;:::i;:::-;;;;;;;;;;;;;;;;;;5102:11;5084:30;;;;;;;;;;4878:284;4822:346;4747:421:::0;:::o;4929:223::-:1;4910:3:::0;::::1;::::0;::::1;:::i;:::-;;;;4878:284;;;;4822:346;4747:421:::0;:::o;3165:101:0:-;2344:13;:11;:13::i;:::-;3229:30:::1;3256:1;3229:18;:30::i;:::-;3165:101::o:0;4252:415:3:-;2344:13:0;:11;:13::i;:::-;4334:14:3::1;4351:19:::0;4397:2:::1;4388:11:::0;::::1;4380:58;;;::::0;-1:-1:-1;;;4380:58:3;;2206:2:6;4380:58:3::1;::::0;::::1;2188:21:6::0;2245:2;2225:18;;;2218:30;2284:34;2264:18;;;2257:62;-1:-1:-1;;;2335:18:6;;;2328:32;2377:19;;4380:58:3::1;;;;;;;;;4453:9;4448:130;4472:6;4468:1;:10;4448:130;;;4526:11;4507:12;4520:1;4507:15;;;;;;;;:::i;:::-;;;;;;;;;:30:::0;4499:68:::1;;;::::0;-1:-1:-1;;;4499:68:3;;2609:2:6;4499:68:3::1;::::0;::::1;2591:21:6::0;2648:2;2628:18;;;2621:30;2687:27;2667:18;;;2660:55;2732:18;;4499:68:3::1;2407:349:6::0;4499:68:3::1;4480:3:::0;::::1;::::0;::::1;:::i;:::-;;;;4448:130;;;-1:-1:-1::0;4587:12:3::1;:30:::0;;::::1;::::0;::::1;::::0;;;;;;::::1;::::0;;;4632:28:::1;::::0;4605:11;;4632:28:::1;::::0;::::1;4324:343;4252:415:::0;:::o;5246:112::-;5304:16;5339:12;5332:19;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;5246:112;:::o;4095:80::-;8870:21:1;4302:15;;-1:-1:-1;;;4302:15:1;;;;4301:16;;4348:14;;4158:30;4726:16;;:34;;;;;4746:14;4726:34;4706:54;;4770:17;4790:11;:16;;4805:1;4790:16;:50;;;;-1:-1:-1;4818:4:1;4810:25;:30;4790:50;4770:70;;4856:12;4855:13;:30;;;;;4873:12;4872:13;4855:30;4851:91;;;4908:23;;-1:-1:-1;;;4908:23:1;;;;;;;;;;;4851:91;4951:18;;-1:-1:-1;;4951:18:1;4968:1;4951:18;;;4979:67;;;;5013:22;;-1:-1:-1;;;;5013:22:1;-1:-1:-1;;;5013:22:1;;;4979:67;4142:26:3::1;4157:10;4142:14;:26::i;:::-;5070:14:1::0;5066:101;;;5100:23;;-1:-1:-1;;;;5100:23:1;;;5142:14;;-1:-1:-1;2914:50:6;;5142:14:1;;2902:2:6;2887:18;5142:14:1;;;;;;;5066:101;4092:1081;;;;;4095:80:3:o;3415:215:0:-;2344:13;:11;:13::i;:::-;-1:-1:-1;;;;;3499:22:0;::::1;3495:91;;3544:31;::::0;-1:-1:-1;;;3544:31:0;;3572:1:::1;3544:31;::::0;::::1;345:51:6::0;318:18;;3544:31:0::1;199:203:6::0;3495:91:0::1;3595:28;3614:8;3595:18;:28::i;:::-;3415:215:::0;:::o;2668:162::-;966:10:2;2727:7:0;1323:22;2580:8;-1:-1:-1;;;;;2580:8:0;;2451:144;2727:7;-1:-1:-1;;;;;2727:23:0;;2723:101;;2773:40;;-1:-1:-1;;;2773:40:0;;966:10:2;2773:40:0;;;345:51:6;318:18;;2773:40:0;199:203:6;3784:248:0;1323:22;3933:8;;-1:-1:-1;;;;;;3951:19:0;;-1:-1:-1;;;;;3951:19:0;;;;;;;;3985:40;;3933:8;;;;;3985:40;;3857:24;;3985:40;3847:185;;3784:248;:::o;1857:127::-;6931:20:1;:18;:20::i;:::-;1939:38:0::1;1964:12;1939:24;:38::i;7084:141:1:-:0;8870:21;8560:40;-1:-1:-1;;;8560:40:1;;;;7146:73;;7191:17;;-1:-1:-1;;;7191:17:1;;;;;;;;;;;1990:235:0;6931:20:1;:18;:20::i;14:180:6:-;73:6;126:2;114:9;105:7;101:23;97:32;94:52;;;142:1;139;132:12;94:52;-1:-1:-1;165:23:6;;14:180;-1:-1:-1;14:180:6:o;407:632::-;578:2;630:21;;;700:13;;603:18;;;722:22;;;549:4;;578:2;801:15;;;;775:2;760:18;;;549:4;844:169;858:6;855:1;852:13;844:169;;;919:13;;907:26;;988:15;;;;953:12;;;;880:1;873:9;844:169;;;-1:-1:-1;1030:3:6;;407:632;-1:-1:-1;;;;;;407:632:6:o;1044:286::-;1103:6;1156:2;1144:9;1135:7;1131:23;1127:32;1124:52;;;1172:1;1169;1162:12;1124:52;1198:23;;-1:-1:-1;;;;;1250:31:6;;1240:42;;1230:70;;1296:1;1293;1286:12;1230:70;1319:5;1044:286;-1:-1:-1;;;1044:286:6:o;1335:127::-;1396:10;1391:3;1387:20;1384:1;1377:31;1427:4;1424:1;1417:15;1451:4;1448:1;1441:15;1467:127;1528:10;1523:3;1519:20;1516:1;1509:31;1559:4;1556:1;1549:15;1583:4;1580:1;1573:15;1599:128;1666:9;;;1687:11;;;1684:37;;;1701:18;;:::i;:::-;1599:128;;;;:::o;1732:127::-;1793:10;1788:3;1784:20;1781:1;1774:31;1824:4;1821:1;1814:15;1848:4;1845:1;1838:15;1864:135;1903:3;1924:17;;;1921:43;;1944:18;;:::i;:::-;-1:-1:-1;1991:1:6;1980:13;;1864:135::o"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "385000",
								"executionCost": "424",
								"totalCost": "385424"
							},
							"external": {
								"addClaimTopic(uint256)": "infinite",
								"getClaimTopics()": "infinite",
								"init()": "infinite",
								"owner()": "2335",
								"removeClaimTopic(uint256)": "infinite",
								"renounceOwnership()": "infinite",
								"transferOwnership(address)": "28399"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 4003,
									"end": 5360,
									"name": "PUSH",
									"source": 3,
									"value": "80"
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "PUSH",
									"source": 3,
									"value": "40"
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "MSTORE",
									"source": 3
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "CALLVALUE",
									"source": 3
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "ISZERO",
									"source": 3
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "PUSH [tag]",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "JUMPI",
									"source": 3
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "REVERT",
									"source": 3
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "tag",
									"source": 3,
									"value": "1"
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "JUMPDEST",
									"source": 3
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "POP",
									"source": 3
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "PUSH #[$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "DUP1",
									"source": 3
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "PUSH [$]",
									"source": 3,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "CODECOPY",
									"source": 3
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "PUSH",
									"source": 3,
									"value": "0"
								},
								{
									"begin": 4003,
									"end": 5360,
									"name": "RETURN",
									"source": 3
								}
							],
							".data": {
								"0": {
									".auxdata": "a2646970667358221220d6a1e8eece6b967362d42c4fc65193d0604d09e20eba3c0013ab16acdba8d31b64736f6c63430008110033",
									".code": [
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "CALLVALUE",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "tag",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "CALLDATALOAD",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "E0"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "SHR",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "C7B22551"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "C7B22551"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "DF09D604"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "E1C7392A"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "F2FDE38B"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "9"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "tag",
											"source": 3,
											"value": "10"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "8297846"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "715018A6"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "8DA5CB5B"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "EQ",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "5"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "tag",
											"source": 3,
											"value": "2"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4003,
											"end": 5360,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "tag",
											"source": 3,
											"value": "3"
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 4747,
											"end": 5168,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "tag",
											"source": 3,
											"value": "12"
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 4747,
											"end": 5168,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "tag",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "STOP",
											"source": 3
										},
										{
											"begin": 3165,
											"end": 3266,
											"name": "tag",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3165,
											"end": 3266,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3165,
											"end": 3266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 3165,
											"end": 3266,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 3165,
											"end": 3266,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "tag",
											"source": 0,
											"value": "5"
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1323,
											"end": 1345,
											"name": "PUSH",
											"source": 0,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 2580,
											"end": 2588,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2580,
											"end": 2588,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2580,
											"end": 2588,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2580,
											"end": 2588,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 345,
											"end": 396,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 345,
											"end": 396,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 333,
											"end": 335,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 318,
											"end": 336,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "tag",
											"source": 0,
											"value": "19"
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "SUB",
											"source": 0
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "RETURN",
											"source": 0
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "tag",
											"source": 3,
											"value": "6"
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "CALLDATASIZE",
											"source": 3
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "13"
										},
										{
											"begin": 4252,
											"end": 4667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "tag",
											"source": 3,
											"value": "22"
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 4252,
											"end": 4667,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "tag",
											"source": 3,
											"value": "7"
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 5246,
											"end": 5358,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "tag",
											"source": 3,
											"value": "24"
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "19"
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "27"
										},
										{
											"begin": 5246,
											"end": 5358,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4095,
											"end": 4175,
											"name": "tag",
											"source": 3,
											"value": "8"
										},
										{
											"begin": 4095,
											"end": 4175,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4095,
											"end": 4175,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "11"
										},
										{
											"begin": 4095,
											"end": 4175,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 4095,
											"end": 4175,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "tag",
											"source": 0,
											"value": "9"
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "11"
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "CALLDATASIZE",
											"source": 0
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "32"
										},
										{
											"begin": 3415,
											"end": 3630,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "tag",
											"source": 0,
											"value": "31"
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 3415,
											"end": 3630,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "tag",
											"source": 3,
											"value": "14"
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 2344,
											"end": 2355,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2344,
											"end": 2357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "tag",
											"source": 0,
											"value": "35"
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4832,
											"end": 4846,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4849,
											"end": 4868,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4849,
											"end": 4868,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4849,
											"end": 4868,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4878,
											"end": 5162,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 4878,
											"end": 5162,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4902,
											"end": 4908,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4898,
											"end": 4899,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4898,
											"end": 4908,
											"modifierDepth": 1,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4878,
											"end": 5162,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4878,
											"end": 5162,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 4878,
											"end": 5162,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4952,
											"end": 4963,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4945,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4946,
											"end": 4947,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 4933,
											"end": 4948,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "42"
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4948,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4933,
											"end": 4963,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4929,
											"end": 5152,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 4929,
											"end": 5152,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5013,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5014,
											"end": 5024,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 5023,
											"end": 5024,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5014,
											"end": 5020,
											"name": "DUP5",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5024,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "47"
										},
										{
											"begin": 5014,
											"end": 5024,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5014,
											"end": 5024,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "46"
										},
										{
											"begin": 5014,
											"end": 5024,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 5001,
											"end": 5025,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "49"
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5001,
											"end": 5025,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4995,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4996,
											"end": 4997,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 4983,
											"end": 4998,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "52"
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 4998,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 5025,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 5025,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 5025,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 4983,
											"end": 5025,
											"modifierDepth": 1,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5055,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "56"
										},
										{
											"begin": 5043,
											"end": 5061,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "55"
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5043,
											"end": 5061,
											"modifierDepth": 1,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 5102,
											"end": 5113,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5084,
											"end": 5114,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "B1381093C776453C1BBE54FD68BE1B235C65DB61D099CB50D194B2991E0EEC5"
										},
										{
											"begin": 5084,
											"end": 5114,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5084,
											"end": 5114,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5084,
											"end": 5114,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5084,
											"end": 5114,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5084,
											"end": 5114,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5084,
											"end": 5114,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5084,
											"end": 5114,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 5084,
											"end": 5114,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5084,
											"end": 5114,
											"modifierDepth": 1,
											"name": "LOG2",
											"source": 3
										},
										{
											"begin": 4878,
											"end": 5162,
											"modifierDepth": 1,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4822,
											"end": 5168,
											"modifierDepth": 1,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4747,
											"end": 5168,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4929,
											"end": 5152,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "45"
										},
										{
											"begin": 4929,
											"end": 5152,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4910,
											"end": 4913,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4910,
											"end": 4913,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 4910,
											"end": 4913,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4910,
											"end": 4913,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 4910,
											"end": 4913,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4910,
											"end": 4913,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "58"
										},
										{
											"begin": 4910,
											"end": 4913,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4910,
											"end": 4913,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4910,
											"end": 4913,
											"modifierDepth": 1,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4910,
											"end": 4913,
											"modifierDepth": 1,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4878,
											"end": 5162,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "38"
										},
										{
											"begin": 4878,
											"end": 5162,
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4878,
											"end": 5162,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "39"
										},
										{
											"begin": 4878,
											"end": 5162,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4878,
											"end": 5162,
											"modifierDepth": 1,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4822,
											"end": 5168,
											"modifierDepth": 1,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4747,
											"end": 5168,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4747,
											"end": 5168,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3165,
											"end": 3266,
											"name": "tag",
											"source": 0,
											"value": "16"
										},
										{
											"begin": 3165,
											"end": 3266,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2344,
											"end": 2355,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2344,
											"end": 2357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "tag",
											"source": 0,
											"value": "61"
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3229,
											"end": 3259,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 3256,
											"end": 3257,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3229,
											"end": 3247,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 3229,
											"end": 3259,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3229,
											"end": 3259,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 3229,
											"end": 3259,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3165,
											"end": 3266,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "tag",
											"source": 3,
											"value": "23"
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2344,
											"end": 2355,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2344,
											"end": 2357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "tag",
											"source": 0,
											"value": "69"
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 4334,
											"end": 4348,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4351,
											"end": 4370,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4397,
											"end": 4399,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "F"
										},
										{
											"begin": 4388,
											"end": 4399,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4388,
											"end": 4399,
											"modifierDepth": 1,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4380,
											"end": 4438,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4380,
											"end": 4438,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4438,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2206,
											"end": 2208,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4380,
											"end": 4438,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2188,
											"end": 2209,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2245,
											"end": 2247,
											"name": "PUSH",
											"source": 6,
											"value": "22"
										},
										{
											"begin": 2225,
											"end": 2243,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2225,
											"end": 2243,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2225,
											"end": 2243,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2218,
											"end": 2248,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2284,
											"end": 2318,
											"name": "PUSH",
											"source": 6,
											"value": "63616E6E6F742072657175697265206D6F7265207468616E20313520746F7069"
										},
										{
											"begin": 2264,
											"end": 2282,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 2264,
											"end": 2282,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2264,
											"end": 2282,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2257,
											"end": 2319,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "6373"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2335,
											"end": 2353,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 2335,
											"end": 2353,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2335,
											"end": 2353,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2328,
											"end": 2360,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "PUSH",
											"source": 6,
											"value": "84"
										},
										{
											"begin": 2377,
											"end": 2396,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "REVERT",
											"source": 3
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "71"
										},
										{
											"begin": 4380,
											"end": 4438,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4453,
											"end": 4462,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4448,
											"end": 4578,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 4448,
											"end": 4578,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4472,
											"end": 4478,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4468,
											"end": 4469,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4468,
											"end": 4478,
											"modifierDepth": 1,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4448,
											"end": 4578,
											"modifierDepth": 1,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 4448,
											"end": 4578,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 4448,
											"end": 4578,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4526,
											"end": 4537,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4519,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4520,
											"end": 4521,
											"modifierDepth": 1,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "LT",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "43"
										},
										{
											"begin": 4507,
											"end": 4522,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "78"
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4522,
											"modifierDepth": 1,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4507,
											"end": 4537,
											"name": "SUB",
											"source": 3
										},
										{
											"begin": 4499,
											"end": 4567,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 4499,
											"end": 4567,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 4499,
											"end": 4567,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4499,
											"end": 4567,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "461BCD"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E5"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4499,
											"end": 4567,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4499,
											"end": 4567,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 2609,
											"end": 2611,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 4499,
											"end": 4567,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "4"
										},
										{
											"begin": 4499,
											"end": 4567,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4499,
											"end": 4567,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 2591,
											"end": 2612,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2648,
											"end": 2650,
											"name": "PUSH",
											"source": 6,
											"value": "19"
										},
										{
											"begin": 2628,
											"end": 2646,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 2628,
											"end": 2646,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2628,
											"end": 2646,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2621,
											"end": 2651,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2687,
											"end": 2714,
											"name": "PUSH",
											"source": 6,
											"value": "636C61696D546F70696320616C72656164792065786973747300000000000000"
										},
										{
											"begin": 2667,
											"end": 2685,
											"name": "PUSH",
											"source": 6,
											"value": "44"
										},
										{
											"begin": 2667,
											"end": 2685,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 2667,
											"end": 2685,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2660,
											"end": 2715,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "PUSH",
											"source": 6,
											"value": "64"
										},
										{
											"begin": 2732,
											"end": 2750,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 4499,
											"end": 4567,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "72"
										},
										{
											"begin": 2407,
											"end": 2756,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 4499,
											"end": 4567,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "80"
										},
										{
											"begin": 4499,
											"end": 4567,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4480,
											"end": 4483,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4480,
											"end": 4483,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 4480,
											"end": 4483,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4480,
											"end": 4483,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "59"
										},
										{
											"begin": 4480,
											"end": 4483,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4480,
											"end": 4483,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "83"
										},
										{
											"begin": 4480,
											"end": 4483,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 4480,
											"end": 4483,
											"modifierDepth": 1,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4480,
											"end": 4483,
											"modifierDepth": 1,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4480,
											"end": 4483,
											"modifierDepth": 1,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4448,
											"end": 4578,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "74"
										},
										{
											"begin": 4448,
											"end": 4578,
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4448,
											"end": 4578,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "75"
										},
										{
											"begin": 4448,
											"end": 4578,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4587,
											"end": 4599,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "PUSH",
											"source": 3,
											"value": "290DECD9548B62A8D60345A988386FC84BA6BC95484008F6362F93160EF3E563"
										},
										{
											"begin": 4587,
											"end": 4617,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 4587,
											"end": 4617,
											"name": "SSTORE",
											"source": 3
										},
										{
											"begin": 4632,
											"end": 4660,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 4632,
											"end": 4660,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 4605,
											"end": 4616,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 4605,
											"end": 4616,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4632,
											"end": 4660,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 3,
											"value": "1C928B7F7ADE2949E92366AA9454DBEF3A416B731CF6EC786BA9595BBD814D6"
										},
										{
											"begin": 4632,
											"end": 4660,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 4632,
											"end": 4660,
											"modifierDepth": 1,
											"name": "LOG2",
											"source": 3
										},
										{
											"begin": 4324,
											"end": 4667,
											"modifierDepth": 1,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4252,
											"end": 4667,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 4252,
											"end": 4667,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "tag",
											"source": 3,
											"value": "25"
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5304,
											"end": 5320,
											"name": "PUSH",
											"source": 3,
											"value": "60"
										},
										{
											"begin": 5339,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "MLOAD",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "40"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SWAP3",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "ISZERO",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "MUL",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP3",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SWAP2",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "0"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "KECCAK256",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "tag",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SLOAD",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP2",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "MSTORE",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "20"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH",
											"source": 3,
											"value": "1"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "ADD",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "DUP4",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "GT",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "87"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "JUMPI",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "tag",
											"source": 3,
											"value": "86"
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5332,
											"end": 5351,
											"name": "POP",
											"source": 3
										},
										{
											"begin": 5246,
											"end": 5358,
											"name": "SWAP1",
											"source": 3
										},
										{
											"begin": 5246,
											"end": 5358,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4095,
											"end": 4175,
											"name": "tag",
											"source": 3,
											"value": "29"
										},
										{
											"begin": 4095,
											"end": 4175,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 8870,
											"end": 8891,
											"name": "PUSH",
											"source": 1,
											"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 4302,
											"end": 4317,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4301,
											"end": 4317,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4348,
											"end": 4362,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4158,
											"end": 4188,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4742,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4746,
											"end": 4760,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "tag",
											"source": 1,
											"value": "91"
										},
										{
											"begin": 4726,
											"end": 4760,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4706,
											"end": 4760,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4706,
											"end": 4760,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4787,
											"name": "PUSH",
											"source": 1,
											"value": "0"
										},
										{
											"begin": 4790,
											"end": 4801,
											"name": "DUP3",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "PUSH",
											"source": 1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4805,
											"end": 4806,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4790,
											"end": 4806,
											"name": "EQ",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 4818,
											"end": 4822,
											"name": "ADDRESS",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4835,
											"name": "EXTCODESIZE",
											"source": 1
										},
										{
											"begin": 4810,
											"end": 4840,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "tag",
											"source": 1,
											"value": "92"
										},
										{
											"begin": 4790,
											"end": 4840,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4840,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4770,
											"end": 4840,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4856,
											"end": 4868,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4868,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4873,
											"end": 4885,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4872,
											"end": 4885,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "tag",
											"source": 1,
											"value": "93"
										},
										{
											"begin": 4855,
											"end": 4885,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "F92EE8A9"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 4908,
											"end": 4931,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "tag",
											"source": 1,
											"value": "94"
										},
										{
											"begin": 4851,
											"end": 4942,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FFFFFFFFFFFFFFFF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 4968,
											"end": 4969,
											"name": "PUSH",
											"source": 1,
											"value": "1"
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 4951,
											"end": 4969,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "AND",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "OR",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5013,
											"end": 5035,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "tag",
											"source": 1,
											"value": "95"
										},
										{
											"begin": 4979,
											"end": 5046,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4142,
											"end": 4168,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 4157,
											"end": 4167,
											"modifierDepth": 1,
											"name": "CALLER",
											"source": 3
										},
										{
											"begin": 4142,
											"end": 4156,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 3,
											"value": "98"
										},
										{
											"begin": 4142,
											"end": 4168,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 4142,
											"end": 4168,
											"modifierDepth": 1,
											"name": "tag",
											"source": 3,
											"value": "97"
										},
										{
											"begin": 4142,
											"end": 4168,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 3
										},
										{
											"begin": 5070,
											"end": 5084,
											"name": "DUP4",
											"source": 1
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "ISZERO",
											"source": 1
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP5",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "FF"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "DUP6",
											"source": 1
										},
										{
											"begin": 5100,
											"end": 5123,
											"name": "SSTORE",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": 2914,
											"end": 2964,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 2914,
											"end": 2964,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 1,
											"value": "C7F505B2F371AE2175EE4913F4499E1F2633A7B5936321EED1CDAEB6115181D2"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 2902,
											"end": 2904,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 2887,
											"end": 2905,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 5142,
											"end": 5156,
											"name": "LOG1",
											"source": 1
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "tag",
											"source": 1,
											"value": "99"
										},
										{
											"begin": 5066,
											"end": 5167,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4092,
											"end": 5173,
											"name": "POP",
											"source": 1
										},
										{
											"begin": 4095,
											"end": 4175,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 3
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "tag",
											"source": 0,
											"value": "33"
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 2344,
											"end": 2355,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2344,
											"end": 2357,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "tag",
											"source": 0,
											"value": "103"
										},
										{
											"begin": 2344,
											"end": 2357,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3499,
											"end": 3521,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3499,
											"end": 3521,
											"modifierDepth": 1,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3495,
											"end": 3586,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 3495,
											"end": 3586,
											"modifierDepth": 1,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 3544,
											"end": 3575,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3544,
											"end": 3575,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1E4FBDF7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 3544,
											"end": 3575,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3544,
											"end": 3575,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 3572,
											"end": 3573,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3544,
											"end": 3575,
											"modifierDepth": 1,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 3544,
											"end": 3575,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3544,
											"end": 3575,
											"modifierDepth": 1,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 345,
											"end": 396,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 318,
											"end": 336,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 318,
											"end": 336,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 3544,
											"end": 3575,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 199,
											"end": 402,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3495,
											"end": 3586,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "105"
										},
										{
											"begin": 3495,
											"end": 3586,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3595,
											"end": 3623,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 3614,
											"end": 3622,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3595,
											"end": 3613,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 3595,
											"end": 3623,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 3595,
											"end": 3623,
											"modifierDepth": 1,
											"name": "tag",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 3595,
											"end": 3623,
											"modifierDepth": 1,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 3415,
											"end": 3630,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3415,
											"end": 3630,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2668,
											"end": 2830,
											"name": "tag",
											"source": 0,
											"value": "36"
										},
										{
											"begin": 2668,
											"end": 2830,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 2727,
											"end": 2734,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 1323,
											"end": 1345,
											"name": "PUSH",
											"source": 0,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 2580,
											"end": 2588,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2580,
											"end": 2588,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2580,
											"end": 2588,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 2451,
											"end": 2595,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 2727,
											"end": 2734,
											"name": "tag",
											"source": 0,
											"value": "111"
										},
										{
											"begin": 2727,
											"end": 2734,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 2727,
											"end": 2750,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 2727,
											"end": 2750,
											"name": "EQ",
											"source": 0
										},
										{
											"begin": 2723,
											"end": 2824,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "63"
										},
										{
											"begin": 2723,
											"end": 2824,
											"name": "JUMPI",
											"source": 0
										},
										{
											"begin": 2773,
											"end": 2813,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 2773,
											"end": 2813,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "118CDAA7"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 2773,
											"end": 2813,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 2773,
											"end": 2813,
											"name": "MSTORE",
											"source": 0
										},
										{
											"begin": 966,
											"end": 976,
											"name": "CALLER",
											"source": 2
										},
										{
											"begin": 2773,
											"end": 2813,
											"name": "PUSH",
											"source": 0,
											"value": "4"
										},
										{
											"begin": 2773,
											"end": 2813,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 2773,
											"end": 2813,
											"name": "ADD",
											"source": 0
										},
										{
											"begin": 345,
											"end": 396,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 318,
											"end": 336,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 318,
											"end": 336,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 2773,
											"end": 2813,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "72"
										},
										{
											"begin": 199,
											"end": 402,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 3784,
											"end": 4032,
											"name": "tag",
											"source": 0,
											"value": "64"
										},
										{
											"begin": 3784,
											"end": 4032,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 1323,
											"end": 1345,
											"name": "PUSH",
											"source": 0,
											"value": "9016D09D72D40FDAE2FD8CEAC6B6234C7706214FD39C1CD1E609A0528C199300"
										},
										{
											"begin": 3933,
											"end": 3941,
											"name": "DUP1",
											"source": 0
										},
										{
											"begin": 3933,
											"end": 3941,
											"name": "SLOAD",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "NOT",
											"source": -1
										},
										{
											"begin": 3951,
											"end": 3970,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 3970,
											"name": "AND",
											"source": 0
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 3951,
											"end": 3970,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 3970,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 3970,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 3970,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 3970,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 3970,
											"name": "OR",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 3970,
											"name": "DUP5",
											"source": 0
										},
										{
											"begin": 3951,
											"end": 3970,
											"name": "SSTORE",
											"source": 0
										},
										{
											"begin": 3985,
											"end": 4025,
											"name": "PUSH",
											"source": 0,
											"value": "40"
										},
										{
											"begin": 3985,
											"end": 4025,
											"name": "MLOAD",
											"source": 0
										},
										{
											"begin": 3933,
											"end": 3941,
											"name": "SWAP3",
											"source": 0
										},
										{
											"begin": 3933,
											"end": 3941,
											"name": "AND",
											"source": 0
										},
										{
											"begin": 3933,
											"end": 3941,
											"name": "SWAP2",
											"source": 0
										},
										{
											"begin": 3933,
											"end": 3941,
											"name": "DUP3",
											"source": 0
										},
										{
											"begin": 3933,
											"end": 3941,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3985,
											"end": 4025,
											"name": "PUSH",
											"source": 0,
											"value": "8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0"
										},
										{
											"begin": 3985,
											"end": 4025,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3857,
											"end": 3881,
											"name": "PUSH",
											"source": 0,
											"value": "0"
										},
										{
											"begin": 3857,
											"end": 3881,
											"name": "SWAP1",
											"source": 0
										},
										{
											"begin": 3985,
											"end": 4025,
											"name": "LOG3",
											"source": 0
										},
										{
											"begin": 3847,
											"end": 4032,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3847,
											"end": 4032,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3784,
											"end": 4032,
											"name": "POP",
											"source": 0
										},
										{
											"begin": 3784,
											"end": 4032,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 1857,
											"end": 1984,
											"name": "tag",
											"source": 0,
											"value": "98"
										},
										{
											"begin": 1857,
											"end": 1984,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "tag",
											"source": 1,
											"value": "120"
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 1939,
											"end": 1977,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "107"
										},
										{
											"begin": 1964,
											"end": 1976,
											"modifierDepth": 1,
											"name": "DUP2",
											"source": 0
										},
										{
											"begin": 1939,
											"end": 1963,
											"modifierDepth": 1,
											"name": "PUSH [tag]",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1939,
											"end": 1977,
											"jumpType": "[in]",
											"modifierDepth": 1,
											"name": "JUMP",
											"source": 0
										},
										{
											"begin": 7084,
											"end": 7225,
											"name": "tag",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 7084,
											"end": 7225,
											"name": "JUMPDEST",
											"source": 1
										},
										{
											"begin": 8870,
											"end": 8891,
											"name": "PUSH",
											"source": 1,
											"value": "F0C57E16840DF040F15088DC2F81FE391C3923BEC73E23A9662EFC9C229C6A00"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "40"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "DIV",
											"source": 1
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "PUSH",
											"source": 1,
											"value": "FF"
										},
										{
											"begin": 8560,
											"end": 8600,
											"name": "AND",
											"source": 1
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "63"
										},
										{
											"begin": 7146,
											"end": 7219,
											"name": "JUMPI",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1AFCD79F"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "E3"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "DUP2",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MSTORE",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 1,
											"value": "4"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "ADD",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "PUSH",
											"source": 1,
											"value": "40"
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "MLOAD",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "DUP1",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SWAP2",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SUB",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "SWAP1",
											"source": 1
										},
										{
											"begin": 7191,
											"end": 7208,
											"name": "REVERT",
											"source": 1
										},
										{
											"begin": 1990,
											"end": 2225,
											"name": "tag",
											"source": 0,
											"value": "124"
										},
										{
											"begin": 1990,
											"end": 2225,
											"name": "JUMPDEST",
											"source": 0
										},
										{
											"begin": 6931,
											"end": 6951,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "103"
										},
										{
											"begin": 6931,
											"end": 6949,
											"name": "PUSH [tag]",
											"source": 1,
											"value": "121"
										},
										{
											"begin": 6931,
											"end": 6951,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 1
										},
										{
											"begin": 14,
											"end": 194,
											"name": "tag",
											"source": 6,
											"value": "13"
										},
										{
											"begin": 14,
											"end": 194,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 73,
											"end": 79,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 126,
											"end": 128,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 114,
											"end": 123,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 105,
											"end": 112,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 101,
											"end": 124,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 97,
											"end": 129,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 142,
											"end": 143,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 139,
											"end": 140,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 132,
											"end": 144,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 94,
											"end": 146,
											"name": "tag",
											"source": 6,
											"value": "141"
										},
										{
											"begin": 94,
											"end": 146,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 165,
											"end": 188,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": 165,
											"end": 188,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 14,
											"end": 194,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 14,
											"end": 194,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 407,
											"end": 1039,
											"name": "tag",
											"source": 6,
											"value": "27"
										},
										{
											"begin": 407,
											"end": 1039,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 578,
											"end": 580,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 630,
											"end": 651,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 630,
											"end": 651,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 630,
											"end": 651,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 700,
											"end": 713,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 700,
											"end": 713,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 603,
											"end": 621,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 603,
											"end": 621,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 603,
											"end": 621,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 722,
											"end": 744,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 722,
											"end": 744,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 722,
											"end": 744,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 549,
											"end": 553,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 549,
											"end": 553,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 578,
											"end": 580,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 801,
											"end": 816,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 801,
											"end": 816,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 801,
											"end": 816,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 801,
											"end": 816,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 775,
											"end": 777,
											"name": "PUSH",
											"source": 6,
											"value": "40"
										},
										{
											"begin": 760,
											"end": 778,
											"name": "DUP6",
											"source": 6
										},
										{
											"begin": 760,
											"end": 778,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 760,
											"end": 778,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 549,
											"end": 553,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 844,
											"end": 1013,
											"name": "tag",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 844,
											"end": 1013,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 858,
											"end": 864,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 855,
											"end": 856,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 852,
											"end": 865,
											"name": "LT",
											"source": 6
										},
										{
											"begin": 844,
											"end": 1013,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 844,
											"end": 1013,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 844,
											"end": 1013,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 919,
											"end": 932,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 919,
											"end": 932,
											"name": "MLOAD",
											"source": 6
										},
										{
											"begin": 907,
											"end": 933,
											"name": "DUP4",
											"source": 6
										},
										{
											"begin": 907,
											"end": 933,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 988,
											"end": 1003,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 988,
											"end": 1003,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 988,
											"end": 1003,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 988,
											"end": 1003,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 953,
											"end": 965,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 953,
											"end": 965,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 953,
											"end": 965,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 953,
											"end": 965,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 880,
											"end": 881,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 873,
											"end": 882,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 844,
											"end": 1013,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "144"
										},
										{
											"begin": 844,
											"end": 1013,
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 844,
											"end": 1013,
											"name": "tag",
											"source": 6,
											"value": "146"
										},
										{
											"begin": 844,
											"end": 1013,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1030,
											"end": 1033,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1030,
											"end": 1033,
											"name": "SWAP7",
											"source": 6
										},
										{
											"begin": 407,
											"end": 1039,
											"name": "SWAP6",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 407,
											"end": 1039,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1044,
											"end": 1330,
											"name": "tag",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1044,
											"end": 1330,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1103,
											"end": 1109,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1156,
											"end": 1158,
											"name": "PUSH",
											"source": 6,
											"value": "20"
										},
										{
											"begin": 1144,
											"end": 1153,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1135,
											"end": 1142,
											"name": "DUP5",
											"source": 6
										},
										{
											"begin": 1131,
											"end": 1154,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1127,
											"end": 1159,
											"name": "SLT",
											"source": 6
										},
										{
											"begin": 1124,
											"end": 1176,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1124,
											"end": 1176,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 1124,
											"end": 1176,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1172,
											"end": 1173,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1169,
											"end": 1170,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1162,
											"end": 1174,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1124,
											"end": 1176,
											"name": "tag",
											"source": 6,
											"value": "148"
										},
										{
											"begin": 1124,
											"end": 1176,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1198,
											"end": 1221,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1198,
											"end": 1221,
											"name": "CALLDATALOAD",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "1"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "PUSH",
											"source": -1,
											"value": "A0"
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SHL",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "SUB",
											"source": -1
										},
										{
											"begin": 1250,
											"end": 1281,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1250,
											"end": 1281,
											"name": "AND",
											"source": 6
										},
										{
											"begin": 1240,
											"end": 1282,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1240,
											"end": 1282,
											"name": "EQ",
											"source": 6
										},
										{
											"begin": 1230,
											"end": 1300,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 1230,
											"end": 1300,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1296,
											"end": 1297,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1293,
											"end": 1294,
											"name": "DUP1",
											"source": 6
										},
										{
											"begin": 1286,
											"end": 1298,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1230,
											"end": 1300,
											"name": "tag",
											"source": 6,
											"value": "149"
										},
										{
											"begin": 1230,
											"end": 1300,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1319,
											"end": 1324,
											"name": "SWAP4",
											"source": 6
										},
										{
											"begin": 1044,
											"end": 1330,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1044,
											"end": 1330,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1335,
											"end": 1462,
											"name": "tag",
											"source": 6,
											"value": "43"
										},
										{
											"begin": 1335,
											"end": 1462,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1396,
											"end": 1406,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 1391,
											"end": 1394,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 1387,
											"end": 1407,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1384,
											"end": 1385,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1377,
											"end": 1408,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1427,
											"end": 1431,
											"name": "PUSH",
											"source": 6,
											"value": "32"
										},
										{
											"begin": 1424,
											"end": 1425,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1417,
											"end": 1432,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1451,
											"end": 1455,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1448,
											"end": 1449,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1441,
											"end": 1456,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1467,
											"end": 1594,
											"name": "tag",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 1467,
											"end": 1594,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1528,
											"end": 1538,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 1523,
											"end": 1526,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 1519,
											"end": 1539,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1516,
											"end": 1517,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1509,
											"end": 1540,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1559,
											"end": 1563,
											"name": "PUSH",
											"source": 6,
											"value": "11"
										},
										{
											"begin": 1556,
											"end": 1557,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1549,
											"end": 1564,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1583,
											"end": 1587,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1580,
											"end": 1581,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1573,
											"end": 1588,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1599,
											"end": 1727,
											"name": "tag",
											"source": 6,
											"value": "47"
										},
										{
											"begin": 1599,
											"end": 1727,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1666,
											"end": 1675,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1666,
											"end": 1675,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1666,
											"end": 1675,
											"name": "SUB",
											"source": 6
										},
										{
											"begin": 1687,
											"end": 1698,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1687,
											"end": 1698,
											"name": "DUP2",
											"source": 6
										},
										{
											"begin": 1687,
											"end": 1698,
											"name": "GT",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1721,
											"name": "ISZERO",
											"source": 6
										},
										{
											"begin": 1684,
											"end": 1721,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 1684,
											"end": 1721,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 1701,
											"end": 1719,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "tag",
											"source": 6,
											"value": "154"
										},
										{
											"begin": 1701,
											"end": 1719,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1599,
											"end": 1727,
											"name": "SWAP3",
											"source": 6
										},
										{
											"begin": 1599,
											"end": 1727,
											"name": "SWAP2",
											"source": 6
										},
										{
											"begin": 1599,
											"end": 1727,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1599,
											"end": 1727,
											"name": "POP",
											"source": 6
										},
										{
											"begin": 1599,
											"end": 1727,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1732,
											"end": 1859,
											"name": "tag",
											"source": 6,
											"value": "56"
										},
										{
											"begin": 1732,
											"end": 1859,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1793,
											"end": 1803,
											"name": "PUSH",
											"source": 6,
											"value": "4E487B71"
										},
										{
											"begin": 1788,
											"end": 1791,
											"name": "PUSH",
											"source": 6,
											"value": "E0"
										},
										{
											"begin": 1784,
											"end": 1804,
											"name": "SHL",
											"source": 6
										},
										{
											"begin": 1781,
											"end": 1782,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1774,
											"end": 1805,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1824,
											"end": 1828,
											"name": "PUSH",
											"source": 6,
											"value": "31"
										},
										{
											"begin": 1821,
											"end": 1822,
											"name": "PUSH",
											"source": 6,
											"value": "4"
										},
										{
											"begin": 1814,
											"end": 1829,
											"name": "MSTORE",
											"source": 6
										},
										{
											"begin": 1848,
											"end": 1852,
											"name": "PUSH",
											"source": 6,
											"value": "24"
										},
										{
											"begin": 1845,
											"end": 1846,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1838,
											"end": 1853,
											"name": "REVERT",
											"source": 6
										},
										{
											"begin": 1864,
											"end": 1999,
											"name": "tag",
											"source": 6,
											"value": "59"
										},
										{
											"begin": 1864,
											"end": 1999,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": 1903,
											"end": 1906,
											"name": "PUSH",
											"source": 6,
											"value": "0"
										},
										{
											"begin": 1924,
											"end": 1941,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1924,
											"end": 1941,
											"name": "DUP3",
											"source": 6
										},
										{
											"begin": 1924,
											"end": 1941,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1921,
											"end": 1964,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 1921,
											"end": 1964,
											"name": "JUMPI",
											"source": 6
										},
										{
											"begin": 1944,
											"end": 1962,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 1944,
											"end": 1962,
											"name": "PUSH [tag]",
											"source": 6,
											"value": "138"
										},
										{
											"begin": 1944,
											"end": 1962,
											"jumpType": "[in]",
											"name": "JUMP",
											"source": 6
										},
										{
											"begin": 1944,
											"end": 1962,
											"name": "tag",
											"source": 6,
											"value": "158"
										},
										{
											"begin": 1944,
											"end": 1962,
											"name": "JUMPDEST",
											"source": 6
										},
										{
											"begin": -1,
											"end": -1,
											"name": "POP",
											"source": -1
										},
										{
											"begin": 1991,
											"end": 1992,
											"name": "PUSH",
											"source": 6,
											"value": "1"
										},
										{
											"begin": 1980,
											"end": 1993,
											"name": "ADD",
											"source": 6
										},
										{
											"begin": 1980,
											"end": 1993,
											"name": "SWAP1",
											"source": 6
										},
										{
											"begin": 1864,
											"end": 1999,
											"jumpType": "[out]",
											"name": "JUMP",
											"source": 6
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol",
								"contracts t-rex/registry/interface/IClaimTopicsRegistry.sol",
								"contracts t-rex/registry/storage/CTRStorage.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {
							"addClaimTopic(uint256)": "c7b22551",
							"getClaimTopics()": "df09d604",
							"init()": "e1c7392a",
							"owner()": "8da5cb5b",
							"removeClaimTopic(uint256)": "08297846",
							"renounceOwnership()": "715018a6",
							"transferOwnership(address)": "f2fde38b"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"addClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"removeClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"kind\":\"dev\",\"methods\":{\"addClaimTopic(uint256)\":{\"details\":\"See {IClaimTopicsRegistry-addClaimTopic}.\"},\"getClaimTopics()\":{\"details\":\"See {IClaimTopicsRegistry-getClaimTopics}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"removeClaimTopic(uint256)\":{\"details\":\"See {IClaimTopicsRegistry-removeClaimTopic}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimTopicAdded(uint256)\":{\"notice\":\"this event is emitted when a claim topic has been added to the ClaimTopicsRegistry  the event is emitted by the 'addClaimTopic' function  `claimTopic` is the required claim added to the Claim Topics Registry\"},\"ClaimTopicRemoved(uint256)\":{\"notice\":\"this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry  the event is emitted by the 'removeClaimTopic' function  `claimTopic` is the required claim removed from the Claim Topics Registry\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":\"ClaimTopicsRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"keccak256\":\"0xf702b0c3a7ccdae8bb7b1265c9bb536ce4051311d82b1b44b94a43bfbe130818\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://3de77c5e3f4ac02518481cb21e907f5f1fd5bb8f3f3c6c880fdb193afc006c77\",\"dweb:/ipfs/QmXXrLgxyDswm4zjz27GvGRZQWcWg8Tpu8ANvrmDk5q1sW\"]},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x65315805c3cddf140325ec9d7cf45cfca17b73b4680d1401e0869e63f4d4eebd\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://06ab79ad2381ae0dcbd1fa902630d2cf024c586f885bb7d54fd6e0ed93c22325\",\"dweb:/ipfs/QmYtzBU3tiEHPh68xFdxLGc5PJtxiH8RHmchx1hzwcRhZT\"]},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"keccak256\":\"0xdaecaa981ac8b1d77c4942c691cbeb71971a0fa2a0adba07e2f2d75da8ca2fd9\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c1596acf548eb5b52b95c684f8913729cdb04102ce76e3203c1831fa2dc6dfb3\",\"dweb:/ipfs/QmYQM9sizfJu613HW3UL52CUe6pxC3osc4bfJRyD1p8SWc\"]},\"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol\":{\"keccak256\":\"0x86e87dd4ec70bdbeecf6a802c17ceca25a2db3587b129eea4693e9c68c5ad7d1\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://702df9d949bdb3d260f2cf73158de07af2775dc69975ec86f72e131706dc4cbb\",\"dweb:/ipfs/QmdLk2iiaQjuFLtgNVgjp6FHs8QwvzqTubnMxZg98sLxut\"]},\"contracts t-rex/registry/interface/IClaimTopicsRegistry.sol\":{\"keccak256\":\"0x878a76f41e117a67b97a698755e9875701282fcc12890c5ebaf85264808e5608\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://46639925c8db6a5442687f74c489bd9f05904acc2f87579f3f538e2a8d5045e2\",\"dweb:/ipfs/QmQSQHd9jMT98LDnD3cxHFK4L9zZ7fLLd9tJUu1ddZYoLn\"]},\"contracts t-rex/registry/storage/CTRStorage.sol\":{\"keccak256\":\"0xee2fc57419e8455c167ae9dbbca946b16456353161933f94fb9403beaf06a95b\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://59a52f39f953cf35f2e6d2036e97a657be534d7131f10901c434e542aa643fd7\",\"dweb:/ipfs/QmYRTVatp8oqBUjU4Kah8ZmRnjo1EJ8V7qJFowbJJ117dB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 667,
								"contract": "contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol:ClaimTopicsRegistry",
								"label": "_claimTopics",
								"offset": 0,
								"slot": "0",
								"type": "t_array(t_uint256)dyn_storage"
							},
							{
								"astId": 672,
								"contract": "contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol:ClaimTopicsRegistry",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)dyn_storage": {
								"base": "t_uint256",
								"encoding": "dynamic_array",
								"label": "uint256[]",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"events": {
							"ClaimTopicAdded(uint256)": {
								"notice": "this event is emitted when a claim topic has been added to the ClaimTopicsRegistry  the event is emitted by the 'addClaimTopic' function  `claimTopic` is the required claim added to the Claim Topics Registry"
							},
							"ClaimTopicRemoved(uint256)": {
								"notice": "this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry  the event is emitted by the 'removeClaimTopic' function  `claimTopic` is the required claim removed from the Claim Topics Registry"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts t-rex/registry/interface/IClaimTopicsRegistry.sol": {
				"IClaimTopicsRegistry": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								}
							],
							"name": "ClaimTopicAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "uint256",
									"name": "claimTopic",
									"type": "uint256"
								}
							],
							"name": "ClaimTopicRemoved",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_claimTopic",
									"type": "uint256"
								}
							],
							"name": "addClaimTopic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "getClaimTopics",
							"outputs": [
								{
									"internalType": "uint256[]",
									"name": "",
									"type": "uint256[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "uint256",
									"name": "_claimTopic",
									"type": "uint256"
								}
							],
							"name": "removeClaimTopic",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addClaimTopic(uint256)": {
								"details": "Add a trusted claim topic (For example: KYC=1, AML=2). Only owner can call. emits `ClaimTopicAdded` event cannot add more than 15 topics for 1 token as adding more could create gas issues",
								"params": {
									"_claimTopic": "The claim topic index"
								}
							},
							"getClaimTopics()": {
								"details": "Get the trusted claim topics for the security token",
								"returns": {
									"_0": "Array of trusted claim topics"
								}
							},
							"removeClaimTopic(uint256)": {
								"details": "Remove a trusted claim topic (For example: KYC=1, AML=2).  Only owner can call.  emits `ClaimTopicRemoved` event",
								"params": {
									"_claimTopic": "The claim topic index"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addClaimTopic(uint256)": "c7b22551",
							"getClaimTopics()": "df09d604",
							"removeClaimTopic(uint256)": "08297846"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"claimTopic\",\"type\":\"uint256\"}],\"name\":\"ClaimTopicRemoved\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"addClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getClaimTopics\",\"outputs\":[{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_claimTopic\",\"type\":\"uint256\"}],\"name\":\"removeClaimTopic\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addClaimTopic(uint256)\":{\"details\":\"Add a trusted claim topic (For example: KYC=1, AML=2). Only owner can call. emits `ClaimTopicAdded` event cannot add more than 15 topics for 1 token as adding more could create gas issues\",\"params\":{\"_claimTopic\":\"The claim topic index\"}},\"getClaimTopics()\":{\"details\":\"Get the trusted claim topics for the security token\",\"returns\":{\"_0\":\"Array of trusted claim topics\"}},\"removeClaimTopic(uint256)\":{\"details\":\"Remove a trusted claim topic (For example: KYC=1, AML=2).  Only owner can call.  emits `ClaimTopicRemoved` event\",\"params\":{\"_claimTopic\":\"The claim topic index\"}}},\"version\":1},\"userdoc\":{\"events\":{\"ClaimTopicAdded(uint256)\":{\"notice\":\"this event is emitted when a claim topic has been added to the ClaimTopicsRegistry  the event is emitted by the 'addClaimTopic' function  `claimTopic` is the required claim added to the Claim Topics Registry\"},\"ClaimTopicRemoved(uint256)\":{\"notice\":\"this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry  the event is emitted by the 'removeClaimTopic' function  `claimTopic` is the required claim removed from the Claim Topics Registry\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts t-rex/registry/interface/IClaimTopicsRegistry.sol\":\"IClaimTopicsRegistry\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts t-rex/registry/interface/IClaimTopicsRegistry.sol\":{\"keccak256\":\"0x878a76f41e117a67b97a698755e9875701282fcc12890c5ebaf85264808e5608\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://46639925c8db6a5442687f74c489bd9f05904acc2f87579f3f538e2a8d5045e2\",\"dweb:/ipfs/QmQSQHd9jMT98LDnD3cxHFK4L9zZ7fLLd9tJUu1ddZYoLn\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"ClaimTopicAdded(uint256)": {
								"notice": "this event is emitted when a claim topic has been added to the ClaimTopicsRegistry  the event is emitted by the 'addClaimTopic' function  `claimTopic` is the required claim added to the Claim Topics Registry"
							},
							"ClaimTopicRemoved(uint256)": {
								"notice": "this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry  the event is emitted by the 'removeClaimTopic' function  `claimTopic` is the required claim removed from the Claim Topics Registry"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			},
			"contracts t-rex/registry/storage/CTRStorage.sol": {
				"CTRStorage": {
					"abi": [],
					"devdoc": {
						"kind": "dev",
						"methods": {},
						"stateVariables": {
							"__gap": {
								"details": "This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain."
							},
							"_claimTopics": {
								"details": "All required Claim Topics"
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "    /* \"contracts t-rex/registry/storage/CTRStorage.sol\":3843:4153  contract CTRStorage {... */\n  mstore(0x40, 0x80)\n  callvalue\n  dup1\n  iszero\n  tag_1\n  jumpi\n  0x00\n  dup1\n  revert\ntag_1:\n  pop\n  dataSize(sub_0)\n  dup1\n  dataOffset(sub_0)\n  0x00\n  codecopy\n  0x00\n  return\nstop\n\nsub_0: assembly {\n        /* \"contracts t-rex/registry/storage/CTRStorage.sol\":3843:4153  contract CTRStorage {... */\n      mstore(0x40, 0x80)\n      0x00\n      dup1\n      revert\n\n    auxdata: 0xa264697066735822122061359dc6a380265c373c98a32940e78e174ee38c016b90159a7692012a0f511264736f6c63430008110033\n}\n",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122061359dc6a380265c373c98a32940e78e174ee38c016b90159a7692012a0f511264736f6c63430008110033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3F DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN INVALID PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x359D 0xC6 LOG3 DUP1 0x26 0x5C CALLDATACOPY EXTCODECOPY SWAP9 LOG3 0x29 BLOCKHASH 0xE7 DUP15 OR 0x4E 0xE3 DUP13 ADD PUSH12 0x90159A7692012A0F51126473 PUSH16 0x6C634300081100330000000000000000 ",
							"sourceMap": "3843:310:5:-:0;;;;;;;;;;;;;;;;;;;"
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "6080604052600080fdfea264697066735822122061359dc6a380265c373c98a32940e78e174ee38c016b90159a7692012a0f511264736f6c63430008110033",
							"opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT INVALID LOG2 PUSH5 0x6970667358 0x22 SLT KECCAK256 PUSH2 0x359D 0xC6 LOG3 DUP1 0x26 0x5C CALLDATACOPY EXTCODECOPY SWAP9 LOG3 0x29 BLOCKHASH 0xE7 DUP15 OR 0x4E 0xE3 DUP13 ADD PUSH12 0x90159A7692012A0F51126473 PUSH16 0x6C634300081100330000000000000000 ",
							"sourceMap": "3843:310:5:-:0;;;;;"
						},
						"gasEstimates": {
							"creation": {
								"codeDepositCost": "12600",
								"executionCost": "66",
								"totalCost": "12666"
							}
						},
						"legacyAssembly": {
							".code": [
								{
									"begin": 3843,
									"end": 4153,
									"name": "PUSH",
									"source": 5,
									"value": "80"
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "PUSH",
									"source": 5,
									"value": "40"
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "MSTORE",
									"source": 5
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "CALLVALUE",
									"source": 5
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "ISZERO",
									"source": 5
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "PUSH [tag]",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "JUMPI",
									"source": 5
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "REVERT",
									"source": 5
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "tag",
									"source": 5,
									"value": "1"
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "JUMPDEST",
									"source": 5
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "POP",
									"source": 5
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "PUSH #[$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "DUP1",
									"source": 5
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "PUSH [$]",
									"source": 5,
									"value": "0000000000000000000000000000000000000000000000000000000000000000"
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "CODECOPY",
									"source": 5
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "PUSH",
									"source": 5,
									"value": "0"
								},
								{
									"begin": 3843,
									"end": 4153,
									"name": "RETURN",
									"source": 5
								}
							],
							".data": {
								"0": {
									".auxdata": "a264697066735822122061359dc6a380265c373c98a32940e78e174ee38c016b90159a7692012a0f511264736f6c63430008110033",
									".code": [
										{
											"begin": 3843,
											"end": 4153,
											"name": "PUSH",
											"source": 5,
											"value": "80"
										},
										{
											"begin": 3843,
											"end": 4153,
											"name": "PUSH",
											"source": 5,
											"value": "40"
										},
										{
											"begin": 3843,
											"end": 4153,
											"name": "MSTORE",
											"source": 5
										},
										{
											"begin": 3843,
											"end": 4153,
											"name": "PUSH",
											"source": 5,
											"value": "0"
										},
										{
											"begin": 3843,
											"end": 4153,
											"name": "DUP1",
											"source": 5
										},
										{
											"begin": 3843,
											"end": 4153,
											"name": "REVERT",
											"source": 5
										}
									]
								}
							},
							"sourceList": [
								"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
								"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
								"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
								"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol",
								"contracts t-rex/registry/interface/IClaimTopicsRegistry.sol",
								"contracts t-rex/registry/storage/CTRStorage.sol",
								"#utility.yul"
							]
						},
						"methodIdentifiers": {}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"stateVariables\":{\"__gap\":{\"details\":\"This empty reserved space is put in place to allow future versions to add new variables without shifting down storage in the inheritance chain.\"},\"_claimTopics\":{\"details\":\"All required Claim Topics\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts t-rex/registry/storage/CTRStorage.sol\":\"CTRStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts t-rex/registry/storage/CTRStorage.sol\":{\"keccak256\":\"0xee2fc57419e8455c167ae9dbbca946b16456353161933f94fb9403beaf06a95b\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://59a52f39f953cf35f2e6d2036e97a657be534d7131f10901c434e542aa643fd7\",\"dweb:/ipfs/QmYRTVatp8oqBUjU4Kah8ZmRnjo1EJ8V7qJFowbJJ117dB\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [
							{
								"astId": 667,
								"contract": "contracts t-rex/registry/storage/CTRStorage.sol:CTRStorage",
								"label": "_claimTopics",
								"offset": 0,
								"slot": "0",
								"type": "t_array(t_uint256)dyn_storage"
							},
							{
								"astId": 672,
								"contract": "contracts t-rex/registry/storage/CTRStorage.sol:CTRStorage",
								"label": "__gap",
								"offset": 0,
								"slot": "1",
								"type": "t_array(t_uint256)49_storage"
							}
						],
						"types": {
							"t_array(t_uint256)49_storage": {
								"base": "t_uint256",
								"encoding": "inplace",
								"label": "uint256[49]",
								"numberOfBytes": "1568"
							},
							"t_array(t_uint256)dyn_storage": {
								"base": "t_uint256",
								"encoding": "dynamic_array",
								"label": "uint256[]",
								"numberOfBytes": "32"
							},
							"t_uint256": {
								"encoding": "inplace",
								"label": "uint256",
								"numberOfBytes": "32"
							}
						}
					},
					"userdoc": {
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							488
						],
						"OwnableUpgradeable": [
							189
						]
					},
					"id": 190,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "102:24:0"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
							"file": "../utils/ContextUpgradeable.sol",
							"id": 3,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 190,
							"sourceUnit": 489,
							"src": "128:67:0",
							"symbolAliases": [
								{
									"foreign": {
										"id": 2,
										"name": "ContextUpgradeable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 488,
										"src": "136:18:0",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 5,
										"name": "ContextUpgradeable",
										"nameLocations": [
											"814:18:0"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 488,
										"src": "814:18:0"
									},
									"id": 6,
									"nodeType": "InheritanceSpecifier",
									"src": "814:18:0"
								}
							],
							"canonicalName": "OwnableUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 4,
								"nodeType": "StructuredDocumentation",
								"src": "285:487:0",
								"text": " @dev Contract module which provides a basic access control mechanism, where\n there is an account (an owner) that can be granted exclusive access to\n specific functions.\n The initial owner is set to the address provided by the deployer. This can\n later be changed with {transferOwnership}.\n This module is used through inheritance. It will make available the modifier\n `onlyOwner`, which can be applied to your functions to restrict their use to\n the owner."
							},
							"fullyImplemented": true,
							"id": 189,
							"linearizedBaseContracts": [
								189,
								488,
								442
							],
							"name": "OwnableUpgradeable",
							"nameLocation": "791:18:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "OwnableUpgradeable.OwnableStorage",
									"id": 9,
									"members": [
										{
											"constant": false,
											"id": 8,
											"mutability": "mutable",
											"name": "_owner",
											"nameLocation": "949:6:0",
											"nodeType": "VariableDeclaration",
											"scope": 9,
											"src": "941:14:0",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_address",
												"typeString": "address"
											},
											"typeName": {
												"id": 7,
												"name": "address",
												"nodeType": "ElementaryTypeName",
												"src": "941:7:0",
												"stateMutability": "nonpayable",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "OwnableStorage",
									"nameLocation": "916:14:0",
									"nodeType": "StructDefinition",
									"scope": 189,
									"src": "909:53:0",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 12,
									"mutability": "constant",
									"name": "OwnableStorageLocation",
									"nameLocation": "1104:22:0",
									"nodeType": "VariableDeclaration",
									"scope": 189,
									"src": "1079:116:0",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 10,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "1079:7:0",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307839303136643039643732643430666461653266643863656163366236323334633737303632313466643339633163643165363039613035323863313939333030",
										"id": 11,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "1129:66:0",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_65173360639460082030725920392146925864023520599682862633725751242436743107328_by_1",
											"typeString": "int_const 6517...(69 digits omitted)...7328"
										},
										"value": "0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300"
									},
									"visibility": "private"
								},
								{
									"body": {
										"id": 19,
										"nodeType": "Block",
										"src": "1280:81:0",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "1299:56:0",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "1313:32:0",
															"value": {
																"name": "OwnableStorageLocation",
																"nodeType": "YulIdentifier",
																"src": "1323:22:0"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nodeType": "YulIdentifier",
																	"src": "1313:6:0"
																}
															]
														}
													]
												},
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 16,
														"isOffset": false,
														"isSlot": true,
														"src": "1313:6:0",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 12,
														"isOffset": false,
														"isSlot": false,
														"src": "1323:22:0",
														"valueSize": 1
													}
												],
												"id": 18,
												"nodeType": "InlineAssembly",
												"src": "1290:65:0"
											}
										]
									},
									"id": 20,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getOwnableStorage",
									"nameLocation": "1211:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 13,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1229:2:0"
									},
									"returnParameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 16,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "1277:1:0",
												"nodeType": "VariableDeclaration",
												"scope": 20,
												"src": "1254:24:0",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_OwnableStorage_$9_storage_ptr",
													"typeString": "struct OwnableUpgradeable.OwnableStorage"
												},
												"typeName": {
													"id": 15,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 14,
														"name": "OwnableStorage",
														"nameLocations": [
															"1254:14:0"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 9,
														"src": "1254:14:0"
													},
													"referencedDeclaration": 9,
													"src": "1254:14:0",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$9_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1253:26:0"
									},
									"scope": 189,
									"src": "1202:159:0",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 21,
										"nodeType": "StructuredDocumentation",
										"src": "1367:85:0",
										"text": " @dev The caller account is not authorized to perform an operation."
									},
									"errorSelector": "118cdaa7",
									"id": 25,
									"name": "OwnableUnauthorizedAccount",
									"nameLocation": "1463:26:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 24,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 23,
												"mutability": "mutable",
												"name": "account",
												"nameLocation": "1498:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 25,
												"src": "1490:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 22,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1490:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1489:17:0"
									},
									"src": "1457:50:0"
								},
								{
									"documentation": {
										"id": 26,
										"nodeType": "StructuredDocumentation",
										"src": "1513:82:0",
										"text": " @dev The owner is not a valid owner account. (eg. `address(0)`)"
									},
									"errorSelector": "1e4fbdf7",
									"id": 30,
									"name": "OwnableInvalidOwner",
									"nameLocation": "1606:19:0",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 29,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 28,
												"mutability": "mutable",
												"name": "owner",
												"nameLocation": "1634:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 30,
												"src": "1626:13:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 27,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1626:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1625:15:0"
									},
									"src": "1600:41:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
									"id": 36,
									"name": "OwnershipTransferred",
									"nameLocation": "1653:20:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 35,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 32,
												"indexed": true,
												"mutability": "mutable",
												"name": "previousOwner",
												"nameLocation": "1690:13:0",
												"nodeType": "VariableDeclaration",
												"scope": 36,
												"src": "1674:29:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 31,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1674:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 34,
												"indexed": true,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "1721:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 36,
												"src": "1705:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 33,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1705:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1673:57:0"
									},
									"src": "1647:84:0"
								},
								{
									"body": {
										"id": 48,
										"nodeType": "Block",
										"src": "1929:55:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"id": 45,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 39,
															"src": "1964:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 44,
														"name": "__Ownable_init_unchained",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 76,
														"src": "1939:24:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 46,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "1939:38:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 47,
												"nodeType": "ExpressionStatement",
												"src": "1939:38:0"
											}
										]
									},
									"documentation": {
										"id": 37,
										"nodeType": "StructuredDocumentation",
										"src": "1737:115:0",
										"text": " @dev Initializes the contract setting the address provided by the deployer as the initial owner."
									},
									"id": 49,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 42,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 41,
												"name": "onlyInitializing",
												"nameLocations": [
													"1912:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 351,
												"src": "1912:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "1912:16:0"
										}
									],
									"name": "__Ownable_init",
									"nameLocation": "1866:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 40,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 39,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "1889:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 49,
												"src": "1881:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 38,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1881:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1880:22:0"
									},
									"returnParameters": {
										"id": 43,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1929:0:0"
									},
									"scope": 189,
									"src": "1857:127:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 75,
										"nodeType": "Block",
										"src": "2072:153:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 61,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 56,
														"name": "initialOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 51,
														"src": "2086:12:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 59,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "2110:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 58,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "2102:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 57,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "2102:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 60,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2102:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2086:26:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 70,
												"nodeType": "IfStatement",
												"src": "2082:95:0",
												"trueBody": {
													"id": 69,
													"nodeType": "Block",
													"src": "2114:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 65,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "2163:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 64,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "2155:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 63,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "2155:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 66,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2155:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 62,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 30,
																	"src": "2135:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 67,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2135:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 68,
															"nodeType": "RevertStatement",
															"src": "2128:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 72,
															"name": "initialOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 51,
															"src": "2205:12:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 71,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 188,
														"src": "2186:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 73,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2186:32:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 74,
												"nodeType": "ExpressionStatement",
												"src": "2186:32:0"
											}
										]
									},
									"id": 76,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 54,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 53,
												"name": "onlyInitializing",
												"nameLocations": [
													"2055:16:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 351,
												"src": "2055:16:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "2055:16:0"
										}
									],
									"name": "__Ownable_init_unchained",
									"nameLocation": "1999:24:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 52,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 51,
												"mutability": "mutable",
												"name": "initialOwner",
												"nameLocation": "2032:12:0",
												"nodeType": "VariableDeclaration",
												"scope": 76,
												"src": "2024:20:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 50,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2024:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2023:22:0"
									},
									"returnParameters": {
										"id": 55,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2072:0:0"
									},
									"scope": 189,
									"src": "1990:235:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 83,
										"nodeType": "Block",
										"src": "2334:41:0",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 79,
														"name": "_checkOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 117,
														"src": "2344:11:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 80,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2344:13:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 81,
												"nodeType": "ExpressionStatement",
												"src": "2344:13:0"
											},
											{
												"id": 82,
												"nodeType": "PlaceholderStatement",
												"src": "2367:1:0"
											}
										]
									},
									"documentation": {
										"id": 77,
										"nodeType": "StructuredDocumentation",
										"src": "2231:77:0",
										"text": " @dev Throws if called by any account other than the owner."
									},
									"id": 84,
									"name": "onlyOwner",
									"nameLocation": "2322:9:0",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2331:2:0"
									},
									"src": "2313:62:0",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 99,
										"nodeType": "Block",
										"src": "2506:89:0",
										"statements": [
											{
												"assignments": [
													92
												],
												"declarations": [
													{
														"constant": false,
														"id": 92,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "2539:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 99,
														"src": "2516:24:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$9_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 91,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 90,
																"name": "OwnableStorage",
																"nameLocations": [
																	"2516:14:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 9,
																"src": "2516:14:0"
															},
															"referencedDeclaration": 9,
															"src": "2516:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$9_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 95,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 93,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "2543:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$9_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 94,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "2543:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$9_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "2516:47:0"
											},
											{
												"expression": {
													"expression": {
														"id": 96,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 92,
														"src": "2580:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$9_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 97,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "2582:6:0",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 8,
													"src": "2580:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 89,
												"id": 98,
												"nodeType": "Return",
												"src": "2573:15:0"
											}
										]
									},
									"documentation": {
										"id": 85,
										"nodeType": "StructuredDocumentation",
										"src": "2381:65:0",
										"text": " @dev Returns the address of the current owner."
									},
									"functionSelector": "8da5cb5b",
									"id": 100,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "owner",
									"nameLocation": "2460:5:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 86,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2465:2:0"
									},
									"returnParameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 100,
												"src": "2497:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 87,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2497:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2496:9:0"
									},
									"scope": 189,
									"src": "2451:144:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 116,
										"nodeType": "Block",
										"src": "2713:117:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 108,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 104,
															"name": "owner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 100,
															"src": "2727:5:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 105,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2727:7:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 106,
															"name": "_msgSender",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 470,
															"src": "2738:10:0",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																"typeString": "function () view returns (address)"
															}
														},
														"id": 107,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "2738:12:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "2727:23:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 115,
												"nodeType": "IfStatement",
												"src": "2723:101:0",
												"trueBody": {
													"id": 114,
													"nodeType": "Block",
													"src": "2752:72:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [],
																		"expression": {
																			"argumentTypes": [],
																			"id": 110,
																			"name": "_msgSender",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 470,
																			"src": "2800:10:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
																				"typeString": "function () view returns (address)"
																			}
																		},
																		"id": 111,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "2800:12:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 109,
																	"name": "OwnableUnauthorizedAccount",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 25,
																	"src": "2773:26:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 112,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "2773:40:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 113,
															"nodeType": "RevertStatement",
															"src": "2766:47:0"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 101,
										"nodeType": "StructuredDocumentation",
										"src": "2601:62:0",
										"text": " @dev Throws if the sender is not the owner."
									},
									"id": 117,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkOwner",
									"nameLocation": "2677:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 102,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2688:2:0"
									},
									"returnParameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "2713:0:0"
									},
									"scope": 189,
									"src": "2668:162:0",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 130,
										"nodeType": "Block",
										"src": "3219:47:0",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"arguments": [
																{
																	"hexValue": "30",
																	"id": 126,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "number",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "3256:1:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	},
																	"value": "0"
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_rational_0_by_1",
																		"typeString": "int_const 0"
																	}
																],
																"id": 125,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"lValueRequested": false,
																"nodeType": "ElementaryTypeNameExpression",
																"src": "3248:7:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_type$_t_address_$",
																	"typeString": "type(address)"
																},
																"typeName": {
																	"id": 124,
																	"name": "address",
																	"nodeType": "ElementaryTypeName",
																	"src": "3248:7:0",
																	"typeDescriptions": {}
																}
															},
															"id": 127,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "typeConversion",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "3248:10:0",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 123,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 188,
														"src": "3229:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 128,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3229:30:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 129,
												"nodeType": "ExpressionStatement",
												"src": "3229:30:0"
											}
										]
									},
									"documentation": {
										"id": 118,
										"nodeType": "StructuredDocumentation",
										"src": "2836:324:0",
										"text": " @dev Leaves the contract without owner. It will not be possible to call\n `onlyOwner` functions. Can only be called by the current owner.\n NOTE: Renouncing ownership will leave the contract without an owner,\n thereby disabling any functionality that is only available to the owner."
									},
									"functionSelector": "715018a6",
									"id": 131,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 121,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 120,
												"name": "onlyOwner",
												"nameLocations": [
													"3209:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 84,
												"src": "3209:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "3209:9:0"
										}
									],
									"name": "renounceOwnership",
									"nameLocation": "3174:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 119,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3191:2:0"
									},
									"returnParameters": {
										"id": 122,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3219:0:0"
									},
									"scope": 189,
									"src": "3165:101:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 158,
										"nodeType": "Block",
										"src": "3485:145:0",
										"statements": [
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													},
													"id": 144,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 139,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 134,
														"src": "3499:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "==",
													"rightExpression": {
														"arguments": [
															{
																"hexValue": "30",
																"id": 142,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "3519:1:0",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																},
																"value": "0"
															}
														],
														"expression": {
															"argumentTypes": [
																{
																	"typeIdentifier": "t_rational_0_by_1",
																	"typeString": "int_const 0"
																}
															],
															"id": 141,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"lValueRequested": false,
															"nodeType": "ElementaryTypeNameExpression",
															"src": "3511:7:0",
															"typeDescriptions": {
																"typeIdentifier": "t_type$_t_address_$",
																"typeString": "type(address)"
															},
															"typeName": {
																"id": 140,
																"name": "address",
																"nodeType": "ElementaryTypeName",
																"src": "3511:7:0",
																"typeDescriptions": {}
															}
														},
														"id": 143,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "typeConversion",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "3511:10:0",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3499:22:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 153,
												"nodeType": "IfStatement",
												"src": "3495:91:0",
												"trueBody": {
													"id": 152,
													"nodeType": "Block",
													"src": "3523:63:0",
													"statements": [
														{
															"errorCall": {
																"arguments": [
																	{
																		"arguments": [
																			{
																				"hexValue": "30",
																				"id": 148,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"kind": "number",
																				"lValueRequested": false,
																				"nodeType": "Literal",
																				"src": "3572:1:0",
																				"typeDescriptions": {
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				},
																				"value": "0"
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_rational_0_by_1",
																					"typeString": "int_const 0"
																				}
																			],
																			"id": 147,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"lValueRequested": false,
																			"nodeType": "ElementaryTypeNameExpression",
																			"src": "3564:7:0",
																			"typeDescriptions": {
																				"typeIdentifier": "t_type$_t_address_$",
																				"typeString": "type(address)"
																			},
																			"typeName": {
																				"id": 146,
																				"name": "address",
																				"nodeType": "ElementaryTypeName",
																				"src": "3564:7:0",
																				"typeDescriptions": {}
																			}
																		},
																		"id": 149,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "typeConversion",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "3564:10:0",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_address",
																			"typeString": "address"
																		}
																	],
																	"id": 145,
																	"name": "OwnableInvalidOwner",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 30,
																	"src": "3544:19:0",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$_t_address_$returns$__$",
																		"typeString": "function (address) pure"
																	}
																},
																"id": 150,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "3544:31:0",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 151,
															"nodeType": "RevertStatement",
															"src": "3537:38:0"
														}
													]
												}
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 155,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 134,
															"src": "3614:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 154,
														"name": "_transferOwnership",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 188,
														"src": "3595:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 156,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3595:28:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 157,
												"nodeType": "ExpressionStatement",
												"src": "3595:28:0"
											}
										]
									},
									"documentation": {
										"id": 132,
										"nodeType": "StructuredDocumentation",
										"src": "3272:138:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Can only be called by the current owner."
									},
									"functionSelector": "f2fde38b",
									"id": 159,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 137,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 136,
												"name": "onlyOwner",
												"nameLocations": [
													"3475:9:0"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 84,
												"src": "3475:9:0"
											},
											"nodeType": "ModifierInvocation",
											"src": "3475:9:0"
										}
									],
									"name": "transferOwnership",
									"nameLocation": "3424:17:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 135,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 134,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3450:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 159,
												"src": "3442:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 133,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3442:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3441:18:0"
									},
									"returnParameters": {
										"id": 138,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3485:0:0"
									},
									"scope": 189,
									"src": "3415:215:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "public"
								},
								{
									"body": {
										"id": 187,
										"nodeType": "Block",
										"src": "3847:185:0",
										"statements": [
											{
												"assignments": [
													167
												],
												"declarations": [
													{
														"constant": false,
														"id": 167,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "3880:1:0",
														"nodeType": "VariableDeclaration",
														"scope": 187,
														"src": "3857:24:0",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$9_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage"
														},
														"typeName": {
															"id": 166,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 165,
																"name": "OwnableStorage",
																"nameLocations": [
																	"3857:14:0"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 9,
																"src": "3857:14:0"
															},
															"referencedDeclaration": 9,
															"src": "3857:14:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$9_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 170,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 168,
														"name": "_getOwnableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 20,
														"src": "3884:18:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_OwnableStorage_$9_storage_ptr_$",
															"typeString": "function () pure returns (struct OwnableUpgradeable.OwnableStorage storage pointer)"
														}
													},
													"id": 169,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3884:20:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_OwnableStorage_$9_storage_ptr",
														"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3857:47:0"
											},
											{
												"assignments": [
													172
												],
												"declarations": [
													{
														"constant": false,
														"id": 172,
														"mutability": "mutable",
														"name": "oldOwner",
														"nameLocation": "3922:8:0",
														"nodeType": "VariableDeclaration",
														"scope": 187,
														"src": "3914:16:0",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														},
														"typeName": {
															"id": 171,
															"name": "address",
															"nodeType": "ElementaryTypeName",
															"src": "3914:7:0",
															"stateMutability": "nonpayable",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 175,
												"initialValue": {
													"expression": {
														"id": 173,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 167,
														"src": "3933:1:0",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_OwnableStorage_$9_storage_ptr",
															"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
														}
													},
													"id": 174,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "3935:6:0",
													"memberName": "_owner",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 8,
													"src": "3933:8:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "3914:27:0"
											},
											{
												"expression": {
													"id": 180,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 176,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 167,
															"src": "3951:1:0",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_OwnableStorage_$9_storage_ptr",
																"typeString": "struct OwnableUpgradeable.OwnableStorage storage pointer"
															}
														},
														"id": 178,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "3953:6:0",
														"memberName": "_owner",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 8,
														"src": "3951:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 179,
														"name": "newOwner",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 162,
														"src": "3962:8:0",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"src": "3951:19:0",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"id": 181,
												"nodeType": "ExpressionStatement",
												"src": "3951:19:0"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 183,
															"name": "oldOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 172,
															"src": "4006:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														},
														{
															"id": 184,
															"name": "newOwner",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 162,
															"src": "4016:8:0",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															},
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 182,
														"name": "OwnershipTransferred",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 36,
														"src": "3985:20:0",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
															"typeString": "function (address,address)"
														}
													},
													"id": 185,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "3985:40:0",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 186,
												"nodeType": "EmitStatement",
												"src": "3980:45:0"
											}
										]
									},
									"documentation": {
										"id": 160,
										"nodeType": "StructuredDocumentation",
										"src": "3636:143:0",
										"text": " @dev Transfers ownership of the contract to a new account (`newOwner`).\n Internal function without access restriction."
									},
									"id": 188,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_transferOwnership",
									"nameLocation": "3793:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 163,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 162,
												"mutability": "mutable",
												"name": "newOwner",
												"nameLocation": "3820:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 188,
												"src": "3812:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 161,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3812:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3811:18:0"
									},
									"returnParameters": {
										"id": 164,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3847:0:0"
									},
									"scope": 189,
									"src": "3784:248:0",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 190,
							"src": "773:3261:0",
							"usedErrors": [
								25,
								30,
								205,
								208
							]
						}
					],
					"src": "102:3933:0"
				},
				"id": 0
			},
			"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
					"exportedSymbols": {
						"Initializable": [
							442
						]
					},
					"id": 443,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 191,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "113:24:1"
						},
						{
							"abstract": true,
							"baseContracts": [],
							"canonicalName": "Initializable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 192,
								"nodeType": "StructuredDocumentation",
								"src": "139:2209:1",
								"text": " @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n case an upgrade adds a module that needs to be initialized.\n For example:\n [.hljs-theme-light.nopadding]\n ```solidity\n contract MyToken is ERC20Upgradeable {\n     function initialize() initializer public {\n         __ERC20_init(\"MyToken\", \"MTK\");\n     }\n }\n contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n     function initializeV2() reinitializer(2) public {\n         __ERC20Permit_init(\"MyToken\");\n     }\n }\n ```\n TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n [CAUTION]\n ====\n Avoid leaving a contract uninitialized.\n An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n [.hljs-theme-light.nopadding]\n ```\n /// @custom:oz-upgrades-unsafe-allow constructor\n constructor() {\n     _disableInitializers();\n }\n ```\n ===="
							},
							"fullyImplemented": true,
							"id": 442,
							"linearizedBaseContracts": [
								442
							],
							"name": "Initializable",
							"nameLocation": "2367:13:1",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"canonicalName": "Initializable.InitializableStorage",
									"id": 199,
									"members": [
										{
											"constant": false,
											"id": 195,
											"mutability": "mutable",
											"name": "_initialized",
											"nameLocation": "2820:12:1",
											"nodeType": "VariableDeclaration",
											"scope": 199,
											"src": "2813:19:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_uint64",
												"typeString": "uint64"
											},
											"typeName": {
												"id": 194,
												"name": "uint64",
												"nodeType": "ElementaryTypeName",
												"src": "2813:6:1",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												}
											},
											"visibility": "internal"
										},
										{
											"constant": false,
											"id": 198,
											"mutability": "mutable",
											"name": "_initializing",
											"nameLocation": "2955:13:1",
											"nodeType": "VariableDeclaration",
											"scope": 199,
											"src": "2950:18:1",
											"stateVariable": false,
											"storageLocation": "default",
											"typeDescriptions": {
												"typeIdentifier": "t_bool",
												"typeString": "bool"
											},
											"typeName": {
												"id": 197,
												"name": "bool",
												"nodeType": "ElementaryTypeName",
												"src": "2950:4:1",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												}
											},
											"visibility": "internal"
										}
									],
									"name": "InitializableStorage",
									"nameLocation": "2692:20:1",
									"nodeType": "StructDefinition",
									"scope": 442,
									"src": "2685:290:1",
									"visibility": "public"
								},
								{
									"constant": true,
									"id": 202,
									"mutability": "constant",
									"name": "INITIALIZABLE_STORAGE",
									"nameLocation": "3123:21:1",
									"nodeType": "VariableDeclaration",
									"scope": 442,
									"src": "3098:115:1",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_bytes32",
										"typeString": "bytes32"
									},
									"typeName": {
										"id": 200,
										"name": "bytes32",
										"nodeType": "ElementaryTypeName",
										"src": "3098:7:1",
										"typeDescriptions": {
											"typeIdentifier": "t_bytes32",
											"typeString": "bytes32"
										}
									},
									"value": {
										"hexValue": "307866306335376531363834306466303430663135303838646332663831666533393163333932336265633733653233613936363265666339633232396336613030",
										"id": 201,
										"isConstant": false,
										"isLValue": false,
										"isPure": true,
										"kind": "number",
										"lValueRequested": false,
										"nodeType": "Literal",
										"src": "3147:66:1",
										"typeDescriptions": {
											"typeIdentifier": "t_rational_108904022758810753673719992590105913556127789646572562039383141376366747609600_by_1",
											"typeString": "int_const 1089...(70 digits omitted)...9600"
										},
										"value": "0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00"
									},
									"visibility": "private"
								},
								{
									"documentation": {
										"id": 203,
										"nodeType": "StructuredDocumentation",
										"src": "3220:60:1",
										"text": " @dev The contract is already initialized."
									},
									"errorSelector": "f92ee8a9",
									"id": 205,
									"name": "InvalidInitialization",
									"nameLocation": "3291:21:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 204,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3312:2:1"
									},
									"src": "3285:30:1"
								},
								{
									"documentation": {
										"id": 206,
										"nodeType": "StructuredDocumentation",
										"src": "3321:57:1",
										"text": " @dev The contract is not initializing."
									},
									"errorSelector": "d7e6bcf8",
									"id": 208,
									"name": "NotInitializing",
									"nameLocation": "3389:15:1",
									"nodeType": "ErrorDefinition",
									"parameters": {
										"id": 207,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3404:2:1"
									},
									"src": "3383:24:1"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 209,
										"nodeType": "StructuredDocumentation",
										"src": "3413:90:1",
										"text": " @dev Triggered when the contract has been initialized or reinitialized."
									},
									"eventSelector": "c7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d2",
									"id": 213,
									"name": "Initialized",
									"nameLocation": "3514:11:1",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 212,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 211,
												"indexed": false,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "3533:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 213,
												"src": "3526:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 210,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "3526:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3525:16:1"
									},
									"src": "3508:34:1"
								},
								{
									"body": {
										"id": 295,
										"nodeType": "Block",
										"src": "4092:1081:1",
										"statements": [
											{
												"assignments": [
													218
												],
												"declarations": [
													{
														"constant": false,
														"id": 218,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "4187:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 295,
														"src": "4158:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 217,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 216,
																"name": "InitializableStorage",
																"nameLocations": [
																	"4158:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 199,
																"src": "4158:20:1"
															},
															"referencedDeclaration": 199,
															"src": "4158:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 221,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 219,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 441,
														"src": "4191:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$199_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 220,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4191:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4158:59:1"
											},
											{
												"assignments": [
													223
												],
												"declarations": [
													{
														"constant": false,
														"id": 223,
														"mutability": "mutable",
														"name": "isTopLevelCall",
														"nameLocation": "4284:14:1",
														"nodeType": "VariableDeclaration",
														"scope": 295,
														"src": "4279:19:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 222,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4279:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 227,
												"initialValue": {
													"id": 226,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "4301:16:1",
													"subExpression": {
														"expression": {
															"id": 224,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "4302:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 225,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4304:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 198,
														"src": "4302:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4279:38:1"
											},
											{
												"assignments": [
													229
												],
												"declarations": [
													{
														"constant": false,
														"id": 229,
														"mutability": "mutable",
														"name": "initialized",
														"nameLocation": "4334:11:1",
														"nodeType": "VariableDeclaration",
														"scope": 295,
														"src": "4327:18:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"typeName": {
															"id": 228,
															"name": "uint64",
															"nodeType": "ElementaryTypeName",
															"src": "4327:6:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 232,
												"initialValue": {
													"expression": {
														"id": 230,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 218,
														"src": "4348:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 231,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4350:12:1",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 195,
													"src": "4348:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4327:35:1"
											},
											{
												"assignments": [
													234
												],
												"declarations": [
													{
														"constant": false,
														"id": 234,
														"mutability": "mutable",
														"name": "initialSetup",
														"nameLocation": "4711:12:1",
														"nodeType": "VariableDeclaration",
														"scope": 295,
														"src": "4706:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 233,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4706:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 240,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 239,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 237,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 235,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 229,
															"src": "4726:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 236,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4741:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4726:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 238,
														"name": "isTopLevelCall",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 223,
														"src": "4746:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4726:34:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4706:54:1"
											},
											{
												"assignments": [
													242
												],
												"declarations": [
													{
														"constant": false,
														"id": 242,
														"mutability": "mutable",
														"name": "construction",
														"nameLocation": "4775:12:1",
														"nodeType": "VariableDeclaration",
														"scope": 295,
														"src": "4770:17:1",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"typeName": {
															"id": 241,
															"name": "bool",
															"nodeType": "ElementaryTypeName",
															"src": "4770:4:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 255,
												"initialValue": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 254,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 245,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"id": 243,
															"name": "initialized",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 229,
															"src": "4790:11:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "31",
															"id": 244,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4805:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_1_by_1",
																"typeString": "int_const 1"
															},
															"value": "1"
														},
														"src": "4790:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"id": 253,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"expression": {
																	"arguments": [
																		{
																			"id": 248,
																			"name": "this",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967268,
																			"src": "4818:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_contract$_Initializable_$442",
																				"typeString": "contract Initializable"
																			}
																		}
																	],
																	"expression": {
																		"argumentTypes": [
																			{
																				"typeIdentifier": "t_contract$_Initializable_$442",
																				"typeString": "contract Initializable"
																			}
																		],
																		"id": 247,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"nodeType": "ElementaryTypeNameExpression",
																		"src": "4810:7:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_type$_t_address_$",
																			"typeString": "type(address)"
																		},
																		"typeName": {
																			"id": 246,
																			"name": "address",
																			"nodeType": "ElementaryTypeName",
																			"src": "4810:7:1",
																			"typeDescriptions": {}
																		}
																	},
																	"id": 249,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": false,
																	"kind": "typeConversion",
																	"lValueRequested": false,
																	"nameLocations": [],
																	"names": [],
																	"nodeType": "FunctionCall",
																	"src": "4810:13:1",
																	"tryCall": false,
																	"typeDescriptions": {
																		"typeIdentifier": "t_address",
																		"typeString": "address"
																	}
																},
																"id": 250,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"memberLocation": "4824:4:1",
																"memberName": "code",
																"nodeType": "MemberAccess",
																"src": "4810:18:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bytes_memory_ptr",
																	"typeString": "bytes memory"
																}
															},
															"id": 251,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4829:6:1",
															"memberName": "length",
															"nodeType": "MemberAccess",
															"src": "4810:25:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": "==",
														"rightExpression": {
															"hexValue": "30",
															"id": 252,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "number",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4839:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_rational_0_by_1",
																"typeString": "int_const 0"
															},
															"value": "0"
														},
														"src": "4810:30:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4790:50:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4770:70:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 260,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 257,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4855:13:1",
														"subExpression": {
															"id": 256,
															"name": "initialSetup",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 234,
															"src": "4856:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "&&",
													"rightExpression": {
														"id": 259,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "!",
														"prefix": true,
														"src": "4872:13:1",
														"subExpression": {
															"id": 258,
															"name": "construction",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 242,
															"src": "4873:12:1",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "4855:30:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 265,
												"nodeType": "IfStatement",
												"src": "4851:91:1",
												"trueBody": {
													"id": 264,
													"nodeType": "Block",
													"src": "4887:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 261,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 205,
																	"src": "4908:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 262,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4908:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 263,
															"nodeType": "RevertStatement",
															"src": "4901:30:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 270,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 266,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 218,
															"src": "4951:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 268,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "4953:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 195,
														"src": "4951:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "31",
														"id": 269,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4968:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_1_by_1",
															"typeString": "int_const 1"
														},
														"value": "1"
													},
													"src": "4951:18:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 271,
												"nodeType": "ExpressionStatement",
												"src": "4951:18:1"
											},
											{
												"condition": {
													"id": 272,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 223,
													"src": "4983:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 280,
												"nodeType": "IfStatement",
												"src": "4979:67:1",
												"trueBody": {
													"id": 279,
													"nodeType": "Block",
													"src": "4999:47:1",
													"statements": [
														{
															"expression": {
																"id": 277,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 273,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 218,
																		"src": "5013:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 275,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5015:13:1",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 198,
																	"src": "5013:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "74727565",
																	"id": 276,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5031:4:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "true"
																},
																"src": "5013:22:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 278,
															"nodeType": "ExpressionStatement",
															"src": "5013:22:1"
														}
													]
												}
											},
											{
												"id": 281,
												"nodeType": "PlaceholderStatement",
												"src": "5055:1:1"
											},
											{
												"condition": {
													"id": 282,
													"name": "isTopLevelCall",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 223,
													"src": "5070:14:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 294,
												"nodeType": "IfStatement",
												"src": "5066:101:1",
												"trueBody": {
													"id": 293,
													"nodeType": "Block",
													"src": "5086:81:1",
													"statements": [
														{
															"expression": {
																"id": 287,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 283,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 218,
																		"src": "5100:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 285,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "5102:13:1",
																	"memberName": "_initializing",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 198,
																	"src": "5100:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"hexValue": "66616c7365",
																	"id": 286,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"kind": "bool",
																	"lValueRequested": false,
																	"nodeType": "Literal",
																	"src": "5118:5:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_bool",
																		"typeString": "bool"
																	},
																	"value": "false"
																},
																"src": "5100:23:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 288,
															"nodeType": "ExpressionStatement",
															"src": "5100:23:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"hexValue": "31",
																		"id": 290,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "number",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "5154:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		},
																		"value": "1"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_rational_1_by_1",
																			"typeString": "int_const 1"
																		}
																	],
																	"id": 289,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 213,
																	"src": "5142:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 291,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "5142:14:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 292,
															"nodeType": "EmitStatement",
															"src": "5137:19:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 214,
										"nodeType": "StructuredDocumentation",
										"src": "3548:516:1",
										"text": " @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n `onlyInitializing` functions can be used to initialize parent contracts.\n Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n production.\n Emits an {Initialized} event."
									},
									"id": 296,
									"name": "initializer",
									"nameLocation": "4078:11:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 215,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4089:2:1"
									},
									"src": "4069:1104:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 342,
										"nodeType": "Block",
										"src": "6291:392:1",
										"statements": [
											{
												"assignments": [
													303
												],
												"declarations": [
													{
														"constant": false,
														"id": 303,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "6386:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 342,
														"src": "6357:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 302,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 301,
																"name": "InitializableStorage",
																"nameLocations": [
																	"6357:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 199,
																"src": "6357:20:1"
															},
															"referencedDeclaration": 199,
															"src": "6357:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 306,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 304,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 441,
														"src": "6390:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$199_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 305,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6390:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "6357:59:1"
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													},
													"id": 313,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 307,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "6431:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 308,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "6433:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 198,
														"src": "6431:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "||",
													"rightExpression": {
														"commonType": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														},
														"id": 312,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"leftExpression": {
															"expression": {
																"id": 309,
																"name": "$",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 303,
																"src": "6450:1:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																	"typeString": "struct Initializable.InitializableStorage storage pointer"
																}
															},
															"id": 310,
															"isConstant": false,
															"isLValue": true,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "6452:12:1",
															"memberName": "_initialized",
															"nodeType": "MemberAccess",
															"referencedDeclaration": 195,
															"src": "6450:14:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"nodeType": "BinaryOperation",
														"operator": ">=",
														"rightExpression": {
															"id": 311,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 299,
															"src": "6468:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														},
														"src": "6450:25:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"src": "6431:44:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 318,
												"nodeType": "IfStatement",
												"src": "6427:105:1",
												"trueBody": {
													"id": 317,
													"nodeType": "Block",
													"src": "6477:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 314,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 205,
																	"src": "6498:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 315,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "6498:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 316,
															"nodeType": "RevertStatement",
															"src": "6491:30:1"
														}
													]
												}
											},
											{
												"expression": {
													"id": 323,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 319,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "6541:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 321,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6543:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 195,
														"src": "6541:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"id": 322,
														"name": "version",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 299,
														"src": "6558:7:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "6541:24:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"id": 324,
												"nodeType": "ExpressionStatement",
												"src": "6541:24:1"
											},
											{
												"expression": {
													"id": 329,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 325,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "6575:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 327,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6577:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 198,
														"src": "6575:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "74727565",
														"id": 328,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6593:4:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "true"
													},
													"src": "6575:22:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 330,
												"nodeType": "ExpressionStatement",
												"src": "6575:22:1"
											},
											{
												"id": 331,
												"nodeType": "PlaceholderStatement",
												"src": "6607:1:1"
											},
											{
												"expression": {
													"id": 336,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftHandSide": {
														"expression": {
															"id": 332,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 303,
															"src": "6618:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 334,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": true,
														"memberLocation": "6620:13:1",
														"memberName": "_initializing",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 198,
														"src": "6618:15:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"nodeType": "Assignment",
													"operator": "=",
													"rightHandSide": {
														"hexValue": "66616c7365",
														"id": 335,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "bool",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "6636:5:1",
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														},
														"value": "false"
													},
													"src": "6618:23:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 337,
												"nodeType": "ExpressionStatement",
												"src": "6618:23:1"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 339,
															"name": "version",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 299,
															"src": "6668:7:1",
															"typeDescriptions": {
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint64",
																"typeString": "uint64"
															}
														],
														"id": 338,
														"name": "Initialized",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 213,
														"src": "6656:11:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
															"typeString": "function (uint64)"
														}
													},
													"id": 340,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6656:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 341,
												"nodeType": "EmitStatement",
												"src": "6651:25:1"
											}
										]
									},
									"documentation": {
										"id": 297,
										"nodeType": "StructuredDocumentation",
										"src": "5179:1068:1",
										"text": " @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n used to initialize parent contracts.\n A reinitializer may be used after the original initialization step. This is essential to configure modules that\n are added through upgrades and that require initialization.\n When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n cannot be nested. If one is invoked in the context of another, execution will revert.\n Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n a contract, executing them in the right order is up to the developer or operator.\n WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n Emits an {Initialized} event."
									},
									"id": 343,
									"name": "reinitializer",
									"nameLocation": "6261:13:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 300,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 299,
												"mutability": "mutable",
												"name": "version",
												"nameLocation": "6282:7:1",
												"nodeType": "VariableDeclaration",
												"scope": 343,
												"src": "6275:14:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 298,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "6275:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6274:16:1"
									},
									"src": "6252:431:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 350,
										"nodeType": "Block",
										"src": "6921:48:1",
										"statements": [
											{
												"expression": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 346,
														"name": "_checkInitializing",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 364,
														"src": "6931:18:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_view$__$returns$__$",
															"typeString": "function () view"
														}
													},
													"id": 347,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "6931:20:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 348,
												"nodeType": "ExpressionStatement",
												"src": "6931:20:1"
											},
											{
												"id": 349,
												"nodeType": "PlaceholderStatement",
												"src": "6961:1:1"
											}
										]
									},
									"documentation": {
										"id": 344,
										"nodeType": "StructuredDocumentation",
										"src": "6689:199:1",
										"text": " @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n {initializer} and {reinitializer} modifiers, directly or indirectly."
									},
									"id": 351,
									"name": "onlyInitializing",
									"nameLocation": "6902:16:1",
									"nodeType": "ModifierDefinition",
									"parameters": {
										"id": 345,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6918:2:1"
									},
									"src": "6893:76:1",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 363,
										"nodeType": "Block",
										"src": "7136:89:1",
										"statements": [
											{
												"condition": {
													"id": 357,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"nodeType": "UnaryOperation",
													"operator": "!",
													"prefix": true,
													"src": "7150:18:1",
													"subExpression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 355,
															"name": "_isInitializing",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 432,
															"src": "7151:15:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
																"typeString": "function () view returns (bool)"
															}
														},
														"id": 356,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "7151:17:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_bool",
															"typeString": "bool"
														}
													},
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 362,
												"nodeType": "IfStatement",
												"src": "7146:73:1",
												"trueBody": {
													"id": 361,
													"nodeType": "Block",
													"src": "7170:49:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 358,
																	"name": "NotInitializing",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 208,
																	"src": "7191:15:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 359,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7191:17:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 360,
															"nodeType": "RevertStatement",
															"src": "7184:24:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 352,
										"nodeType": "StructuredDocumentation",
										"src": "6975:104:1",
										"text": " @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}."
									},
									"id": 364,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_checkInitializing",
									"nameLocation": "7093:18:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 353,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7111:2:1"
									},
									"returnParameters": {
										"id": 354,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7136:0:1"
									},
									"scope": 442,
									"src": "7084:141:1",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 409,
										"nodeType": "Block",
										"src": "7760:373:1",
										"statements": [
											{
												"assignments": [
													370
												],
												"declarations": [
													{
														"constant": false,
														"id": 370,
														"mutability": "mutable",
														"name": "$",
														"nameLocation": "7855:1:1",
														"nodeType": "VariableDeclaration",
														"scope": 409,
														"src": "7826:30:1",
														"stateVariable": false,
														"storageLocation": "storage",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage"
														},
														"typeName": {
															"id": 369,
															"nodeType": "UserDefinedTypeName",
															"pathNode": {
																"id": 368,
																"name": "InitializableStorage",
																"nameLocations": [
																	"7826:20:1"
																],
																"nodeType": "IdentifierPath",
																"referencedDeclaration": 199,
																"src": "7826:20:1"
															},
															"referencedDeclaration": 199,
															"src": "7826:20:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 373,
												"initialValue": {
													"arguments": [],
													"expression": {
														"argumentTypes": [],
														"id": 371,
														"name": "_getInitializableStorage",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 441,
														"src": "7859:24:1",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$199_storage_ptr_$",
															"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
														}
													},
													"id": 372,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "7859:26:1",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage storage pointer"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "7826:59:1"
											},
											{
												"condition": {
													"expression": {
														"id": 374,
														"name": "$",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 370,
														"src": "7900:1:1",
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 375,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "7902:13:1",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 198,
													"src": "7900:15:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 380,
												"nodeType": "IfStatement",
												"src": "7896:76:1",
												"trueBody": {
													"id": 379,
													"nodeType": "Block",
													"src": "7917:55:1",
													"statements": [
														{
															"errorCall": {
																"arguments": [],
																"expression": {
																	"argumentTypes": [],
																	"id": 376,
																	"name": "InvalidInitialization",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 205,
																	"src": "7938:21:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_error_pure$__$returns$__$",
																		"typeString": "function () pure"
																	}
																},
																"id": 377,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "7938:23:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 378,
															"nodeType": "RevertStatement",
															"src": "7931:30:1"
														}
													]
												}
											},
											{
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													},
													"id": 388,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"expression": {
															"id": 381,
															"name": "$",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 370,
															"src": "7985:1:1",
															"typeDescriptions": {
																"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																"typeString": "struct Initializable.InitializableStorage storage pointer"
															}
														},
														"id": 382,
														"isConstant": false,
														"isLValue": true,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "7987:12:1",
														"memberName": "_initialized",
														"nodeType": "MemberAccess",
														"referencedDeclaration": 195,
														"src": "7985:14:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "!=",
													"rightExpression": {
														"expression": {
															"arguments": [
																{
																	"id": 385,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"nodeType": "ElementaryTypeNameExpression",
																	"src": "8008:6:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	},
																	"typeName": {
																		"id": 384,
																		"name": "uint64",
																		"nodeType": "ElementaryTypeName",
																		"src": "8008:6:1",
																		"typeDescriptions": {}
																	}
																}
															],
															"expression": {
																"argumentTypes": [
																	{
																		"typeIdentifier": "t_type$_t_uint64_$",
																		"typeString": "type(uint64)"
																	}
																],
																"id": 383,
																"name": "type",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967269,
																"src": "8003:4:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																	"typeString": "function () pure"
																}
															},
															"id": 386,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "functionCall",
															"lValueRequested": false,
															"nameLocations": [],
															"names": [],
															"nodeType": "FunctionCall",
															"src": "8003:12:1",
															"tryCall": false,
															"typeDescriptions": {
																"typeIdentifier": "t_magic_meta_type_t_uint64",
																"typeString": "type(uint64)"
															}
														},
														"id": 387,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"lValueRequested": false,
														"memberLocation": "8016:3:1",
														"memberName": "max",
														"nodeType": "MemberAccess",
														"src": "8003:16:1",
														"typeDescriptions": {
															"typeIdentifier": "t_uint64",
															"typeString": "uint64"
														}
													},
													"src": "7985:34:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 408,
												"nodeType": "IfStatement",
												"src": "7981:146:1",
												"trueBody": {
													"id": 407,
													"nodeType": "Block",
													"src": "8021:106:1",
													"statements": [
														{
															"expression": {
																"id": 397,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftHandSide": {
																	"expression": {
																		"id": 389,
																		"name": "$",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 370,
																		"src": "8035:1:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
																			"typeString": "struct Initializable.InitializableStorage storage pointer"
																		}
																	},
																	"id": 391,
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": true,
																	"memberLocation": "8037:12:1",
																	"memberName": "_initialized",
																	"nodeType": "MemberAccess",
																	"referencedDeclaration": 195,
																	"src": "8035:14:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"nodeType": "Assignment",
																"operator": "=",
																"rightHandSide": {
																	"expression": {
																		"arguments": [
																			{
																				"id": 394,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": true,
																				"lValueRequested": false,
																				"nodeType": "ElementaryTypeNameExpression",
																				"src": "8057:6:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				},
																				"typeName": {
																					"id": 393,
																					"name": "uint64",
																					"nodeType": "ElementaryTypeName",
																					"src": "8057:6:1",
																					"typeDescriptions": {}
																				}
																			}
																		],
																		"expression": {
																			"argumentTypes": [
																				{
																					"typeIdentifier": "t_type$_t_uint64_$",
																					"typeString": "type(uint64)"
																				}
																			],
																			"id": 392,
																			"name": "type",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 4294967269,
																			"src": "8052:4:1",
																			"typeDescriptions": {
																				"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																				"typeString": "function () pure"
																			}
																		},
																		"id": 395,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "functionCall",
																		"lValueRequested": false,
																		"nameLocations": [],
																		"names": [],
																		"nodeType": "FunctionCall",
																		"src": "8052:12:1",
																		"tryCall": false,
																		"typeDescriptions": {
																			"typeIdentifier": "t_magic_meta_type_t_uint64",
																			"typeString": "type(uint64)"
																		}
																	},
																	"id": 396,
																	"isConstant": false,
																	"isLValue": false,
																	"isPure": true,
																	"lValueRequested": false,
																	"memberLocation": "8065:3:1",
																	"memberName": "max",
																	"nodeType": "MemberAccess",
																	"src": "8052:16:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint64",
																		"typeString": "uint64"
																	}
																},
																"src": "8035:33:1",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint64",
																	"typeString": "uint64"
																}
															},
															"id": 398,
															"nodeType": "ExpressionStatement",
															"src": "8035:33:1"
														},
														{
															"eventCall": {
																"arguments": [
																	{
																		"expression": {
																			"arguments": [
																				{
																					"id": 402,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": true,
																					"lValueRequested": false,
																					"nodeType": "ElementaryTypeNameExpression",
																					"src": "8104:6:1",
																					"typeDescriptions": {
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					},
																					"typeName": {
																						"id": 401,
																						"name": "uint64",
																						"nodeType": "ElementaryTypeName",
																						"src": "8104:6:1",
																						"typeDescriptions": {}
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_type$_t_uint64_$",
																						"typeString": "type(uint64)"
																					}
																				],
																				"id": 400,
																				"name": "type",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 4294967269,
																				"src": "8099:4:1",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_metatype_pure$__$returns$__$",
																					"typeString": "function () pure"
																				}
																			},
																			"id": 403,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": true,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "8099:12:1",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_magic_meta_type_t_uint64",
																				"typeString": "type(uint64)"
																			}
																		},
																		"id": 404,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"lValueRequested": false,
																		"memberLocation": "8112:3:1",
																		"memberName": "max",
																		"nodeType": "MemberAccess",
																		"src": "8099:16:1",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_uint64",
																			"typeString": "uint64"
																		}
																	],
																	"id": 399,
																	"name": "Initialized",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 213,
																	"src": "8087:11:1",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_event_nonpayable$_t_uint64_$returns$__$",
																		"typeString": "function (uint64)"
																	}
																},
																"id": 405,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "8087:29:1",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 406,
															"nodeType": "EmitStatement",
															"src": "8082:34:1"
														}
													]
												}
											}
										]
									},
									"documentation": {
										"id": 365,
										"nodeType": "StructuredDocumentation",
										"src": "7231:475:1",
										"text": " @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n through proxies.\n Emits an {Initialized} event the first time it is successfully executed."
									},
									"id": 410,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_disableInitializers",
									"nameLocation": "7720:20:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 366,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7740:2:1"
									},
									"returnParameters": {
										"id": 367,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "7760:0:1"
									},
									"scope": 442,
									"src": "7711:422:1",
									"stateMutability": "nonpayable",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 420,
										"nodeType": "Block",
										"src": "8308:63:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 416,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "8325:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$199_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 417,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8325:26:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 418,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8352:12:1",
													"memberName": "_initialized",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 195,
													"src": "8325:39:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"functionReturnParameters": 415,
												"id": 419,
												"nodeType": "Return",
												"src": "8318:46:1"
											}
										]
									},
									"documentation": {
										"id": 411,
										"nodeType": "StructuredDocumentation",
										"src": "8139:99:1",
										"text": " @dev Returns the highest version that has been initialized. See {reinitializer}."
									},
									"id": 421,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializedVersion",
									"nameLocation": "8252:22:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 412,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8274:2:1"
									},
									"returnParameters": {
										"id": 415,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 414,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 421,
												"src": "8300:6:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint64",
													"typeString": "uint64"
												},
												"typeName": {
													"id": 413,
													"name": "uint64",
													"nodeType": "ElementaryTypeName",
													"src": "8300:6:1",
													"typeDescriptions": {
														"typeIdentifier": "t_uint64",
														"typeString": "uint64"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8299:8:1"
									},
									"scope": 442,
									"src": "8243:128:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 431,
										"nodeType": "Block",
										"src": "8543:64:1",
										"statements": [
											{
												"expression": {
													"expression": {
														"arguments": [],
														"expression": {
															"argumentTypes": [],
															"id": 427,
															"name": "_getInitializableStorage",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 441,
															"src": "8560:24:1",
															"typeDescriptions": {
																"typeIdentifier": "t_function_internal_pure$__$returns$_t_struct$_InitializableStorage_$199_storage_ptr_$",
																"typeString": "function () pure returns (struct Initializable.InitializableStorage storage pointer)"
															}
														},
														"id": 428,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"kind": "functionCall",
														"lValueRequested": false,
														"nameLocations": [],
														"names": [],
														"nodeType": "FunctionCall",
														"src": "8560:26:1",
														"tryCall": false,
														"typeDescriptions": {
															"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
															"typeString": "struct Initializable.InitializableStorage storage pointer"
														}
													},
													"id": 429,
													"isConstant": false,
													"isLValue": true,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "8587:13:1",
													"memberName": "_initializing",
													"nodeType": "MemberAccess",
													"referencedDeclaration": 198,
													"src": "8560:40:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"functionReturnParameters": 426,
												"id": 430,
												"nodeType": "Return",
												"src": "8553:47:1"
											}
										]
									},
									"documentation": {
										"id": 422,
										"nodeType": "StructuredDocumentation",
										"src": "8377:105:1",
										"text": " @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}."
									},
									"id": 432,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_isInitializing",
									"nameLocation": "8496:15:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 423,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8511:2:1"
									},
									"returnParameters": {
										"id": 426,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 425,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 432,
												"src": "8537:4:1",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 424,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "8537:4:1",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8536:6:1"
									},
									"scope": 442,
									"src": "8487:120:1",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 440,
										"nodeType": "Block",
										"src": "8827:80:1",
										"statements": [
											{
												"AST": {
													"nodeType": "YulBlock",
													"src": "8846:55:1",
													"statements": [
														{
															"nodeType": "YulAssignment",
															"src": "8860:31:1",
															"value": {
																"name": "INITIALIZABLE_STORAGE",
																"nodeType": "YulIdentifier",
																"src": "8870:21:1"
															},
															"variableNames": [
																{
																	"name": "$.slot",
																	"nodeType": "YulIdentifier",
																	"src": "8860:6:1"
																}
															]
														}
													]
												},
												"evmVersion": "london",
												"externalReferences": [
													{
														"declaration": 437,
														"isOffset": false,
														"isSlot": true,
														"src": "8860:6:1",
														"suffix": "slot",
														"valueSize": 1
													},
													{
														"declaration": 202,
														"isOffset": false,
														"isSlot": false,
														"src": "8870:21:1",
														"valueSize": 1
													}
												],
												"id": 439,
												"nodeType": "InlineAssembly",
												"src": "8837:64:1"
											}
										]
									},
									"documentation": {
										"id": 433,
										"nodeType": "StructuredDocumentation",
										"src": "8613:67:1",
										"text": " @dev Returns a pointer to the storage namespace."
									},
									"id": 441,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_getInitializableStorage",
									"nameLocation": "8746:24:1",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 434,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "8770:2:1"
									},
									"returnParameters": {
										"id": 438,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 437,
												"mutability": "mutable",
												"name": "$",
												"nameLocation": "8824:1:1",
												"nodeType": "VariableDeclaration",
												"scope": 441,
												"src": "8795:30:1",
												"stateVariable": false,
												"storageLocation": "storage",
												"typeDescriptions": {
													"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
													"typeString": "struct Initializable.InitializableStorage"
												},
												"typeName": {
													"id": 436,
													"nodeType": "UserDefinedTypeName",
													"pathNode": {
														"id": 435,
														"name": "InitializableStorage",
														"nameLocations": [
															"8795:20:1"
														],
														"nodeType": "IdentifierPath",
														"referencedDeclaration": 199,
														"src": "8795:20:1"
													},
													"referencedDeclaration": 199,
													"src": "8795:20:1",
													"typeDescriptions": {
														"typeIdentifier": "t_struct$_InitializableStorage_$199_storage_ptr",
														"typeString": "struct Initializable.InitializableStorage"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "8794:32:1"
									},
									"scope": 442,
									"src": "8737:170:1",
									"stateMutability": "pure",
									"virtual": false,
									"visibility": "private"
								}
							],
							"scope": 443,
							"src": "2349:6560:1",
							"usedErrors": [
								205,
								208
							]
						}
					],
					"src": "113:8797:1"
				},
				"id": 1
			},
			"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
				"ast": {
					"absolutePath": "@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol",
					"exportedSymbols": {
						"ContextUpgradeable": [
							488
						],
						"Initializable": [
							442
						]
					},
					"id": 489,
					"license": "MIT",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 444,
							"literals": [
								"solidity",
								"^",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "101:24:2"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol",
							"file": "../proxy/utils/Initializable.sol",
							"id": 446,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 489,
							"sourceUnit": 443,
							"src": "126:63:2",
							"symbolAliases": [
								{
									"foreign": {
										"id": 445,
										"name": "Initializable",
										"nodeType": "Identifier",
										"overloadedDeclarations": [],
										"referencedDeclaration": 442,
										"src": "134:13:2",
										"typeDescriptions": {}
									},
									"nameLocation": "-1:-1:-1"
								}
							],
							"unitAlias": ""
						},
						{
							"abstract": true,
							"baseContracts": [
								{
									"baseName": {
										"id": 448,
										"name": "Initializable",
										"nameLocations": [
											"728:13:2"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 442,
										"src": "728:13:2"
									},
									"id": 449,
									"nodeType": "InheritanceSpecifier",
									"src": "728:13:2"
								}
							],
							"canonicalName": "ContextUpgradeable",
							"contractDependencies": [],
							"contractKind": "contract",
							"documentation": {
								"id": 447,
								"nodeType": "StructuredDocumentation",
								"src": "191:496:2",
								"text": " @dev Provides information about the current execution context, including the\n sender of the transaction and its data. While these are generally available\n via msg.sender and msg.data, they should not be accessed in such a direct\n manner, since when dealing with meta-transactions the account sending and\n paying for execution may not be the actual sender (as far as an application\n is concerned).\n This contract is only required for intermediate, library-like contracts."
							},
							"fullyImplemented": true,
							"id": 488,
							"linearizedBaseContracts": [
								488,
								442
							],
							"name": "ContextUpgradeable",
							"nameLocation": "706:18:2",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 454,
										"nodeType": "Block",
										"src": "800:7:2",
										"statements": []
									},
									"id": 455,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 452,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 451,
												"name": "onlyInitializing",
												"nameLocations": [
													"783:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 351,
												"src": "783:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "783:16:2"
										}
									],
									"name": "__Context_init",
									"nameLocation": "757:14:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 450,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "771:2:2"
									},
									"returnParameters": {
										"id": 453,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "800:0:2"
									},
									"scope": 488,
									"src": "748:59:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 460,
										"nodeType": "Block",
										"src": "875:7:2",
										"statements": []
									},
									"id": 461,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 458,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 457,
												"name": "onlyInitializing",
												"nameLocations": [
													"858:16:2"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 351,
												"src": "858:16:2"
											},
											"nodeType": "ModifierInvocation",
											"src": "858:16:2"
										}
									],
									"name": "__Context_init_unchained",
									"nameLocation": "822:24:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 456,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "846:2:2"
									},
									"returnParameters": {
										"id": 459,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "875:0:2"
									},
									"scope": 488,
									"src": "813:69:2",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 469,
										"nodeType": "Block",
										"src": "949:34:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 466,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "966:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 467,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "970:6:2",
													"memberName": "sender",
													"nodeType": "MemberAccess",
													"src": "966:10:2",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"functionReturnParameters": 465,
												"id": 468,
												"nodeType": "Return",
												"src": "959:17:2"
											}
										]
									},
									"id": 470,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgSender",
									"nameLocation": "896:10:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 462,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "906:2:2"
									},
									"returnParameters": {
										"id": 465,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 464,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 470,
												"src": "940:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 463,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "940:7:2",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "939:9:2"
									},
									"scope": 488,
									"src": "887:96:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 478,
										"nodeType": "Block",
										"src": "1056:32:2",
										"statements": [
											{
												"expression": {
													"expression": {
														"id": 475,
														"name": "msg",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 4294967281,
														"src": "1073:3:2",
														"typeDescriptions": {
															"typeIdentifier": "t_magic_message",
															"typeString": "msg"
														}
													},
													"id": 476,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "1077:4:2",
													"memberName": "data",
													"nodeType": "MemberAccess",
													"src": "1073:8:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_calldata_ptr",
														"typeString": "bytes calldata"
													}
												},
												"functionReturnParameters": 474,
												"id": 477,
												"nodeType": "Return",
												"src": "1066:15:2"
											}
										]
									},
									"id": 479,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_msgData",
									"nameLocation": "998:8:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 471,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1006:2:2"
									},
									"returnParameters": {
										"id": 474,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 473,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 479,
												"src": "1040:14:2",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_bytes_calldata_ptr",
													"typeString": "bytes"
												},
												"typeName": {
													"id": 472,
													"name": "bytes",
													"nodeType": "ElementaryTypeName",
													"src": "1040:5:2",
													"typeDescriptions": {
														"typeIdentifier": "t_bytes_storage_ptr",
														"typeString": "bytes"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1039:16:2"
									},
									"scope": 488,
									"src": "989:99:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								},
								{
									"body": {
										"id": 486,
										"nodeType": "Block",
										"src": "1166:25:2",
										"statements": [
											{
												"expression": {
													"hexValue": "30",
													"id": 484,
													"isConstant": false,
													"isLValue": false,
													"isPure": true,
													"kind": "number",
													"lValueRequested": false,
													"nodeType": "Literal",
													"src": "1183:1:2",
													"typeDescriptions": {
														"typeIdentifier": "t_rational_0_by_1",
														"typeString": "int_const 0"
													},
													"value": "0"
												},
												"functionReturnParameters": 483,
												"id": 485,
												"nodeType": "Return",
												"src": "1176:8:2"
											}
										]
									},
									"id": 487,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "_contextSuffixLength",
									"nameLocation": "1103:20:2",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 480,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "1123:2:2"
									},
									"returnParameters": {
										"id": 483,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 482,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 487,
												"src": "1157:7:2",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 481,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "1157:7:2",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1156:9:2"
									},
									"scope": 488,
									"src": "1094:97:2",
									"stateMutability": "view",
									"virtual": true,
									"visibility": "internal"
								}
							],
							"scope": 489,
							"src": "688:505:2",
							"usedErrors": [
								205,
								208
							]
						}
					],
					"src": "101:1093:2"
				},
				"id": 2
			},
			"contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol": {
				"ast": {
					"absolutePath": "contracts t-rex/registry/implementation/ClaimTopicsRegistry.sol",
					"exportedSymbols": {
						"CTRStorage": [
							673
						],
						"ClaimTopicsRegistry": [
							629
						],
						"ContextUpgradeable": [
							488
						],
						"IClaimTopicsRegistry": [
							661
						],
						"OwnableUpgradeable": [
							189
						]
					},
					"id": 630,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 490,
							"literals": [
								"solidity",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "3817:23:3"
						},
						{
							"absolutePath": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"file": "@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol",
							"id": 491,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 630,
							"sourceUnit": 190,
							"src": "3842:75:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts t-rex/registry/storage/CTRStorage.sol",
							"file": "../storage/CTRStorage.sol",
							"id": 492,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 630,
							"sourceUnit": 674,
							"src": "3918:35:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"absolutePath": "contracts t-rex/registry/interface/IClaimTopicsRegistry.sol",
							"file": "../interface/IClaimTopicsRegistry.sol",
							"id": 493,
							"nameLocation": "-1:-1:-1",
							"nodeType": "ImportDirective",
							"scope": 630,
							"sourceUnit": 662,
							"src": "3954:47:3",
							"symbolAliases": [],
							"unitAlias": ""
						},
						{
							"abstract": false,
							"baseContracts": [
								{
									"baseName": {
										"id": 494,
										"name": "IClaimTopicsRegistry",
										"nameLocations": [
											"4035:20:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 661,
										"src": "4035:20:3"
									},
									"id": 495,
									"nodeType": "InheritanceSpecifier",
									"src": "4035:20:3"
								},
								{
									"baseName": {
										"id": 496,
										"name": "OwnableUpgradeable",
										"nameLocations": [
											"4057:18:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 189,
										"src": "4057:18:3"
									},
									"id": 497,
									"nodeType": "InheritanceSpecifier",
									"src": "4057:18:3"
								},
								{
									"baseName": {
										"id": 498,
										"name": "CTRStorage",
										"nameLocations": [
											"4077:10:3"
										],
										"nodeType": "IdentifierPath",
										"referencedDeclaration": 673,
										"src": "4077:10:3"
									},
									"id": 499,
									"nodeType": "InheritanceSpecifier",
									"src": "4077:10:3"
								}
							],
							"canonicalName": "ClaimTopicsRegistry",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 629,
							"linearizedBaseContracts": [
								629,
								673,
								189,
								488,
								442,
								661
							],
							"name": "ClaimTopicsRegistry",
							"nameLocation": "4012:19:3",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"body": {
										"id": 509,
										"nodeType": "Block",
										"src": "4132:43:3",
										"statements": [
											{
												"expression": {
													"arguments": [
														{
															"expression": {
																"id": 505,
																"name": "msg",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 4294967281,
																"src": "4157:3:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_magic_message",
																	"typeString": "msg"
																}
															},
															"id": 506,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"memberLocation": "4161:6:3",
															"memberName": "sender",
															"nodeType": "MemberAccess",
															"src": "4157:10:3",
															"typeDescriptions": {
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_address",
																"typeString": "address"
															}
														],
														"id": 504,
														"name": "__Ownable_init",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 49,
														"src": "4142:14:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
															"typeString": "function (address)"
														}
													},
													"id": 507,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4142:26:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 508,
												"nodeType": "ExpressionStatement",
												"src": "4142:26:3"
											}
										]
									},
									"functionSelector": "e1c7392a",
									"id": 510,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 502,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 501,
												"name": "initializer",
												"nameLocations": [
													"4120:11:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 296,
												"src": "4120:11:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "4120:11:3"
										}
									],
									"name": "init",
									"nameLocation": "4104:4:3",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 500,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4108:2:3"
									},
									"returnParameters": {
										"id": 503,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4132:0:3"
									},
									"scope": 629,
									"src": "4095:80:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										647
									],
									"body": {
										"id": 562,
										"nodeType": "Block",
										"src": "4324:343:3",
										"statements": [
											{
												"assignments": [
													520
												],
												"declarations": [
													{
														"constant": false,
														"id": 520,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "4342:6:3",
														"nodeType": "VariableDeclaration",
														"scope": 562,
														"src": "4334:14:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 519,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4334:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 523,
												"initialValue": {
													"expression": {
														"id": 521,
														"name": "_claimTopics",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 667,
														"src": "4351:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
															"typeString": "uint256[] storage ref"
														}
													},
													"id": 522,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4364:6:3",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4351:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4334:36:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"commonType": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"id": 527,
															"isConstant": false,
															"isLValue": false,
															"isPure": false,
															"lValueRequested": false,
															"leftExpression": {
																"id": 525,
																"name": "length",
																"nodeType": "Identifier",
																"overloadedDeclarations": [],
																"referencedDeclaration": 520,
																"src": "4388:6:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"nodeType": "BinaryOperation",
															"operator": "<",
															"rightExpression": {
																"hexValue": "3135",
																"id": 526,
																"isConstant": false,
																"isLValue": false,
																"isPure": true,
																"kind": "number",
																"lValueRequested": false,
																"nodeType": "Literal",
																"src": "4397:2:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_rational_15_by_1",
																	"typeString": "int_const 15"
																},
																"value": "15"
															},
															"src": "4388:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															}
														},
														{
															"hexValue": "63616e6e6f742072657175697265206d6f7265207468616e20313520746f70696373",
															"id": 528,
															"isConstant": false,
															"isLValue": false,
															"isPure": true,
															"kind": "string",
															"lValueRequested": false,
															"nodeType": "Literal",
															"src": "4401:36:3",
															"typeDescriptions": {
																"typeIdentifier": "t_stringliteral_c95b5d98a83b544adacac7504a883dc2e549c923cf29f977b923b0b0c6471737",
																"typeString": "literal_string \"cannot require more than 15 topics\""
															},
															"value": "cannot require more than 15 topics"
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_bool",
																"typeString": "bool"
															},
															{
																"typeIdentifier": "t_stringliteral_c95b5d98a83b544adacac7504a883dc2e549c923cf29f977b923b0b0c6471737",
																"typeString": "literal_string \"cannot require more than 15 topics\""
															}
														],
														"id": 524,
														"name": "require",
														"nodeType": "Identifier",
														"overloadedDeclarations": [
															4294967278,
															4294967278
														],
														"referencedDeclaration": 4294967278,
														"src": "4380:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
															"typeString": "function (bool,string memory) pure"
														}
													},
													"id": 529,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4380:58:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 530,
												"nodeType": "ExpressionStatement",
												"src": "4380:58:3"
											},
											{
												"body": {
													"id": 550,
													"nodeType": "Block",
													"src": "4485:93:3",
													"statements": [
														{
															"expression": {
																"arguments": [
																	{
																		"commonType": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		},
																		"id": 546,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": false,
																		"lValueRequested": false,
																		"leftExpression": {
																			"baseExpression": {
																				"id": 542,
																				"name": "_claimTopics",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 667,
																				"src": "4507:12:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																					"typeString": "uint256[] storage ref"
																				}
																			},
																			"id": 544,
																			"indexExpression": {
																				"id": 543,
																				"name": "i",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 532,
																				"src": "4520:1:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"isConstant": false,
																			"isLValue": true,
																			"isPure": false,
																			"lValueRequested": false,
																			"nodeType": "IndexAccess",
																			"src": "4507:15:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"nodeType": "BinaryOperation",
																		"operator": "!=",
																		"rightExpression": {
																			"id": 545,
																			"name": "_claimTopic",
																			"nodeType": "Identifier",
																			"overloadedDeclarations": [],
																			"referencedDeclaration": 513,
																			"src": "4526:11:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"src": "4507:30:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		}
																	},
																	{
																		"hexValue": "636c61696d546f70696320616c726561647920657869737473",
																		"id": 547,
																		"isConstant": false,
																		"isLValue": false,
																		"isPure": true,
																		"kind": "string",
																		"lValueRequested": false,
																		"nodeType": "Literal",
																		"src": "4539:27:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_stringliteral_970f7c3b9fa3869fb7d4b0e156059d6adbba348c21521bbe3230639fa95756e7",
																			"typeString": "literal_string \"claimTopic already exists\""
																		},
																		"value": "claimTopic already exists"
																	}
																],
																"expression": {
																	"argumentTypes": [
																		{
																			"typeIdentifier": "t_bool",
																			"typeString": "bool"
																		},
																		{
																			"typeIdentifier": "t_stringliteral_970f7c3b9fa3869fb7d4b0e156059d6adbba348c21521bbe3230639fa95756e7",
																			"typeString": "literal_string \"claimTopic already exists\""
																		}
																	],
																	"id": 541,
																	"name": "require",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [
																		4294967278,
																		4294967278
																	],
																	"referencedDeclaration": 4294967278,
																	"src": "4499:7:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
																		"typeString": "function (bool,string memory) pure"
																	}
																},
																"id": 548,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"kind": "functionCall",
																"lValueRequested": false,
																"nameLocations": [],
																"names": [],
																"nodeType": "FunctionCall",
																"src": "4499:68:3",
																"tryCall": false,
																"typeDescriptions": {
																	"typeIdentifier": "t_tuple$__$",
																	"typeString": "tuple()"
																}
															},
															"id": 549,
															"nodeType": "ExpressionStatement",
															"src": "4499:68:3"
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 537,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 535,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 532,
														"src": "4468:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 536,
														"name": "length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 520,
														"src": "4472:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4468:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 551,
												"initializationExpression": {
													"assignments": [
														532
													],
													"declarations": [
														{
															"constant": false,
															"id": 532,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4461:1:3",
															"nodeType": "VariableDeclaration",
															"scope": 551,
															"src": "4453:9:3",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 531,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4453:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 534,
													"initialValue": {
														"hexValue": "30",
														"id": 533,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4465:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4453:13:3"
												},
												"loopExpression": {
													"expression": {
														"id": 539,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "4480:3:3",
														"subExpression": {
															"id": 538,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 532,
															"src": "4480:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 540,
													"nodeType": "ExpressionStatement",
													"src": "4480:3:3"
												},
												"nodeType": "ForStatement",
												"src": "4448:130:3"
											},
											{
												"expression": {
													"arguments": [
														{
															"id": 555,
															"name": "_claimTopic",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "4605:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"expression": {
															"id": 552,
															"name": "_claimTopics",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 667,
															"src": "4587:12:3",
															"typeDescriptions": {
																"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																"typeString": "uint256[] storage ref"
															}
														},
														"id": 554,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"memberLocation": "4600:4:3",
														"memberName": "push",
														"nodeType": "MemberAccess",
														"src": "4587:17:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_arraypush_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$_t_uint256_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
															"typeString": "function (uint256[] storage pointer,uint256)"
														}
													},
													"id": 556,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4587:30:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 557,
												"nodeType": "ExpressionStatement",
												"src": "4587:30:3"
											},
											{
												"eventCall": {
													"arguments": [
														{
															"id": 559,
															"name": "_claimTopic",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 513,
															"src": "4648:11:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														}
													],
													"expression": {
														"argumentTypes": [
															{
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														],
														"id": 558,
														"name": "ClaimTopicAdded",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 636,
														"src": "4632:15:3",
														"typeDescriptions": {
															"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
															"typeString": "function (uint256)"
														}
													},
													"id": 560,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"kind": "functionCall",
													"lValueRequested": false,
													"nameLocations": [],
													"names": [],
													"nodeType": "FunctionCall",
													"src": "4632:28:3",
													"tryCall": false,
													"typeDescriptions": {
														"typeIdentifier": "t_tuple$__$",
														"typeString": "tuple()"
													}
												},
												"id": 561,
												"nodeType": "EmitStatement",
												"src": "4627:33:3"
											}
										]
									},
									"documentation": {
										"id": 511,
										"nodeType": "StructuredDocumentation",
										"src": "4181:66:3",
										"text": "  @dev See {IClaimTopicsRegistry-addClaimTopic}."
									},
									"functionSelector": "c7b22551",
									"id": 563,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 517,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 516,
												"name": "onlyOwner",
												"nameLocations": [
													"4314:9:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 84,
												"src": "4314:9:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "4314:9:3"
										}
									],
									"name": "addClaimTopic",
									"nameLocation": "4261:13:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 515,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4305:8:3"
									},
									"parameters": {
										"id": 514,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 513,
												"mutability": "mutable",
												"name": "_claimTopic",
												"nameLocation": "4283:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 563,
												"src": "4275:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 512,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4275:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4274:21:3"
									},
									"returnParameters": {
										"id": 518,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4324:0:3"
									},
									"scope": 629,
									"src": "4252:415:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										653
									],
									"body": {
										"id": 616,
										"nodeType": "Block",
										"src": "4822:346:3",
										"statements": [
											{
												"assignments": [
													573
												],
												"declarations": [
													{
														"constant": false,
														"id": 573,
														"mutability": "mutable",
														"name": "length",
														"nameLocation": "4840:6:3",
														"nodeType": "VariableDeclaration",
														"scope": 616,
														"src": "4832:14:3",
														"stateVariable": false,
														"storageLocation": "default",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														},
														"typeName": {
															"id": 572,
															"name": "uint256",
															"nodeType": "ElementaryTypeName",
															"src": "4832:7:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"visibility": "internal"
													}
												],
												"id": 576,
												"initialValue": {
													"expression": {
														"id": 574,
														"name": "_claimTopics",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 667,
														"src": "4849:12:3",
														"typeDescriptions": {
															"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
															"typeString": "uint256[] storage ref"
														}
													},
													"id": 575,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"memberLocation": "4862:6:3",
													"memberName": "length",
													"nodeType": "MemberAccess",
													"src": "4849:19:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"nodeType": "VariableDeclarationStatement",
												"src": "4832:36:3"
											},
											{
												"body": {
													"id": 614,
													"nodeType": "Block",
													"src": "4915:247:3",
													"statements": [
														{
															"condition": {
																"commonType": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																},
																"id": 591,
																"isConstant": false,
																"isLValue": false,
																"isPure": false,
																"lValueRequested": false,
																"leftExpression": {
																	"baseExpression": {
																		"id": 587,
																		"name": "_claimTopics",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 667,
																		"src": "4933:12:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																			"typeString": "uint256[] storage ref"
																		}
																	},
																	"id": 589,
																	"indexExpression": {
																		"id": 588,
																		"name": "i",
																		"nodeType": "Identifier",
																		"overloadedDeclarations": [],
																		"referencedDeclaration": 578,
																		"src": "4946:1:3",
																		"typeDescriptions": {
																			"typeIdentifier": "t_uint256",
																			"typeString": "uint256"
																		}
																	},
																	"isConstant": false,
																	"isLValue": true,
																	"isPure": false,
																	"lValueRequested": false,
																	"nodeType": "IndexAccess",
																	"src": "4933:15:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"nodeType": "BinaryOperation",
																"operator": "==",
																"rightExpression": {
																	"id": 590,
																	"name": "_claimTopic",
																	"nodeType": "Identifier",
																	"overloadedDeclarations": [],
																	"referencedDeclaration": 566,
																	"src": "4952:11:3",
																	"typeDescriptions": {
																		"typeIdentifier": "t_uint256",
																		"typeString": "uint256"
																	}
																},
																"src": "4933:30:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_bool",
																	"typeString": "bool"
																}
															},
															"id": 613,
															"nodeType": "IfStatement",
															"src": "4929:223:3",
															"trueBody": {
																"id": 612,
																"nodeType": "Block",
																"src": "4965:187:3",
																"statements": [
																	{
																		"expression": {
																			"id": 600,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"lValueRequested": false,
																			"leftHandSide": {
																				"baseExpression": {
																					"id": 592,
																					"name": "_claimTopics",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 667,
																					"src": "4983:12:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																						"typeString": "uint256[] storage ref"
																					}
																				},
																				"id": 594,
																				"indexExpression": {
																					"id": 593,
																					"name": "i",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 578,
																					"src": "4996:1:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": true,
																				"nodeType": "IndexAccess",
																				"src": "4983:15:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"nodeType": "Assignment",
																			"operator": "=",
																			"rightHandSide": {
																				"baseExpression": {
																					"id": 595,
																					"name": "_claimTopics",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 667,
																					"src": "5001:12:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																						"typeString": "uint256[] storage ref"
																					}
																				},
																				"id": 599,
																				"indexExpression": {
																					"commonType": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					},
																					"id": 598,
																					"isConstant": false,
																					"isLValue": false,
																					"isPure": false,
																					"lValueRequested": false,
																					"leftExpression": {
																						"id": 596,
																						"name": "length",
																						"nodeType": "Identifier",
																						"overloadedDeclarations": [],
																						"referencedDeclaration": 573,
																						"src": "5014:6:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_uint256",
																							"typeString": "uint256"
																						}
																					},
																					"nodeType": "BinaryOperation",
																					"operator": "-",
																					"rightExpression": {
																						"hexValue": "31",
																						"id": 597,
																						"isConstant": false,
																						"isLValue": false,
																						"isPure": true,
																						"kind": "number",
																						"lValueRequested": false,
																						"nodeType": "Literal",
																						"src": "5023:1:3",
																						"typeDescriptions": {
																							"typeIdentifier": "t_rational_1_by_1",
																							"typeString": "int_const 1"
																						},
																						"value": "1"
																					},
																					"src": "5014:10:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				},
																				"isConstant": false,
																				"isLValue": true,
																				"isPure": false,
																				"lValueRequested": false,
																				"nodeType": "IndexAccess",
																				"src": "5001:24:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_uint256",
																					"typeString": "uint256"
																				}
																			},
																			"src": "4983:42:3",
																			"typeDescriptions": {
																				"typeIdentifier": "t_uint256",
																				"typeString": "uint256"
																			}
																		},
																		"id": 601,
																		"nodeType": "ExpressionStatement",
																		"src": "4983:42:3"
																	},
																	{
																		"expression": {
																			"arguments": [],
																			"expression": {
																				"argumentTypes": [],
																				"expression": {
																					"id": 602,
																					"name": "_claimTopics",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 667,
																					"src": "5043:12:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
																						"typeString": "uint256[] storage ref"
																					}
																				},
																				"id": 604,
																				"isConstant": false,
																				"isLValue": false,
																				"isPure": false,
																				"lValueRequested": false,
																				"memberLocation": "5056:3:3",
																				"memberName": "pop",
																				"nodeType": "MemberAccess",
																				"src": "5043:16:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_arraypop_nonpayable$_t_array$_t_uint256_$dyn_storage_ptr_$returns$__$bound_to$_t_array$_t_uint256_$dyn_storage_ptr_$",
																					"typeString": "function (uint256[] storage pointer)"
																				}
																			},
																			"id": 605,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5043:18:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 606,
																		"nodeType": "ExpressionStatement",
																		"src": "5043:18:3"
																	},
																	{
																		"eventCall": {
																			"arguments": [
																				{
																					"id": 608,
																					"name": "_claimTopic",
																					"nodeType": "Identifier",
																					"overloadedDeclarations": [],
																					"referencedDeclaration": 566,
																					"src": "5102:11:3",
																					"typeDescriptions": {
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				}
																			],
																			"expression": {
																				"argumentTypes": [
																					{
																						"typeIdentifier": "t_uint256",
																						"typeString": "uint256"
																					}
																				],
																				"id": 607,
																				"name": "ClaimTopicRemoved",
																				"nodeType": "Identifier",
																				"overloadedDeclarations": [],
																				"referencedDeclaration": 641,
																				"src": "5084:17:3",
																				"typeDescriptions": {
																					"typeIdentifier": "t_function_event_nonpayable$_t_uint256_$returns$__$",
																					"typeString": "function (uint256)"
																				}
																			},
																			"id": 609,
																			"isConstant": false,
																			"isLValue": false,
																			"isPure": false,
																			"kind": "functionCall",
																			"lValueRequested": false,
																			"nameLocations": [],
																			"names": [],
																			"nodeType": "FunctionCall",
																			"src": "5084:30:3",
																			"tryCall": false,
																			"typeDescriptions": {
																				"typeIdentifier": "t_tuple$__$",
																				"typeString": "tuple()"
																			}
																		},
																		"id": 610,
																		"nodeType": "EmitStatement",
																		"src": "5079:35:3"
																	},
																	{
																		"id": 611,
																		"nodeType": "Break",
																		"src": "5132:5:3"
																	}
																]
															}
														}
													]
												},
												"condition": {
													"commonType": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													},
													"id": 583,
													"isConstant": false,
													"isLValue": false,
													"isPure": false,
													"lValueRequested": false,
													"leftExpression": {
														"id": 581,
														"name": "i",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 578,
														"src": "4898:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"nodeType": "BinaryOperation",
													"operator": "<",
													"rightExpression": {
														"id": 582,
														"name": "length",
														"nodeType": "Identifier",
														"overloadedDeclarations": [],
														"referencedDeclaration": 573,
														"src": "4902:6:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"src": "4898:10:3",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"id": 615,
												"initializationExpression": {
													"assignments": [
														578
													],
													"declarations": [
														{
															"constant": false,
															"id": 578,
															"mutability": "mutable",
															"name": "i",
															"nameLocation": "4891:1:3",
															"nodeType": "VariableDeclaration",
															"scope": 615,
															"src": "4883:9:3",
															"stateVariable": false,
															"storageLocation": "default",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															},
															"typeName": {
																"id": 577,
																"name": "uint256",
																"nodeType": "ElementaryTypeName",
																"src": "4883:7:3",
																"typeDescriptions": {
																	"typeIdentifier": "t_uint256",
																	"typeString": "uint256"
																}
															},
															"visibility": "internal"
														}
													],
													"id": 580,
													"initialValue": {
														"hexValue": "30",
														"id": 579,
														"isConstant": false,
														"isLValue": false,
														"isPure": true,
														"kind": "number",
														"lValueRequested": false,
														"nodeType": "Literal",
														"src": "4895:1:3",
														"typeDescriptions": {
															"typeIdentifier": "t_rational_0_by_1",
															"typeString": "int_const 0"
														},
														"value": "0"
													},
													"nodeType": "VariableDeclarationStatement",
													"src": "4883:13:3"
												},
												"loopExpression": {
													"expression": {
														"id": 585,
														"isConstant": false,
														"isLValue": false,
														"isPure": false,
														"lValueRequested": false,
														"nodeType": "UnaryOperation",
														"operator": "++",
														"prefix": false,
														"src": "4910:3:3",
														"subExpression": {
															"id": 584,
															"name": "i",
															"nodeType": "Identifier",
															"overloadedDeclarations": [],
															"referencedDeclaration": 578,
															"src": "4910:1:3",
															"typeDescriptions": {
																"typeIdentifier": "t_uint256",
																"typeString": "uint256"
															}
														},
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 586,
													"nodeType": "ExpressionStatement",
													"src": "4910:3:3"
												},
												"nodeType": "ForStatement",
												"src": "4878:284:3"
											}
										]
									},
									"documentation": {
										"id": 564,
										"nodeType": "StructuredDocumentation",
										"src": "4673:69:3",
										"text": "  @dev See {IClaimTopicsRegistry-removeClaimTopic}."
									},
									"functionSelector": "08297846",
									"id": 617,
									"implemented": true,
									"kind": "function",
									"modifiers": [
										{
											"id": 570,
											"kind": "modifierInvocation",
											"modifierName": {
												"id": 569,
												"name": "onlyOwner",
												"nameLocations": [
													"4812:9:3"
												],
												"nodeType": "IdentifierPath",
												"referencedDeclaration": 84,
												"src": "4812:9:3"
											},
											"nodeType": "ModifierInvocation",
											"src": "4812:9:3"
										}
									],
									"name": "removeClaimTopic",
									"nameLocation": "4756:16:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 568,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "4803:8:3"
									},
									"parameters": {
										"id": 567,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 566,
												"mutability": "mutable",
												"name": "_claimTopic",
												"nameLocation": "4781:11:3",
												"nodeType": "VariableDeclaration",
												"scope": 617,
												"src": "4773:19:3",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 565,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4773:7:3",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4772:21:3"
									},
									"returnParameters": {
										"id": 571,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4822:0:3"
									},
									"scope": 629,
									"src": "4747:421:3",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"baseFunctions": [
										660
									],
									"body": {
										"id": 627,
										"nodeType": "Block",
										"src": "5322:36:3",
										"statements": [
											{
												"expression": {
													"id": 625,
													"name": "_claimTopics",
													"nodeType": "Identifier",
													"overloadedDeclarations": [],
													"referencedDeclaration": 667,
													"src": "5339:12:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
														"typeString": "uint256[] storage ref"
													}
												},
												"functionReturnParameters": 624,
												"id": 626,
												"nodeType": "Return",
												"src": "5332:19:3"
											}
										]
									},
									"documentation": {
										"id": 618,
										"nodeType": "StructuredDocumentation",
										"src": "5174:67:3",
										"text": "  @dev See {IClaimTopicsRegistry-getClaimTopics}."
									},
									"functionSelector": "df09d604",
									"id": 628,
									"implemented": true,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimTopics",
									"nameLocation": "5255:14:3",
									"nodeType": "FunctionDefinition",
									"overrides": {
										"id": 620,
										"nodeType": "OverrideSpecifier",
										"overrides": [],
										"src": "5286:8:3"
									},
									"parameters": {
										"id": 619,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5269:2:3"
									},
									"returnParameters": {
										"id": 624,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 623,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 628,
												"src": "5304:16:3",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 621,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5304:7:3",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 622,
													"nodeType": "ArrayTypeName",
													"src": "5304:9:3",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5303:18:3"
									},
									"scope": 629,
									"src": "5246:112:3",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 630,
							"src": "4003:1357:3",
							"usedErrors": [
								25,
								30,
								205,
								208
							]
						}
					],
					"src": "3817:1544:3"
				},
				"id": 3
			},
			"contracts t-rex/registry/interface/IClaimTopicsRegistry.sol": {
				"ast": {
					"absolutePath": "contracts t-rex/registry/interface/IClaimTopicsRegistry.sol",
					"exportedSymbols": {
						"IClaimTopicsRegistry": [
							661
						]
					},
					"id": 662,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 631,
							"literals": [
								"solidity",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "3817:23:4"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IClaimTopicsRegistry",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 661,
							"linearizedBaseContracts": [
								661
							],
							"name": "IClaimTopicsRegistry",
							"nameLocation": "3852:20:4",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 632,
										"nodeType": "StructuredDocumentation",
										"src": "3879:241:4",
										"text": "  this event is emitted when a claim topic has been added to the ClaimTopicsRegistry\n  the event is emitted by the 'addClaimTopic' function\n  `claimTopic` is the required claim added to the Claim Topics Registry"
									},
									"eventSelector": "01c928b7f7ade2949e92366aa9454dbef3a416b731cf6ec786ba9595bbd814d6",
									"id": 636,
									"name": "ClaimTopicAdded",
									"nameLocation": "4131:15:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 635,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 634,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "4163:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 636,
												"src": "4147:26:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 633,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4147:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4146:28:4"
									},
									"src": "4125:50:4"
								},
								{
									"anonymous": false,
									"documentation": {
										"id": 637,
										"nodeType": "StructuredDocumentation",
										"src": "4181:252:4",
										"text": "  this event is emitted when a claim topic has been removed from the ClaimTopicsRegistry\n  the event is emitted by the 'removeClaimTopic' function\n  `claimTopic` is the required claim removed from the Claim Topics Registry"
									},
									"eventSelector": "0b1381093c776453c1bbe54fd68be1b235c65db61d099cb50d194b2991e0eec5",
									"id": 641,
									"name": "ClaimTopicRemoved",
									"nameLocation": "4444:17:4",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 640,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 639,
												"indexed": true,
												"mutability": "mutable",
												"name": "claimTopic",
												"nameLocation": "4478:10:4",
												"nodeType": "VariableDeclaration",
												"scope": 641,
												"src": "4462:26:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 638,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4462:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4461:28:4"
									},
									"src": "4438:52:4"
								},
								{
									"documentation": {
										"id": 642,
										"nodeType": "StructuredDocumentation",
										"src": "4496:280:4",
										"text": " @dev Add a trusted claim topic (For example: KYC=1, AML=2).\n Only owner can call.\n emits `ClaimTopicAdded` event\n cannot add more than 15 topics for 1 token as adding more could create gas issues\n @param _claimTopic The claim topic index"
									},
									"functionSelector": "c7b22551",
									"id": 647,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addClaimTopic",
									"nameLocation": "4790:13:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 645,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 644,
												"mutability": "mutable",
												"name": "_claimTopic",
												"nameLocation": "4812:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 647,
												"src": "4804:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 643,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "4804:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4803:21:4"
									},
									"returnParameters": {
										"id": 646,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4833:0:4"
									},
									"scope": 661,
									"src": "4781:53:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 648,
										"nodeType": "StructuredDocumentation",
										"src": "4840:200:4",
										"text": "  @dev Remove a trusted claim topic (For example: KYC=1, AML=2).\n  Only owner can call.\n  emits `ClaimTopicRemoved` event\n  @param _claimTopic The claim topic index"
									},
									"functionSelector": "08297846",
									"id": 653,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeClaimTopic",
									"nameLocation": "5054:16:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 651,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 650,
												"mutability": "mutable",
												"name": "_claimTopic",
												"nameLocation": "5079:11:4",
												"nodeType": "VariableDeclaration",
												"scope": 653,
												"src": "5071:19:4",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_uint256",
													"typeString": "uint256"
												},
												"typeName": {
													"id": 649,
													"name": "uint256",
													"nodeType": "ElementaryTypeName",
													"src": "5071:7:4",
													"typeDescriptions": {
														"typeIdentifier": "t_uint256",
														"typeString": "uint256"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5070:21:4"
									},
									"returnParameters": {
										"id": 652,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5100:0:4"
									},
									"scope": 661,
									"src": "5045:56:4",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 654,
										"nodeType": "StructuredDocumentation",
										"src": "5107:122:4",
										"text": "  @dev Get the trusted claim topics for the security token\n  @return Array of trusted claim topics"
									},
									"functionSelector": "df09d604",
									"id": 660,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getClaimTopics",
									"nameLocation": "5243:14:4",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 655,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5257:2:4"
									},
									"returnParameters": {
										"id": 659,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 658,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 660,
												"src": "5283:16:4",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
													"typeString": "uint256[]"
												},
												"typeName": {
													"baseType": {
														"id": 656,
														"name": "uint256",
														"nodeType": "ElementaryTypeName",
														"src": "5283:7:4",
														"typeDescriptions": {
															"typeIdentifier": "t_uint256",
															"typeString": "uint256"
														}
													},
													"id": 657,
													"nodeType": "ArrayTypeName",
													"src": "5283:9:4",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
														"typeString": "uint256[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5282:18:4"
									},
									"scope": 661,
									"src": "5234:67:4",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 662,
							"src": "3842:1461:4",
							"usedErrors": []
						}
					],
					"src": "3817:1487:4"
				},
				"id": 4
			},
			"contracts t-rex/registry/storage/CTRStorage.sol": {
				"ast": {
					"absolutePath": "contracts t-rex/registry/storage/CTRStorage.sol",
					"exportedSymbols": {
						"CTRStorage": [
							673
						]
					},
					"id": 674,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 663,
							"literals": [
								"solidity",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "3818:23:5"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "CTRStorage",
							"contractDependencies": [],
							"contractKind": "contract",
							"fullyImplemented": true,
							"id": 673,
							"linearizedBaseContracts": [
								673
							],
							"name": "CTRStorage",
							"nameLocation": "3852:10:5",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"constant": false,
									"documentation": {
										"id": 664,
										"nodeType": "StructuredDocumentation",
										"src": "3869:34:5",
										"text": "@dev All required Claim Topics"
									},
									"id": 667,
									"mutability": "mutable",
									"name": "_claimTopics",
									"nameLocation": "3927:12:5",
									"nodeType": "VariableDeclaration",
									"scope": 673,
									"src": "3908:31:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$dyn_storage",
										"typeString": "uint256[]"
									},
									"typeName": {
										"baseType": {
											"id": 665,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "3908:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 666,
										"nodeType": "ArrayTypeName",
										"src": "3908:9:5",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
											"typeString": "uint256[]"
										}
									},
									"visibility": "internal"
								},
								{
									"constant": false,
									"documentation": {
										"id": 668,
										"nodeType": "StructuredDocumentation",
										"src": "3946:174:5",
										"text": " @dev This empty reserved space is put in place to allow future versions to add new\n variables without shifting down storage in the inheritance chain."
									},
									"id": 672,
									"mutability": "mutable",
									"name": "__gap",
									"nameLocation": "4145:5:5",
									"nodeType": "VariableDeclaration",
									"scope": 673,
									"src": "4125:25:5",
									"stateVariable": true,
									"storageLocation": "default",
									"typeDescriptions": {
										"typeIdentifier": "t_array$_t_uint256_$49_storage",
										"typeString": "uint256[49]"
									},
									"typeName": {
										"baseType": {
											"id": 669,
											"name": "uint256",
											"nodeType": "ElementaryTypeName",
											"src": "4125:7:5",
											"typeDescriptions": {
												"typeIdentifier": "t_uint256",
												"typeString": "uint256"
											}
										},
										"id": 671,
										"length": {
											"hexValue": "3439",
											"id": 670,
											"isConstant": false,
											"isLValue": false,
											"isPure": true,
											"kind": "number",
											"lValueRequested": false,
											"nodeType": "Literal",
											"src": "4133:2:5",
											"typeDescriptions": {
												"typeIdentifier": "t_rational_49_by_1",
												"typeString": "int_const 49"
											},
											"value": "49"
										},
										"nodeType": "ArrayTypeName",
										"src": "4125:11:5",
										"typeDescriptions": {
											"typeIdentifier": "t_array$_t_uint256_$49_storage_ptr",
											"typeString": "uint256[49]"
										}
									},
									"visibility": "private"
								}
							],
							"scope": 674,
							"src": "3843:310:5",
							"usedErrors": []
						}
					],
					"src": "3818:335:5"
				},
				"id": 5
			}
		}
	}
}