{
	"id": "ace2b8b64b7e6d9ca536293fd6edf52b",
	"_format": "hh-sol-build-info-1",
	"solcVersion": "0.8.17",
	"solcLongVersion": "0.8.17+commit.8df45f5f",
	"input": {
		"language": "Solidity",
		"sources": {
			".deps/npm/@onchain-id/solidity/contracts/factory/IIdFactory.sol": {
				"content": "// SPDX-License-Identifier: GPL-3.0\npragma solidity 0.8.17;\n\ninterface IIdFactory {\n\n    /// events\n\n    // event emitted whenever a single contract is deployed by the factory\n    event Deployed(address indexed _addr);\n\n    // event emitted when a wallet is linked to an ONCHAINID contract\n    event WalletLinked(address indexed wallet, address indexed identity);\n\n    // event emitted when a token is linked to an ONCHAINID contract\n    event TokenLinked(address indexed token, address indexed identity);\n\n    // event emitted when a wallet is unlinked from an ONCHAINID contract\n    event WalletUnlinked(address indexed wallet, address indexed identity);\n\n    // event emitted when an address is registered on the factory as a Token\n    // factory address, granting this address the privilege to issue\n    // Onchain identities for tokens\n    event TokenFactoryAdded(address indexed factory);\n\n    // event emitted when a previously recorded token factory address is removed\n    event TokenFactoryRemoved(address indexed factory);\n\n    /// functions\n\n    /**\n     *  @dev function used to create a new Identity proxy from the factory\n     *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\n     *  @param _salt the salt used by create2 to issue the contract\n     *  requires a new salt for each deployment\n     *  _wallet cannot be linked to another ONCHAINID\n     *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\n     *  of the function, including calls to oracles for multichain\n     *  deployment security (avoid identity theft), defining payment requirements, etc.\n     */\n    function createIdentity(address _wallet, string memory _salt) external returns (address);\n\n    /**\n     *  @dev function used to create a new Identity proxy from the factory, setting the wallet and listed keys as\n     * MANAGEMENT keys.\n     *  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\n     *  @param _salt the salt used by create2 to issue the contract\n     *  @param _managementKeys A list of keys hash (keccak256(abiEncoded())) to add as MANAGEMENT keys.\n     *  requires a new salt for each deployment\n     *  _wallet cannot be linked to another ONCHAINID\n     *  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\n     *  of the function, including calls to oracles for multichain\n     *  deployment security (avoid identity theft), defining payment requirements, etc.\n     */\n    function createIdentityWithManagementKeys(\n        address _wallet,\n        string memory _salt,\n        bytes32[] memory _managementKeys\n    ) external returns (address);\n\n    /**\n     *  @dev function used to create a new Token Identity proxy from the factory\n     *  @param _token the address of the token contract\n     *  @param _tokenOwner the owner address of the token\n     *  @param _salt the salt used by create2 to issue the contract\n     *  requires a new salt for each deployment\n     *  _token cannot be linked to another ONCHAINID\n     *  only Token factory or owner can call (owner should only use its privilege\n     *  for tokens not issued by a Token factory onchain\n     */\n    function createTokenIdentity(address _token, address _tokenOwner, string memory _salt) external returns (address);\n\n    /**\n     *  @dev function used to link a new wallet to an existing identity\n     *  @param _newWallet the address of the wallet to link\n     *  requires msg.sender to be linked to an existing onchainid\n     *  the _newWallet will be linked to the same OID contract as msg.sender\n     *  _newWallet cannot be linked to an OID yet\n     *  _newWallet cannot be address 0\n     *  cannot link more than 100 wallets to an OID, for gas consumption reason\n     */\n    function linkWallet(address _newWallet) external;\n\n    /**\n     *  @dev function used to unlink a wallet from an existing identity\n     *  @param _oldWallet the address of the wallet to unlink\n     *  requires msg.sender to be linked to the same onchainid as _oldWallet\n     *  msg.sender cannot be _oldWallet to keep at least 1 wallet linked to any OID\n     *  _oldWallet cannot be address 0\n     */\n    function unlinkWallet(address _oldWallet) external;\n\n    /**\n     *  @dev function used to register an address as a token factory\n     *  @param _factory the address of the token factory\n     *  can be called only by Owner\n     *  _factory cannot be registered yet\n     *  once the factory has been registered it can deploy token identities\n     */\n    function addTokenFactory(address _factory) external;\n\n    /**\n     *  @dev function used to unregister an address previously registered as a token factory\n     *  @param _factory the address of the token factory\n     *  can be called only by Owner\n     *  _factory has to be registered previously\n     *  once the factory has been unregistered it cannot deploy token identities anymore\n     */\n    function removeTokenFactory(address _factory) external;\n\n    /**\n     *  @dev getter for OID contract corresponding to a wallet/token\n     *  @param _wallet the wallet/token address\n     */\n    function getIdentity(address _wallet) external view returns (address);\n\n    /**\n     *  @dev getter to fetch the array of wallets linked to an OID contract\n     *  @param _identity the address of the OID contract\n     *  returns an array of addresses linked to the OID\n     */\n    function getWallets(address _identity) external view returns (address[] memory);\n\n    /**\n     *  @dev getter to fetch the token address linked to an OID contract\n     *  @param _identity the address of the OID contract\n     *  returns the address linked to the OID\n     */\n    function getToken(address _identity) external view returns (address);\n\n    /**\n     *  @dev getter to know if an address is registered as token factory or not\n     *  @param _factory the address of the factory\n     *  returns true if the address corresponds to a registered factory\n     */\n    function isTokenFactory(address _factory) external view returns(bool);\n\n    /**\n     *  @dev getter to know if a salt is taken for the create2 deployment\n     *  @param _salt the salt used for deployment\n     */\n    function isSaltTaken(string calldata _salt) external view returns (bool);\n\n    /**\n     * @dev getter for the implementation authority used by this factory.\n     */\n    function implementationAuthority() external view returns (address);\n}\n"
			}
		},
		"settings": {
			"optimizer": {
				"enabled": true,
				"runs": 200
			},
			"outputSelection": {
				"*": {
					"": [
						"ast"
					],
					"*": [
						"abi",
						"metadata",
						"devdoc",
						"userdoc",
						"storageLayout",
						"evm.legacyAssembly",
						"evm.bytecode",
						"evm.deployedBytecode",
						"evm.methodIdentifiers",
						"evm.gasEstimates",
						"evm.assembly"
					]
				}
			},
			"remappings": []
		}
	},
	"output": {
		"contracts": {
			".deps/npm/@onchain-id/solidity/contracts/factory/IIdFactory.sol": {
				"IIdFactory": {
					"abi": [
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "_addr",
									"type": "address"
								}
							],
							"name": "Deployed",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "factory",
									"type": "address"
								}
							],
							"name": "TokenFactoryAdded",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "factory",
									"type": "address"
								}
							],
							"name": "TokenFactoryRemoved",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "token",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "identity",
									"type": "address"
								}
							],
							"name": "TokenLinked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "wallet",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "identity",
									"type": "address"
								}
							],
							"name": "WalletLinked",
							"type": "event"
						},
						{
							"anonymous": false,
							"inputs": [
								{
									"indexed": true,
									"internalType": "address",
									"name": "wallet",
									"type": "address"
								},
								{
									"indexed": true,
									"internalType": "address",
									"name": "identity",
									"type": "address"
								}
							],
							"name": "WalletUnlinked",
							"type": "event"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								}
							],
							"name": "addTokenFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_wallet",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "_salt",
									"type": "string"
								}
							],
							"name": "createIdentity",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_wallet",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "_salt",
									"type": "string"
								},
								{
									"internalType": "bytes32[]",
									"name": "_managementKeys",
									"type": "bytes32[]"
								}
							],
							"name": "createIdentityWithManagementKeys",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_token",
									"type": "address"
								},
								{
									"internalType": "address",
									"name": "_tokenOwner",
									"type": "address"
								},
								{
									"internalType": "string",
									"name": "_salt",
									"type": "string"
								}
							],
							"name": "createTokenIdentity",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_wallet",
									"type": "address"
								}
							],
							"name": "getIdentity",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_identity",
									"type": "address"
								}
							],
							"name": "getToken",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_identity",
									"type": "address"
								}
							],
							"name": "getWallets",
							"outputs": [
								{
									"internalType": "address[]",
									"name": "",
									"type": "address[]"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [],
							"name": "implementationAuthority",
							"outputs": [
								{
									"internalType": "address",
									"name": "",
									"type": "address"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "string",
									"name": "_salt",
									"type": "string"
								}
							],
							"name": "isSaltTaken",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								}
							],
							"name": "isTokenFactory",
							"outputs": [
								{
									"internalType": "bool",
									"name": "",
									"type": "bool"
								}
							],
							"stateMutability": "view",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_newWallet",
									"type": "address"
								}
							],
							"name": "linkWallet",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_factory",
									"type": "address"
								}
							],
							"name": "removeTokenFactory",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						},
						{
							"inputs": [
								{
									"internalType": "address",
									"name": "_oldWallet",
									"type": "address"
								}
							],
							"name": "unlinkWallet",
							"outputs": [],
							"stateMutability": "nonpayable",
							"type": "function"
						}
					],
					"devdoc": {
						"kind": "dev",
						"methods": {
							"addTokenFactory(address)": {
								"details": "function used to register an address as a token factory",
								"params": {
									"_factory": "the address of the token factory  can be called only by Owner  _factory cannot be registered yet  once the factory has been registered it can deploy token identities"
								}
							},
							"createIdentity(address,string)": {
								"details": "function used to create a new Identity proxy from the factory",
								"params": {
									"_salt": "the salt used by create2 to issue the contract  requires a new salt for each deployment  _wallet cannot be linked to another ONCHAINID  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility  of the function, including calls to oracles for multichain  deployment security (avoid identity theft), defining payment requirements, etc.",
									"_wallet": "the wallet address of the primary owner of this ONCHAINID contract"
								}
							},
							"createIdentityWithManagementKeys(address,string,bytes32[])": {
								"details": "function used to create a new Identity proxy from the factory, setting the wallet and listed keys as MANAGEMENT keys.",
								"params": {
									"_managementKeys": "A list of keys hash (keccak256(abiEncoded())) to add as MANAGEMENT keys.  requires a new salt for each deployment  _wallet cannot be linked to another ONCHAINID  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility  of the function, including calls to oracles for multichain  deployment security (avoid identity theft), defining payment requirements, etc.",
									"_salt": "the salt used by create2 to issue the contract",
									"_wallet": "the wallet address of the primary owner of this ONCHAINID contract"
								}
							},
							"createTokenIdentity(address,address,string)": {
								"details": "function used to create a new Token Identity proxy from the factory",
								"params": {
									"_salt": "the salt used by create2 to issue the contract  requires a new salt for each deployment  _token cannot be linked to another ONCHAINID  only Token factory or owner can call (owner should only use its privilege  for tokens not issued by a Token factory onchain",
									"_token": "the address of the token contract",
									"_tokenOwner": "the owner address of the token"
								}
							},
							"getIdentity(address)": {
								"details": "getter for OID contract corresponding to a wallet/token",
								"params": {
									"_wallet": "the wallet/token address"
								}
							},
							"getToken(address)": {
								"details": "getter to fetch the token address linked to an OID contract",
								"params": {
									"_identity": "the address of the OID contract  returns the address linked to the OID"
								}
							},
							"getWallets(address)": {
								"details": "getter to fetch the array of wallets linked to an OID contract",
								"params": {
									"_identity": "the address of the OID contract  returns an array of addresses linked to the OID"
								}
							},
							"implementationAuthority()": {
								"details": "getter for the implementation authority used by this factory."
							},
							"isSaltTaken(string)": {
								"details": "getter to know if a salt is taken for the create2 deployment",
								"params": {
									"_salt": "the salt used for deployment"
								}
							},
							"isTokenFactory(address)": {
								"details": "getter to know if an address is registered as token factory or not",
								"params": {
									"_factory": "the address of the factory  returns true if the address corresponds to a registered factory"
								}
							},
							"linkWallet(address)": {
								"details": "function used to link a new wallet to an existing identity",
								"params": {
									"_newWallet": "the address of the wallet to link  requires msg.sender to be linked to an existing onchainid  the _newWallet will be linked to the same OID contract as msg.sender  _newWallet cannot be linked to an OID yet  _newWallet cannot be address 0  cannot link more than 100 wallets to an OID, for gas consumption reason"
								}
							},
							"removeTokenFactory(address)": {
								"details": "function used to unregister an address previously registered as a token factory",
								"params": {
									"_factory": "the address of the token factory  can be called only by Owner  _factory has to be registered previously  once the factory has been unregistered it cannot deploy token identities anymore"
								}
							},
							"unlinkWallet(address)": {
								"details": "function used to unlink a wallet from an existing identity",
								"params": {
									"_oldWallet": "the address of the wallet to unlink  requires msg.sender to be linked to the same onchainid as _oldWallet  msg.sender cannot be _oldWallet to keep at least 1 wallet linked to any OID  _oldWallet cannot be address 0"
								}
							}
						},
						"version": 1
					},
					"evm": {
						"assembly": "",
						"bytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"deployedBytecode": {
							"functionDebugData": {},
							"generatedSources": [],
							"immutableReferences": {},
							"linkReferences": {},
							"object": "",
							"opcodes": "",
							"sourceMap": ""
						},
						"gasEstimates": null,
						"legacyAssembly": null,
						"methodIdentifiers": {
							"addTokenFactory(address)": "9ce19365",
							"createIdentity(address,string)": "8e952bfe",
							"createIdentityWithManagementKeys(address,string,bytes32[])": "fe5cd59a",
							"createTokenIdentity(address,address,string)": "3d56ff66",
							"getIdentity(address)": "2fea7b81",
							"getToken(address)": "59770438",
							"getWallets(address)": "422c29a4",
							"implementationAuthority()": "2307f882",
							"isSaltTaken(string)": "3a500451",
							"isTokenFactory(address)": "3e3bc3d7",
							"linkWallet(address)": "b8bb8126",
							"removeTokenFactory(address)": "937529ef",
							"unlinkWallet(address)": "5027dbe2"
						}
					},
					"metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"_addr\",\"type\":\"address\"}],\"name\":\"Deployed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"TokenFactoryAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"}],\"name\":\"TokenFactoryRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"TokenLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"WalletLinked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"identity\",\"type\":\"address\"}],\"name\":\"WalletUnlinked\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"addTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_salt\",\"type\":\"string\"}],\"name\":\"createIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_salt\",\"type\":\"string\"},{\"internalType\":\"bytes32[]\",\"name\":\"_managementKeys\",\"type\":\"bytes32[]\"}],\"name\":\"createIdentityWithManagementKeys\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_tokenOwner\",\"type\":\"address\"},{\"internalType\":\"string\",\"name\":\"_salt\",\"type\":\"string\"}],\"name\":\"createTokenIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_wallet\",\"type\":\"address\"}],\"name\":\"getIdentity\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"getToken\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_identity\",\"type\":\"address\"}],\"name\":\"getWallets\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementationAuthority\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_salt\",\"type\":\"string\"}],\"name\":\"isSaltTaken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"isTokenFactory\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_newWallet\",\"type\":\"address\"}],\"name\":\"linkWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_factory\",\"type\":\"address\"}],\"name\":\"removeTokenFactory\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_oldWallet\",\"type\":\"address\"}],\"name\":\"unlinkWallet\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addTokenFactory(address)\":{\"details\":\"function used to register an address as a token factory\",\"params\":{\"_factory\":\"the address of the token factory  can be called only by Owner  _factory cannot be registered yet  once the factory has been registered it can deploy token identities\"}},\"createIdentity(address,string)\":{\"details\":\"function used to create a new Identity proxy from the factory\",\"params\":{\"_salt\":\"the salt used by create2 to issue the contract  requires a new salt for each deployment  _wallet cannot be linked to another ONCHAINID  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility  of the function, including calls to oracles for multichain  deployment security (avoid identity theft), defining payment requirements, etc.\",\"_wallet\":\"the wallet address of the primary owner of this ONCHAINID contract\"}},\"createIdentityWithManagementKeys(address,string,bytes32[])\":{\"details\":\"function used to create a new Identity proxy from the factory, setting the wallet and listed keys as MANAGEMENT keys.\",\"params\":{\"_managementKeys\":\"A list of keys hash (keccak256(abiEncoded())) to add as MANAGEMENT keys.  requires a new salt for each deployment  _wallet cannot be linked to another ONCHAINID  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility  of the function, including calls to oracles for multichain  deployment security (avoid identity theft), defining payment requirements, etc.\",\"_salt\":\"the salt used by create2 to issue the contract\",\"_wallet\":\"the wallet address of the primary owner of this ONCHAINID contract\"}},\"createTokenIdentity(address,address,string)\":{\"details\":\"function used to create a new Token Identity proxy from the factory\",\"params\":{\"_salt\":\"the salt used by create2 to issue the contract  requires a new salt for each deployment  _token cannot be linked to another ONCHAINID  only Token factory or owner can call (owner should only use its privilege  for tokens not issued by a Token factory onchain\",\"_token\":\"the address of the token contract\",\"_tokenOwner\":\"the owner address of the token\"}},\"getIdentity(address)\":{\"details\":\"getter for OID contract corresponding to a wallet/token\",\"params\":{\"_wallet\":\"the wallet/token address\"}},\"getToken(address)\":{\"details\":\"getter to fetch the token address linked to an OID contract\",\"params\":{\"_identity\":\"the address of the OID contract  returns the address linked to the OID\"}},\"getWallets(address)\":{\"details\":\"getter to fetch the array of wallets linked to an OID contract\",\"params\":{\"_identity\":\"the address of the OID contract  returns an array of addresses linked to the OID\"}},\"implementationAuthority()\":{\"details\":\"getter for the implementation authority used by this factory.\"},\"isSaltTaken(string)\":{\"details\":\"getter to know if a salt is taken for the create2 deployment\",\"params\":{\"_salt\":\"the salt used for deployment\"}},\"isTokenFactory(address)\":{\"details\":\"getter to know if an address is registered as token factory or not\",\"params\":{\"_factory\":\"the address of the factory  returns true if the address corresponds to a registered factory\"}},\"linkWallet(address)\":{\"details\":\"function used to link a new wallet to an existing identity\",\"params\":{\"_newWallet\":\"the address of the wallet to link  requires msg.sender to be linked to an existing onchainid  the _newWallet will be linked to the same OID contract as msg.sender  _newWallet cannot be linked to an OID yet  _newWallet cannot be address 0  cannot link more than 100 wallets to an OID, for gas consumption reason\"}},\"removeTokenFactory(address)\":{\"details\":\"function used to unregister an address previously registered as a token factory\",\"params\":{\"_factory\":\"the address of the token factory  can be called only by Owner  _factory has to be registered previously  once the factory has been unregistered it cannot deploy token identities anymore\"}},\"unlinkWallet(address)\":{\"details\":\"function used to unlink a wallet from an existing identity\",\"params\":{\"_oldWallet\":\"the address of the wallet to unlink  requires msg.sender to be linked to the same onchainid as _oldWallet  msg.sender cannot be _oldWallet to keep at least 1 wallet linked to any OID  _oldWallet cannot be address 0\"}}},\"version\":1},\"userdoc\":{\"events\":{\"Deployed(address)\":{\"notice\":\"events\"}},\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\".deps/npm/@onchain-id/solidity/contracts/factory/IIdFactory.sol\":\"IIdFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\".deps/npm/@onchain-id/solidity/contracts/factory/IIdFactory.sol\":{\"keccak256\":\"0x5d60726074e12a5291b9179d6afa5abd3c9d2c46ef84011a1275577db085687e\",\"license\":\"GPL-3.0\",\"urls\":[\"bzz-raw://224c933b538f2eb04a1292bd1e757acfd440e0eff466d181a273c95071a50c54\",\"dweb:/ipfs/QmRhv7NKgnE7Eq7dLneH9h7ThgpyMRQcx3L2yr6imfNUMp\"]}},\"version\":1}",
					"storageLayout": {
						"storage": [],
						"types": null
					},
					"userdoc": {
						"events": {
							"Deployed(address)": {
								"notice": "events"
							}
						},
						"kind": "user",
						"methods": {},
						"version": 1
					}
				}
			}
		},
		"sources": {
			".deps/npm/@onchain-id/solidity/contracts/factory/IIdFactory.sol": {
				"ast": {
					"absolutePath": ".deps/npm/@onchain-id/solidity/contracts/factory/IIdFactory.sol",
					"exportedSymbols": {
						"IIdFactory": [
							139
						]
					},
					"id": 140,
					"license": "GPL-3.0",
					"nodeType": "SourceUnit",
					"nodes": [
						{
							"id": 1,
							"literals": [
								"solidity",
								"0.8",
								".17"
							],
							"nodeType": "PragmaDirective",
							"src": "36:23:0"
						},
						{
							"abstract": false,
							"baseContracts": [],
							"canonicalName": "IIdFactory",
							"contractDependencies": [],
							"contractKind": "interface",
							"fullyImplemented": false,
							"id": 139,
							"linearizedBaseContracts": [
								139
							],
							"name": "IIdFactory",
							"nameLocation": "71:10:0",
							"nodeType": "ContractDefinition",
							"nodes": [
								{
									"anonymous": false,
									"documentation": {
										"id": 2,
										"nodeType": "StructuredDocumentation",
										"src": "89:11:0",
										"text": "events"
									},
									"eventSelector": "f40fcec21964ffb566044d083b4073f29f7f7929110ea19e1b3ebe375d89055e",
									"id": 6,
									"name": "Deployed",
									"nameLocation": "186:8:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 5,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 4,
												"indexed": true,
												"mutability": "mutable",
												"name": "_addr",
												"nameLocation": "211:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 6,
												"src": "195:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 3,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "195:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "194:23:0"
									},
									"src": "180:38:0"
								},
								{
									"anonymous": false,
									"eventSelector": "8e0c709111388f5480579514d86663489ab1f206fe6da1a0c4d03ac8c318b3c6",
									"id": 12,
									"name": "WalletLinked",
									"nameLocation": "300:12:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 11,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 8,
												"indexed": true,
												"mutability": "mutable",
												"name": "wallet",
												"nameLocation": "329:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "313:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 7,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "313:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 10,
												"indexed": true,
												"mutability": "mutable",
												"name": "identity",
												"nameLocation": "353:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 12,
												"src": "337:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 9,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "337:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "312:50:0"
									},
									"src": "294:69:0"
								},
								{
									"anonymous": false,
									"eventSelector": "a8261d398ddc63db24cc53cd0c63c9464cabad1bc478ede2107b32c1c4010b7a",
									"id": 18,
									"name": "TokenLinked",
									"nameLocation": "444:11:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 17,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 14,
												"indexed": true,
												"mutability": "mutable",
												"name": "token",
												"nameLocation": "472:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "456:21:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 13,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "456:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 16,
												"indexed": true,
												"mutability": "mutable",
												"name": "identity",
												"nameLocation": "495:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 18,
												"src": "479:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 15,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "479:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "455:49:0"
									},
									"src": "438:67:0"
								},
								{
									"anonymous": false,
									"eventSelector": "35e6fc363a4bf723d53b26c1a751674aca9c3ead425f0591f84f5540ede86f12",
									"id": 24,
									"name": "WalletUnlinked",
									"nameLocation": "591:14:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 23,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 20,
												"indexed": true,
												"mutability": "mutable",
												"name": "wallet",
												"nameLocation": "622:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "606:22:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 19,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "606:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 22,
												"indexed": true,
												"mutability": "mutable",
												"name": "identity",
												"nameLocation": "646:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 24,
												"src": "630:24:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 21,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "630:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "605:50:0"
									},
									"src": "585:71:0"
								},
								{
									"anonymous": false,
									"eventSelector": "45eb8ac5344d2d3f306550fe6e969ca4190526313c512afed851d052bf2ab2fd",
									"id": 28,
									"name": "TokenFactoryAdded",
									"nameLocation": "851:17:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 27,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 26,
												"indexed": true,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "885:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 28,
												"src": "869:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 25,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "869:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "868:25:0"
									},
									"src": "845:49:0"
								},
								{
									"anonymous": false,
									"eventSelector": "d1fd5274f793d20291c0abfe42e1ef63213a11b34996d485f7afb8fe01424851",
									"id": 32,
									"name": "TokenFactoryRemoved",
									"nameLocation": "987:19:0",
									"nodeType": "EventDefinition",
									"parameters": {
										"id": 31,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 30,
												"indexed": true,
												"mutability": "mutable",
												"name": "factory",
												"nameLocation": "1023:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 32,
												"src": "1007:23:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 29,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1007:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1006:25:0"
									},
									"src": "981:51:0"
								},
								{
									"documentation": {
										"id": 33,
										"nodeType": "StructuredDocumentation",
										"src": "1057:601:0",
										"text": "  @dev function used to create a new Identity proxy from the factory\n  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\n  @param _salt the salt used by create2 to issue the contract\n  requires a new salt for each deployment\n  _wallet cannot be linked to another ONCHAINID\n  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\n  of the function, including calls to oracles for multichain\n  deployment security (avoid identity theft), defining payment requirements, etc."
									},
									"functionSelector": "8e952bfe",
									"id": 42,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createIdentity",
									"nameLocation": "1672:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 38,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 35,
												"mutability": "mutable",
												"name": "_wallet",
												"nameLocation": "1695:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "1687:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 34,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1687:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 37,
												"mutability": "mutable",
												"name": "_salt",
												"nameLocation": "1718:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "1704:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 36,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "1704:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1686:38:0"
									},
									"returnParameters": {
										"id": 41,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 40,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 42,
												"src": "1743:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 39,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "1743:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "1742:9:0"
									},
									"scope": 139,
									"src": "1663:89:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 43,
										"nodeType": "StructuredDocumentation",
										"src": "1758:768:0",
										"text": "  @dev function used to create a new Identity proxy from the factory, setting the wallet and listed keys as\n MANAGEMENT keys.\n  @param _wallet the wallet address of the primary owner of this ONCHAINID contract\n  @param _salt the salt used by create2 to issue the contract\n  @param _managementKeys A list of keys hash (keccak256(abiEncoded())) to add as MANAGEMENT keys.\n  requires a new salt for each deployment\n  _wallet cannot be linked to another ONCHAINID\n  only Owner can call => Owner is supposed to be a smart contract, managing the accessibility\n  of the function, including calls to oracles for multichain\n  deployment security (avoid identity theft), defining payment requirements, etc."
									},
									"functionSelector": "fe5cd59a",
									"id": 55,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createIdentityWithManagementKeys",
									"nameLocation": "2540:32:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 51,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 45,
												"mutability": "mutable",
												"name": "_wallet",
												"nameLocation": "2590:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2582:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 44,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2582:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 47,
												"mutability": "mutable",
												"name": "_salt",
												"nameLocation": "2621:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2607:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 46,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "2607:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 50,
												"mutability": "mutable",
												"name": "_managementKeys",
												"nameLocation": "2653:15:0",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2636:32:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_bytes32_$dyn_memory_ptr",
													"typeString": "bytes32[]"
												},
												"typeName": {
													"baseType": {
														"id": 48,
														"name": "bytes32",
														"nodeType": "ElementaryTypeName",
														"src": "2636:7:0",
														"typeDescriptions": {
															"typeIdentifier": "t_bytes32",
															"typeString": "bytes32"
														}
													},
													"id": 49,
													"nodeType": "ArrayTypeName",
													"src": "2636:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_bytes32_$dyn_storage_ptr",
														"typeString": "bytes32[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2572:102:0"
									},
									"returnParameters": {
										"id": 54,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 53,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 55,
												"src": "2693:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 52,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "2693:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "2692:9:0"
									},
									"scope": 139,
									"src": "2531:171:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 56,
										"nodeType": "StructuredDocumentation",
										"src": "2708:514:0",
										"text": "  @dev function used to create a new Token Identity proxy from the factory\n  @param _token the address of the token contract\n  @param _tokenOwner the owner address of the token\n  @param _salt the salt used by create2 to issue the contract\n  requires a new salt for each deployment\n  _token cannot be linked to another ONCHAINID\n  only Token factory or owner can call (owner should only use its privilege\n  for tokens not issued by a Token factory onchain"
									},
									"functionSelector": "3d56ff66",
									"id": 67,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "createTokenIdentity",
									"nameLocation": "3236:19:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 63,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 58,
												"mutability": "mutable",
												"name": "_token",
												"nameLocation": "3264:6:0",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3256:14:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 57,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3256:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 60,
												"mutability": "mutable",
												"name": "_tokenOwner",
												"nameLocation": "3280:11:0",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3272:19:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 59,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3272:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											},
											{
												"constant": false,
												"id": 62,
												"mutability": "mutable",
												"name": "_salt",
												"nameLocation": "3307:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3293:19:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_string_memory_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 61,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "3293:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3255:58:0"
									},
									"returnParameters": {
										"id": 66,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 65,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 67,
												"src": "3332:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 64,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3332:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3331:9:0"
									},
									"scope": 139,
									"src": "3227:114:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 68,
										"nodeType": "StructuredDocumentation",
										"src": "3347:455:0",
										"text": "  @dev function used to link a new wallet to an existing identity\n  @param _newWallet the address of the wallet to link\n  requires msg.sender to be linked to an existing onchainid\n  the _newWallet will be linked to the same OID contract as msg.sender\n  _newWallet cannot be linked to an OID yet\n  _newWallet cannot be address 0\n  cannot link more than 100 wallets to an OID, for gas consumption reason"
									},
									"functionSelector": "b8bb8126",
									"id": 73,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "linkWallet",
									"nameLocation": "3816:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 71,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 70,
												"mutability": "mutable",
												"name": "_newWallet",
												"nameLocation": "3835:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 73,
												"src": "3827:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 69,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "3827:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "3826:20:0"
									},
									"returnParameters": {
										"id": 72,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "3855:0:0"
									},
									"scope": 139,
									"src": "3807:49:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 74,
										"nodeType": "StructuredDocumentation",
										"src": "3862:345:0",
										"text": "  @dev function used to unlink a wallet from an existing identity\n  @param _oldWallet the address of the wallet to unlink\n  requires msg.sender to be linked to the same onchainid as _oldWallet\n  msg.sender cannot be _oldWallet to keep at least 1 wallet linked to any OID\n  _oldWallet cannot be address 0"
									},
									"functionSelector": "5027dbe2",
									"id": 79,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "unlinkWallet",
									"nameLocation": "4221:12:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 77,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 76,
												"mutability": "mutable",
												"name": "_oldWallet",
												"nameLocation": "4242:10:0",
												"nodeType": "VariableDeclaration",
												"scope": 79,
												"src": "4234:18:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 75,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4234:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4233:20:0"
									},
									"returnParameters": {
										"id": 78,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4262:0:0"
									},
									"scope": 139,
									"src": "4212:51:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 80,
										"nodeType": "StructuredDocumentation",
										"src": "4269:291:0",
										"text": "  @dev function used to register an address as a token factory\n  @param _factory the address of the token factory\n  can be called only by Owner\n  _factory cannot be registered yet\n  once the factory has been registered it can deploy token identities"
									},
									"functionSelector": "9ce19365",
									"id": 85,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "addTokenFactory",
									"nameLocation": "4574:15:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 83,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 82,
												"mutability": "mutable",
												"name": "_factory",
												"nameLocation": "4598:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 85,
												"src": "4590:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 81,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4590:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4589:18:0"
									},
									"returnParameters": {
										"id": 84,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "4616:0:0"
									},
									"scope": 139,
									"src": "4565:52:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 86,
										"nodeType": "StructuredDocumentation",
										"src": "4623:335:0",
										"text": "  @dev function used to unregister an address previously registered as a token factory\n  @param _factory the address of the token factory\n  can be called only by Owner\n  _factory has to be registered previously\n  once the factory has been unregistered it cannot deploy token identities anymore"
									},
									"functionSelector": "937529ef",
									"id": 91,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "removeTokenFactory",
									"nameLocation": "4972:18:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 89,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 88,
												"mutability": "mutable",
												"name": "_factory",
												"nameLocation": "4999:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 91,
												"src": "4991:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 87,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "4991:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "4990:18:0"
									},
									"returnParameters": {
										"id": 90,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "5017:0:0"
									},
									"scope": 139,
									"src": "4963:55:0",
									"stateMutability": "nonpayable",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 92,
										"nodeType": "StructuredDocumentation",
										"src": "5024:128:0",
										"text": "  @dev getter for OID contract corresponding to a wallet/token\n  @param _wallet the wallet/token address"
									},
									"functionSelector": "2fea7b81",
									"id": 99,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getIdentity",
									"nameLocation": "5166:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 95,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 94,
												"mutability": "mutable",
												"name": "_wallet",
												"nameLocation": "5186:7:0",
												"nodeType": "VariableDeclaration",
												"scope": 99,
												"src": "5178:15:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 93,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5178:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5177:17:0"
									},
									"returnParameters": {
										"id": 98,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 97,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 99,
												"src": "5218:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 96,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5218:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5217:9:0"
									},
									"scope": 139,
									"src": "5157:70:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 100,
										"nodeType": "StructuredDocumentation",
										"src": "5233:200:0",
										"text": "  @dev getter to fetch the array of wallets linked to an OID contract\n  @param _identity the address of the OID contract\n  returns an array of addresses linked to the OID"
									},
									"functionSelector": "422c29a4",
									"id": 108,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getWallets",
									"nameLocation": "5447:10:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 103,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 102,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "5466:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 108,
												"src": "5458:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 101,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5458:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5457:19:0"
									},
									"returnParameters": {
										"id": 107,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 106,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 108,
												"src": "5500:16:0",
												"stateVariable": false,
												"storageLocation": "memory",
												"typeDescriptions": {
													"typeIdentifier": "t_array$_t_address_$dyn_memory_ptr",
													"typeString": "address[]"
												},
												"typeName": {
													"baseType": {
														"id": 104,
														"name": "address",
														"nodeType": "ElementaryTypeName",
														"src": "5500:7:0",
														"stateMutability": "nonpayable",
														"typeDescriptions": {
															"typeIdentifier": "t_address",
															"typeString": "address"
														}
													},
													"id": 105,
													"nodeType": "ArrayTypeName",
													"src": "5500:9:0",
													"typeDescriptions": {
														"typeIdentifier": "t_array$_t_address_$dyn_storage_ptr",
														"typeString": "address[]"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5499:18:0"
									},
									"scope": 139,
									"src": "5438:80:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 109,
										"nodeType": "StructuredDocumentation",
										"src": "5524:187:0",
										"text": "  @dev getter to fetch the token address linked to an OID contract\n  @param _identity the address of the OID contract\n  returns the address linked to the OID"
									},
									"functionSelector": "59770438",
									"id": 116,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "getToken",
									"nameLocation": "5725:8:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 112,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 111,
												"mutability": "mutable",
												"name": "_identity",
												"nameLocation": "5742:9:0",
												"nodeType": "VariableDeclaration",
												"scope": 116,
												"src": "5734:17:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 110,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5734:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5733:19:0"
									},
									"returnParameters": {
										"id": 115,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 114,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 116,
												"src": "5776:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 113,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "5776:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "5775:9:0"
									},
									"scope": 139,
									"src": "5716:69:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 117,
										"nodeType": "StructuredDocumentation",
										"src": "5791:214:0",
										"text": "  @dev getter to know if an address is registered as token factory or not\n  @param _factory the address of the factory\n  returns true if the address corresponds to a registered factory"
									},
									"functionSelector": "3e3bc3d7",
									"id": 124,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isTokenFactory",
									"nameLocation": "6019:14:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 120,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 119,
												"mutability": "mutable",
												"name": "_factory",
												"nameLocation": "6042:8:0",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "6034:16:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 118,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6034:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6033:18:0"
									},
									"returnParameters": {
										"id": 123,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 122,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 124,
												"src": "6074:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 121,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6074:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6073:6:0"
									},
									"scope": 139,
									"src": "6010:70:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 125,
										"nodeType": "StructuredDocumentation",
										"src": "6086:135:0",
										"text": "  @dev getter to know if a salt is taken for the create2 deployment\n  @param _salt the salt used for deployment"
									},
									"functionSelector": "3a500451",
									"id": 132,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "isSaltTaken",
									"nameLocation": "6235:11:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 128,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 127,
												"mutability": "mutable",
												"name": "_salt",
												"nameLocation": "6263:5:0",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "6247:21:0",
												"stateVariable": false,
												"storageLocation": "calldata",
												"typeDescriptions": {
													"typeIdentifier": "t_string_calldata_ptr",
													"typeString": "string"
												},
												"typeName": {
													"id": 126,
													"name": "string",
													"nodeType": "ElementaryTypeName",
													"src": "6247:6:0",
													"typeDescriptions": {
														"typeIdentifier": "t_string_storage_ptr",
														"typeString": "string"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6246:23:0"
									},
									"returnParameters": {
										"id": 131,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 130,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 132,
												"src": "6293:4:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_bool",
													"typeString": "bool"
												},
												"typeName": {
													"id": 129,
													"name": "bool",
													"nodeType": "ElementaryTypeName",
													"src": "6293:4:0",
													"typeDescriptions": {
														"typeIdentifier": "t_bool",
														"typeString": "bool"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6292:6:0"
									},
									"scope": 139,
									"src": "6226:73:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								},
								{
									"documentation": {
										"id": 133,
										"nodeType": "StructuredDocumentation",
										"src": "6305:85:0",
										"text": " @dev getter for the implementation authority used by this factory."
									},
									"functionSelector": "2307f882",
									"id": 138,
									"implemented": false,
									"kind": "function",
									"modifiers": [],
									"name": "implementationAuthority",
									"nameLocation": "6404:23:0",
									"nodeType": "FunctionDefinition",
									"parameters": {
										"id": 134,
										"nodeType": "ParameterList",
										"parameters": [],
										"src": "6427:2:0"
									},
									"returnParameters": {
										"id": 137,
										"nodeType": "ParameterList",
										"parameters": [
											{
												"constant": false,
												"id": 136,
												"mutability": "mutable",
												"name": "",
												"nameLocation": "-1:-1:-1",
												"nodeType": "VariableDeclaration",
												"scope": 138,
												"src": "6453:7:0",
												"stateVariable": false,
												"storageLocation": "default",
												"typeDescriptions": {
													"typeIdentifier": "t_address",
													"typeString": "address"
												},
												"typeName": {
													"id": 135,
													"name": "address",
													"nodeType": "ElementaryTypeName",
													"src": "6453:7:0",
													"stateMutability": "nonpayable",
													"typeDescriptions": {
														"typeIdentifier": "t_address",
														"typeString": "address"
													}
												},
												"visibility": "internal"
											}
										],
										"src": "6452:9:0"
									},
									"scope": 139,
									"src": "6395:67:0",
									"stateMutability": "view",
									"virtual": false,
									"visibility": "external"
								}
							],
							"scope": 140,
							"src": "61:6403:0",
							"usedErrors": []
						}
					],
					"src": "36:6429:0"
				},
				"id": 0
			}
		}
	}
}