{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [],
				"name": "InvalidInitialization",
				"type": "error"
			},
			{
				"inputs": [],
				"name": "NotInitializing",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "AgentAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "AgentRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "claimTopicsRegistry",
						"type": "address"
					}
				],
				"name": "ClaimTopicsRegistrySet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "investorAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "uint16",
						"name": "country",
						"type": "uint16"
					}
				],
				"name": "CountryUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "investorAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IIdentity",
						"name": "identity",
						"type": "address"
					}
				],
				"name": "IdentityRegistered",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "investorAddress",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IIdentity",
						"name": "identity",
						"type": "address"
					}
				],
				"name": "IdentityRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "identityStorage",
						"type": "address"
					}
				],
				"name": "IdentityStorageSet",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "contract IIdentity",
						"name": "oldIdentity",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "contract IIdentity",
						"name": "newIdentity",
						"type": "address"
					}
				],
				"name": "IdentityUpdated",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "uint64",
						"name": "version",
						"type": "uint64"
					}
				],
				"name": "Initialized",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "trustedIssuersRegistry",
						"type": "address"
					}
				],
				"name": "TrustedIssuersRegistrySet",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "addAgent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address[]",
						"name": "_userAddresses",
						"type": "address[]"
					},
					{
						"internalType": "contract IIdentity[]",
						"name": "_identities",
						"type": "address[]"
					},
					{
						"internalType": "uint16[]",
						"name": "_countries",
						"type": "uint16[]"
					}
				],
				"name": "batchRegisterIdentity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					}
				],
				"name": "contains",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					}
				],
				"name": "deleteIdentity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					}
				],
				"name": "identity",
				"outputs": [
					{
						"internalType": "contract IIdentity",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "identityStorage",
				"outputs": [
					{
						"internalType": "contract IIdentityRegistryStorage",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_trustedIssuersRegistry",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_claimTopicsRegistry",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_identityStorage",
						"type": "address"
					}
				],
				"name": "init",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					}
				],
				"name": "investorCountry",
				"outputs": [
					{
						"internalType": "uint16",
						"name": "",
						"type": "uint16"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "isAgent",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					}
				],
				"name": "isVerified",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "issuersRegistry",
				"outputs": [
					{
						"internalType": "contract ITrustedIssuersRegistry",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					},
					{
						"internalType": "contract IIdentity",
						"name": "_identity",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "_country",
						"type": "uint16"
					}
				],
				"name": "registerIdentity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "removeAgent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_claimTopicsRegistry",
						"type": "address"
					}
				],
				"name": "setClaimTopicsRegistry",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_identityRegistryStorage",
						"type": "address"
					}
				],
				"name": "setIdentityRegistryStorage",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_trustedIssuersRegistry",
						"type": "address"
					}
				],
				"name": "setTrustedIssuersRegistry",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "topicsRegistry",
				"outputs": [
					{
						"internalType": "contract IClaimTopicsRegistry",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					},
					{
						"internalType": "uint16",
						"name": "_country",
						"type": "uint16"
					}
				],
				"name": "updateCountry",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_userAddress",
						"type": "address"
					},
					{
						"internalType": "contract IIdentity",
						"name": "_identity",
						"type": "address"
					}
				],
				"name": "updateIdentity",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"InvalidInitialization()": [
					{
						"details": "The contract is already initialized."
					}
				],
				"NotInitializing()": [
					{
						"details": "The contract is not initializing."
					}
				],
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"batchRegisterIdentity(address[],address[],uint16[])": {
					"details": "See {IIdentityRegistry-batchRegisterIdentity}."
				},
				"contains(address)": {
					"details": "See {IIdentityRegistry-contains}."
				},
				"deleteIdentity(address)": {
					"details": "See {IIdentityRegistry-deleteIdentity}."
				},
				"identity(address)": {
					"details": "See {IIdentityRegistry-identity}."
				},
				"identityStorage()": {
					"details": "See {IIdentityRegistry-identityStorage}."
				},
				"init(address,address,address)": {
					"details": "the constructor initiates the Identity Registry smart contract",
					"params": {
						"_claimTopicsRegistry": "the claim topics registry linked to the Identity Registry",
						"_identityStorage": "the identity registry storage linked to the Identity Registry  emits a `ClaimTopicsRegistrySet` event  emits a `TrustedIssuersRegistrySet` event  emits an `IdentityStorageSet` event",
						"_trustedIssuersRegistry": "the trusted issuers registry linked to the Identity Registry"
					}
				},
				"investorCountry(address)": {
					"details": "See {IIdentityRegistry-investorCountry}."
				},
				"isVerified(address)": {
					"details": "See {IIdentityRegistry-isVerified}."
				},
				"issuersRegistry()": {
					"details": "See {IIdentityRegistry-issuersRegistry}."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"registerIdentity(address,address,uint16)": {
					"details": "See {IIdentityRegistry-registerIdentity}."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"setClaimTopicsRegistry(address)": {
					"details": "See {IIdentityRegistry-setClaimTopicsRegistry}."
				},
				"setIdentityRegistryStorage(address)": {
					"details": "See {IIdentityRegistry-setIdentityRegistryStorage}."
				},
				"setTrustedIssuersRegistry(address)": {
					"details": "See {IIdentityRegistry-setTrustedIssuersRegistry}."
				},
				"topicsRegistry()": {
					"details": "See {IIdentityRegistry-topicsRegistry}."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"updateCountry(address,uint16)": {
					"details": "See {IIdentityRegistry-updateCountry}."
				},
				"updateIdentity(address,address)": {
					"details": "See {IIdentityRegistry-updateIdentity}."
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"ClaimTopicsRegistrySet(address)": {
					"notice": "this event is emitted when the ClaimTopicsRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `claimTopicsRegistry` is the address of the Claim Topics Registry contract"
				},
				"CountryUpdated(address,uint16)": {
					"notice": "this event is emitted when an Identity's country has been updated  the event is emitted by the 'updateCountry' function  `investorAddress` is the address on which the country has been updated  `country` is the numeric code (ISO 3166-1) of the new country"
				},
				"IdentityRegistered(address,address)": {
					"notice": "this event is emitted when an Identity is registered into the Identity Registry.  the event is emitted by the 'registerIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
				},
				"IdentityRemoved(address,address)": {
					"notice": "this event is emitted when an Identity is removed from the Identity Registry.  the event is emitted by the 'deleteIdentity' function  `investorAddress` is the address of the investor's wallet  `identity` is the address of the Identity smart contract (onchainID)"
				},
				"IdentityStorageSet(address)": {
					"notice": "this event is emitted when the IdentityRegistryStorage has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `identityStorage` is the address of the Identity Registry Storage contract"
				},
				"IdentityUpdated(address,address)": {
					"notice": "this event is emitted when an Identity has been updated  the event is emitted by the 'updateIdentity' function  `oldIdentity` is the old Identity contract's address to update  `newIdentity` is the new Identity contract's"
				},
				"TrustedIssuersRegistrySet(address)": {
					"notice": "this event is emitted when the TrustedIssuersRegistry has been set for the IdentityRegistry  the event is emitted by the IdentityRegistry constructor  `trustedIssuersRegistry` is the address of the Trusted Issuers Registry contract"
				}
			},
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts t-rex/registry/implementation/IdentityRegistry.sol": "IdentityRegistry"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol": {
			"keccak256": "0x3a12f842236b7ff3579bbd245fb0b243f77e98cd721ea165d679324a099af20d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a70c3c9183bb995a8fe01e1438c5cceab748f4d20b2da501e6232f2e62835240",
				"dweb:/ipfs/QmafwCmChS3jFUcZVU5SujANLfu1uX13e1HaMokc8ga6Wz"
			]
		},
		"@onchain-id/solidity/contracts/interface/IERC734.sol": {
			"keccak256": "0x8c8a5a7951ee25569288c0c6662b59599deec7d0f2fcb74c8f80a8fd9354e8af",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f8d9b77d41bcd0f68eac91543b9e162dadb3078e13d558db153307f3ee01f819",
				"dweb:/ipfs/QmXs6vjAfnXFz1VQxNBGQUv5i2DHr9AeJ9ezG5RQHy4bWd"
			]
		},
		"@onchain-id/solidity/contracts/interface/IERC735.sol": {
			"keccak256": "0xaaea6f3ecdc5f30e795e07aacdfc1b177741ef174910e943e96f6de7a8db6efb",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ebb12c62267e4f33475cfe554bbc32740b8a1e2a620d88338490fb0dcb0d4523",
				"dweb:/ipfs/QmTXg9XUuEcTMZBc3FbGRaSekxEv8rE3oyYJQUJ9Zi3qo9"
			]
		},
		"@onchain-id/solidity/contracts/interface/IIdentity.sol": {
			"keccak256": "0x206c93ed62a48802edcad87e229f53c74817349a49f5ef21ea4780ab27b39cdf",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://82a0e205a814739ac45b4d1fc490aa40f5f0da4e9a9f1fb1d998c595850a29c4",
				"dweb:/ipfs/QmTqc9Z9mGmCPw3v76S2oAFkxjjQXrpgJ5YYzYj5gtbrnN"
			]
		},
		"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol": {
			"keccak256": "0xf702b0c3a7ccdae8bb7b1265c9bb536ce4051311d82b1b44b94a43bfbe130818",
			"license": "MIT",
			"urls": [
				"bzz-raw://3de77c5e3f4ac02518481cb21e907f5f1fd5bb8f3f3c6c880fdb193afc006c77",
				"dweb:/ipfs/QmXXrLgxyDswm4zjz27GvGRZQWcWg8Tpu8ANvrmDk5q1sW"
			]
		},
		"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol": {
			"keccak256": "0x65315805c3cddf140325ec9d7cf45cfca17b73b4680d1401e0869e63f4d4eebd",
			"license": "MIT",
			"urls": [
				"bzz-raw://06ab79ad2381ae0dcbd1fa902630d2cf024c586f885bb7d54fd6e0ed93c22325",
				"dweb:/ipfs/QmYtzBU3tiEHPh68xFdxLGc5PJtxiH8RHmchx1hzwcRhZT"
			]
		},
		"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol": {
			"keccak256": "0xdaecaa981ac8b1d77c4942c691cbeb71971a0fa2a0adba07e2f2d75da8ca2fd9",
			"license": "MIT",
			"urls": [
				"bzz-raw://c1596acf548eb5b52b95c684f8913729cdb04102ce76e3203c1831fa2dc6dfb3",
				"dweb:/ipfs/QmYQM9sizfJu613HW3UL52CUe6pxC3osc4bfJRyD1p8SWc"
			]
		},
		"contracts t-rex/registry/implementation/IdentityRegistry.sol": {
			"keccak256": "0x061460bac83b545e9c6617b2c12a3b040a0b12846ee5bc92cb22bd3926f8a93b",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://18e1b8635839aa5d84ee6114073564ac1818a5051e281611e1c1327d6f7aec29",
				"dweb:/ipfs/QmUE1mpEn17fREeoUDhxT7UPSA2XNHan5T7H5qN4R2Rrih"
			]
		},
		"contracts t-rex/registry/interface/IClaimTopicsRegistry.sol": {
			"keccak256": "0x878a76f41e117a67b97a698755e9875701282fcc12890c5ebaf85264808e5608",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://46639925c8db6a5442687f74c489bd9f05904acc2f87579f3f538e2a8d5045e2",
				"dweb:/ipfs/QmQSQHd9jMT98LDnD3cxHFK4L9zZ7fLLd9tJUu1ddZYoLn"
			]
		},
		"contracts t-rex/registry/interface/IIdentityRegistry.sol": {
			"keccak256": "0xce63ed845f95b5fe108f16029a6cbe77df130c37e91fed3651098aab7ac82747",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://2ed88bfac46fb3b6f5600276b68f043ce40a624f77c4c13ccb7091932d9277bb",
				"dweb:/ipfs/QmYKqQfmLWJUJrrcYdCXU5bCZU8baZGgqq4vPEaRDsGPa1"
			]
		},
		"contracts t-rex/registry/interface/IIdentityRegistryStorage.sol": {
			"keccak256": "0x8ada486c1c9fe45156df6bde7326dd2454ebf16b00caf003915c82847b08cfee",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8dca0a89a9d95dc3dc29333fafcdc0834169dc3e51b3b19203ec6a18dbde3170",
				"dweb:/ipfs/QmVjJwN6kKq6MwZc7hpw98wjmXyyyAqPkr7KAnixe2jxTj"
			]
		},
		"contracts t-rex/registry/interface/ITrustedIssuersRegistry.sol": {
			"keccak256": "0xf85a074a00edd299b7e980da614debe8b17af0dac4a3f98d5cba7e6f2a3a8263",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ce3fca047a970c6039cd238f3b3a7203221876f8a8924f3164ab36f9f1771dcb",
				"dweb:/ipfs/QmcGym6CWid1ejg4MmJmFBfk32gg7K1F7YutEkTriDQYTj"
			]
		},
		"contracts t-rex/registry/storage/IRStorage.sol": {
			"keccak256": "0xbf5d8d97eff5eeb3d160f53294627dbcbb65d85c4faa275c40fddec63b8af027",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://1efbb1b0f18c0963d090f425a9dcd28df77bd8eb4cd9bd5af1ec06d62e30c9d0",
				"dweb:/ipfs/QmX9bSmdYjZSfAafkfieB8Rz9NwiVCLrrRHwf8G2QHxYyf"
			]
		},
		"contracts t-rex/roles/AgentRoleUpgradeable.sol": {
			"keccak256": "0x8e5c6409d5d25a3d73e615fe568ea72edb0dae9e2393f392ec694b33655727e5",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://327c9f2b5f56bf3a969b852c4c22dfc6a67eb0e97ed0b15b386d930387ced245",
				"dweb:/ipfs/QmWMwpykNT2cihW4mVWtEcKwNtQ96YLnSJZCSzRCmBE9PD"
			]
		},
		"contracts t-rex/roles/Roles.sol": {
			"keccak256": "0xb69d89c5433a8f4fdfed0c175c57b0fa2e9c3d38a4f055b0106c8508d6f61191",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://317653424be944ca693bd934c21ab500eccd37eea765d4d7901f8102e736310b",
				"dweb:/ipfs/QmXijBCZ6C8ATZY9CxFn1HvuQFuLvSbfyZCjXQ6SJkEWBc"
			]
		}
	},
	"version": 1
}