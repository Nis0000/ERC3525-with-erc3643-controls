{
	"compiler": {
		"version": "0.8.17+commit.8df45f5f"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "owner",
						"type": "address"
					}
				],
				"name": "OwnableInvalidOwner",
				"type": "error"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "account",
						"type": "address"
					}
				],
				"name": "OwnableUnauthorizedAccount",
				"type": "error"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "AgentAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "AgentRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "previousOwner",
						"type": "address"
					},
					{
						"indexed": true,
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "OwnershipTransferred",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "_agentAddress",
						"type": "address"
					}
				],
				"name": "TokenAgentAdded",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "_agentAddress",
						"type": "address"
					}
				],
				"name": "TokenAgentRemoved",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "TokenBound",
				"type": "event"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": false,
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "TokenUnbound",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "addAgent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agentAddress",
						"type": "address"
					}
				],
				"name": "addTokenAgent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "bindToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "canTransfer",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "created",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "destroyed",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "isAgent",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agentAddress",
						"type": "address"
					}
				],
				"name": "isTokenAgent",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "isTokenBound",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "owner",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agent",
						"type": "address"
					}
				],
				"name": "removeAgent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_agentAddress",
						"type": "address"
					}
				],
				"name": "removeTokenAgent",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "renounceOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "tokenBound",
				"outputs": [
					{
						"internalType": "contract IToken",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newOwner",
						"type": "address"
					}
				],
				"name": "transferOwnership",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_from",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_to",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "transferred",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_token",
						"type": "address"
					}
				],
				"name": "unbindToken",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"errors": {
				"OwnableInvalidOwner(address)": [
					{
						"details": "The owner is not a valid owner account. (eg. `address(0)`)"
					}
				],
				"OwnableUnauthorizedAccount(address)": [
					{
						"details": "The caller account is not authorized to perform an operation."
					}
				]
			},
			"kind": "dev",
			"methods": {
				"addTokenAgent(address)": {
					"details": "See {ICompliance-addTokenAgent}.  this function is deprecated, but still implemented to avoid breaking interfaces"
				},
				"bindToken(address)": {
					"details": "See {ICompliance-bindToken}."
				},
				"canTransfer(address,address,uint256)": {
					"details": "checks that the transfer is compliant.  default compliance always returns true  READ ONLY FUNCTION, this function cannot be used to increment  counters, emit events, ...",
					"params": {
						"_amount": "The amount of tokens involved in the transfer",
						"_from": "The address of the sender",
						"_to": "The address of the receiver"
					}
				},
				"created(address,uint256)": {
					"details": "function called whenever tokens are created  on a wallet  this function can update state variables in the compliance contract  these state variables being used by `canTransfer` to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the compliance smart contract",
					"params": {
						"_amount": "The amount of tokens involved in the transfer",
						"_to": "The address of the receiver"
					}
				},
				"destroyed(address,uint256)": {
					"details": "function called whenever tokens are destroyed  this function can update state variables in the compliance contract  these state variables being used by `canTransfer` to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the compliance smart contract",
					"params": {
						"_amount": "The amount of tokens involved in the transfer",
						"_from": "The address of the receiver"
					}
				},
				"isTokenAgent(address)": {
					"details": "See {ICompliance-isTokenAgent}."
				},
				"isTokenBound(address)": {
					"details": "See {ICompliance-isTokenBound}."
				},
				"owner()": {
					"details": "Returns the address of the current owner."
				},
				"removeTokenAgent(address)": {
					"details": "See {ICompliance-isTokenAgent}."
				},
				"renounceOwnership()": {
					"details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
				},
				"transferOwnership(address)": {
					"details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
				},
				"transferred(address,address,uint256)": {
					"details": "function called whenever tokens are transferred  from one wallet to another  this function can update state variables in the compliance contract  these state variables being used by `canTransfer` to decide if a transfer  is compliant or not depending on the values stored in these state variables and on  the parameters of the compliance smart contract",
					"params": {
						"_amount": "The amount of tokens involved in the transfer",
						"_from": "The address of the sender",
						"_to": "The address of the receiver"
					}
				},
				"unbindToken(address)": {
					"details": "See {ICompliance-unbindToken}."
				}
			},
			"version": 1
		},
		"userdoc": {
			"events": {
				"TokenAgentAdded(address)": {
					"notice": "this event is emitted when the Agent has been added on the allowedList of this Compliance.  the event is emitted by the Compliance constructor and by the addTokenAgent function  `_agentAddress` is the address of the Agent to add"
				},
				"TokenAgentRemoved(address)": {
					"notice": "this event is emitted when the Agent has been removed from the agent list of this Compliance.  the event is emitted by the Compliance constructor and by the removeTokenAgent function  `_agentAddress` is the address of the Agent to remove"
				},
				"TokenBound(address)": {
					"notice": "this event is emitted when a token has been bound to the compliance contract  the event is emitted by the bindToken function  `_token` is the address of the token to bind"
				},
				"TokenUnbound(address)": {
					"notice": "this event is emitted when a token has been unbound from the compliance contract  the event is emitted by the unbindToken function  `_token` is the address of the token to unbind"
				}
			},
			"kind": "user",
			"methods": {
				"tokenBound()": {
					"notice": "Mapping of tokens linked to the compliance contract"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts t-rex/compliance/legacy/BasicCompliance.sol": "BasicCompliance"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"@onchain-id/solidity/contracts/interface/IClaimIssuer.sol": {
			"keccak256": "0x3a12f842236b7ff3579bbd245fb0b243f77e98cd721ea165d679324a099af20d",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://a70c3c9183bb995a8fe01e1438c5cceab748f4d20b2da501e6232f2e62835240",
				"dweb:/ipfs/QmafwCmChS3jFUcZVU5SujANLfu1uX13e1HaMokc8ga6Wz"
			]
		},
		"@onchain-id/solidity/contracts/interface/IERC734.sol": {
			"keccak256": "0x8c8a5a7951ee25569288c0c6662b59599deec7d0f2fcb74c8f80a8fd9354e8af",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f8d9b77d41bcd0f68eac91543b9e162dadb3078e13d558db153307f3ee01f819",
				"dweb:/ipfs/QmXs6vjAfnXFz1VQxNBGQUv5i2DHr9AeJ9ezG5RQHy4bWd"
			]
		},
		"@onchain-id/solidity/contracts/interface/IERC735.sol": {
			"keccak256": "0xaaea6f3ecdc5f30e795e07aacdfc1b177741ef174910e943e96f6de7a8db6efb",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ebb12c62267e4f33475cfe554bbc32740b8a1e2a620d88338490fb0dcb0d4523",
				"dweb:/ipfs/QmTXg9XUuEcTMZBc3FbGRaSekxEv8rE3oyYJQUJ9Zi3qo9"
			]
		},
		"@onchain-id/solidity/contracts/interface/IIdentity.sol": {
			"keccak256": "0x206c93ed62a48802edcad87e229f53c74817349a49f5ef21ea4780ab27b39cdf",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://82a0e205a814739ac45b4d1fc490aa40f5f0da4e9a9f1fb1d998c595850a29c4",
				"dweb:/ipfs/QmTqc9Z9mGmCPw3v76S2oAFkxjjQXrpgJ5YYzYj5gtbrnN"
			]
		},
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0x14699275e6f580c272fa15fff269c03f2c1df22507d0705ddf739129d87753fd",
			"license": "MIT",
			"urls": [
				"bzz-raw://c960ccca3f4568fac4f47844ffdbb6e7902b926e04a14bcc432eec8377636321",
				"dweb:/ipfs/Qma9BY76AJhM3o355eq1hiJVKgKoNYaTwSdxQF8VfJAtpw"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0x9d9a2ab7a13db9613c956472cddcbe983ac10170ab69aa76ccbf5a70d7ddb8ea",
			"license": "MIT",
			"urls": [
				"bzz-raw://1e50c8b7e61650318c192072fbb3b0636ffbdce7640e69ff1bc9735dd041889a",
				"dweb:/ipfs/QmdQ5bzaAvCfF8rkvekKQRQAyW5EoQzdLSuGBkYvoQS9NV"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x889b272e9700888246793e6f9931ed4d5d9f73340e6b9800e0925fdd188e0f49",
			"license": "MIT",
			"urls": [
				"bzz-raw://95fc3751ee9a51013d1793e09b11fcacd0e977fa44018527388f32f19978677b",
				"dweb:/ipfs/QmZQLLm2qrNtm4VdWQBr2FxwjQvYfsktwFDHmKqagdXgW9"
			]
		},
		"contracts t-rex/compliance/legacy/BasicCompliance.sol": {
			"keccak256": "0x66a619c2d26ce24b11faa34d1b3dde453c378ca0efc21f34c7e64bf4d89c39dc",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://4cd1e2b1de37b91777f700de34d96b72576a19eb3a657647c6980cf102fae8cc",
				"dweb:/ipfs/QmQJQZVnSJPzWABXd9TmkdEMdGCUjiQEEqCYnwNU7rbDNJ"
			]
		},
		"contracts t-rex/compliance/legacy/ICompliance.sol": {
			"keccak256": "0x32f4f43d7e8bebd9459a8202badbb97e72d9ab3bfd15a9754b9d3a4fca063268",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f716bf3a5b71ec018cbdfa07f3377f057098587045c89f321fb7eb081d6c9338",
				"dweb:/ipfs/QmUrytbfeWzwdx3VEbBbAttrste7P7bLatY25EbfrBjSiw"
			]
		},
		"contracts t-rex/compliance/modular/IModularCompliance.sol": {
			"keccak256": "0xf632b47a306502ce66a0e432c7c3a7d3290ab8325a854bdefe2268d61fb7cc7f",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://988eb31577cdd253e9ff2743983c466f81fdb6b944b24d3c55b0263ae45f3d3d",
				"dweb:/ipfs/QmZFixdMi55m78eEfrLN3yiNL4VR3AWSgKcjaRBBq4FskX"
			]
		},
		"contracts t-rex/registry/interface/IClaimTopicsRegistry.sol": {
			"keccak256": "0x878a76f41e117a67b97a698755e9875701282fcc12890c5ebaf85264808e5608",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://46639925c8db6a5442687f74c489bd9f05904acc2f87579f3f538e2a8d5045e2",
				"dweb:/ipfs/QmQSQHd9jMT98LDnD3cxHFK4L9zZ7fLLd9tJUu1ddZYoLn"
			]
		},
		"contracts t-rex/registry/interface/IIdentityRegistry.sol": {
			"keccak256": "0xce63ed845f95b5fe108f16029a6cbe77df130c37e91fed3651098aab7ac82747",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://2ed88bfac46fb3b6f5600276b68f043ce40a624f77c4c13ccb7091932d9277bb",
				"dweb:/ipfs/QmYKqQfmLWJUJrrcYdCXU5bCZU8baZGgqq4vPEaRDsGPa1"
			]
		},
		"contracts t-rex/registry/interface/IIdentityRegistryStorage.sol": {
			"keccak256": "0x8ada486c1c9fe45156df6bde7326dd2454ebf16b00caf003915c82847b08cfee",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://8dca0a89a9d95dc3dc29333fafcdc0834169dc3e51b3b19203ec6a18dbde3170",
				"dweb:/ipfs/QmVjJwN6kKq6MwZc7hpw98wjmXyyyAqPkr7KAnixe2jxTj"
			]
		},
		"contracts t-rex/registry/interface/ITrustedIssuersRegistry.sol": {
			"keccak256": "0xf85a074a00edd299b7e980da614debe8b17af0dac4a3f98d5cba7e6f2a3a8263",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://ce3fca047a970c6039cd238f3b3a7203221876f8a8924f3164ab36f9f1771dcb",
				"dweb:/ipfs/QmcGym6CWid1ejg4MmJmFBfk32gg7K1F7YutEkTriDQYTj"
			]
		},
		"contracts t-rex/roles/AgentRole.sol": {
			"keccak256": "0xcd21fcba9d7fbe7aa824151f3d8252e211b22ea8213cab4bc3808fe2812a5b91",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://f212dcd4d90f7e85f3943ae130f32cb509f7b77c98a6a3a060cec30fe92420dc",
				"dweb:/ipfs/QmNVtWxfxW51EfPiB5XB99detkhTTJN6s2kEDhFy3TZZbW"
			]
		},
		"contracts t-rex/roles/Roles.sol": {
			"keccak256": "0xb69d89c5433a8f4fdfed0c175c57b0fa2e9c3d38a4f055b0106c8508d6f61191",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://317653424be944ca693bd934c21ab500eccd37eea765d4d7901f8102e736310b",
				"dweb:/ipfs/QmXijBCZ6C8ATZY9CxFn1HvuQFuLvSbfyZCjXQ6SJkEWBc"
			]
		},
		"contracts t-rex/token/IToken.sol": {
			"keccak256": "0xf5c167244bcf46aa12fa678c6821c9534cd7b251c254dafd4fefb7586d3310ef",
			"license": "GPL-3.0",
			"urls": [
				"bzz-raw://386e323cddab4b50c2d904ce549f4cdf096881d65ca3d28a5ec79db313c3357c",
				"dweb:/ipfs/QmQ1VqhgoGpfKFXGhgvSqKsQFLnbbJd9FWogSouoFDs45q"
			]
		}
	},
	"version": 1
}